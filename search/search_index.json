{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IT-Security Docs","text":"<p>Go to the Homebase</p>"},{"location":"themes/000%20Index/","title":"Index","text":"<p>Welcome to the index. This is homebase. The Notes are based on the IMF Framework (get familiar with the concept first).</p>"},{"location":"themes/000%20Index/#index-categories","title":"Index Categories","text":"<p>000s - Index, Terms, Organisations, Ports, Powers of 2 and the following Maps of Content (MOCs): 100s - Applied Cryptography 1: symmetric cryptography 200s - Applied Cryptography 2: asymmetric cryptography 300s - Modern Cryptography: summary of the book \"Introduction to Modern Cryptography\" 1</p>"},{"location":"themes/000%20Index/#main-keywords","title":"Main Keywords","text":"<ul> <li>100s - #AC1 #symmetric</li> <li>200s - #AC2 #asymmetric #math</li> <li>300s - #ModernCryptography #symmetric #asymmetric </li> <li>Computability and Complexity - #computability-complexity </li> </ul> <ol> <li> <p>Introduction to Modern Cryptography, Third Edition (Chapman &amp; Hall/Crc Cryptography and Network Security) by Jonathan Katz and Yehuda Lindell (ISBN: 780815354369)\u00a0\u21a9</p> </li> </ol>"},{"location":"themes/002%20Terms/","title":"Terms","text":"<p>links: Index</p> <p>NIST Glossary</p> <ul> <li>The NIST maintains a comprehensive cybersecurity glossary: NIST Glossary</li> <li>Check actual recommendations for key length on Keylenght.com</li> </ul>"},{"location":"themes/002%20Terms/#ac1","title":"AC1","text":"<p>Cryptographic Hash Functions</p> <ul> <li>SHA-1 (Merkle\u2013Damg\u00e5rd construction)</li> <li>SHA-2 (Merkle\u2013Damg\u00e5rd construction)</li> <li>SHA-3 (Sponge construction / Keccak)</li> <li>BLAKE (ChaCha)</li> </ul> <p>KDF (Key Derivation Function) </p> <ul> <li>KDF</li> <li>HKDF (Using HMAC)</li> <li>Argon2 (Password Based \\(\\rightarrow\\) PBKDF)</li> <li>PBKDF2</li> <li>scrypt</li> </ul> <p>MAC (Message Authentication Code)</p> <ul> <li>CBC-MAC (Block cipher based)</li> <li>HMAC (Hash-and-Mac based)</li> <li>Poly1305 &amp; GMAC (Based on a universal hash family)</li> <li>KMAC (Based on Keccak. Also usable as a regular hash function without key)</li> </ul> <p>AEAD (Authenticated Encryption and Associated Data)</p> <ul> <li>AES-GCM (Block cipher)</li> <li>ChaCha20-Poly1305 (Bernstein)</li> <li>Ascon (Sponge construction)</li> </ul> <p>XOF (Extended Output Function)</p> <ul> <li>SHAKE &amp; cSHAKE (Based on Keccak)</li> </ul> <p>Random</p> <ul> <li>PRG (Pseudo Random Generator)</li> <li>PRNG (Pseudo Random Number Generator)<ul> <li>Subset of PRG. Used interchangeably.</li> </ul> </li> <li>CSPRNG (Cryptographically secure pseudorandom number generator)<ul> <li>A PRNG that is safe for cryptographic use. (Assuming the seed is picked correctly)</li> </ul> </li> <li>PRF (Pseudo Random Function) <ul> <li>KDF &gt; PRF &gt; MAC</li> <li>HASH vs XOF vs MAC vs PRF vs KDF</li> </ul> </li> <li>RNG (Random Number Generator)<ul> <li>Some mechanism that produces random numbers</li> </ul> </li> <li>TRNG (True Random Number Generator)<ul> <li>An RNG that is based off of some unpredictable physical process.</li> </ul> </li> </ul> <p>IND-CPA</p> <ul> <li>Randomized Encryption<ul> <li>AES-CBC (not Chained CBC mode!)</li> <li>AES-OFB</li> <li>AES-CTR</li> </ul> </li> </ul> <p>IND-CCA</p> <ul> <li>Authenticated Encryption / AEAD \\(\\rightarrow\\) Non-Mallable<ul> <li>AES-GCM</li> <li>ChaCha20-Poly1305</li> <li>Ascon</li> </ul> </li> </ul> <p>Naming Systems</p> <ul> <li>Cryptography in DNS (DNSSEC / DNSCurve / DoT / DoH / RAINS)</li> <li>Ethereum Name Systems</li> </ul> <p>Secure Channel</p> <ul> <li>Authenticity &amp; Repudiation!<ul> <li>OTR (DSA &amp; DH)</li> <li>Secure Channels#Triple Diffie-Hellman (3DH)|3DH (only DH)</li> </ul> </li> </ul> <p>Key Establishing</p> <ul> <li>Neumann-Stubblebine (Broken)</li> <li>Denning-Sacco</li> <li>Wide-Mouth Frog protocol</li> <li>Needham-Schroeder protocol</li> <li>Kerberos</li> <li>Otway-Rees protocol</li> <li>STS</li> </ul> <p>Key Revocation</p> <ul> <li>CRL (x.509)</li> <li>OCSP / OCSP Stapling</li> <li>Controlled flooding<ul> <li>Bloom Filter (BF / CBF / IBF)</li> <li>Set Union Protocol</li> </ul> </li> </ul> <p>Key Management</p> <ul> <li>PSE<ul> <li>Software (PKCS#12)</li> <li>Hardware (YubiKey)</li> <li>HSM</li> </ul> </li> <li>Shamir Secret Sharing (Polynominals)</li> <li>Anastasis (Key escrow and recovery)</li> <li>Threshold Signatures (FROST / FROSIX)</li> </ul>"},{"location":"themes/002%20Terms/#ac2","title":"AC2","text":"<p>Math</p> <ul> <li>GCD (Greatest common divisor)</li> <li>Euler's Totient Function (\\(\\phi\\))</li> <li>Fermat's Little Theorem (\\(a^{p-1}\\equiv 1 \\quad (mod\\; p)\\))</li> <li>Euler's Theorem (\\(a^{\\phi(n)}\\equiv 1 \\;(mod \\; n)\\))</li> <li>Primitive Root</li> <li>Multiplicative Inverse</li> <li>Co-prime</li> <li>Safe prime (\\(p = 2q+1\\))</li> <li>Lagrange's Theorem (For sub groups)</li> <li>Miller-Rabin (Primality test)</li> <li>Algorithm of Euclid (Standard and extended)</li> <li>Square and Multiply</li> <li>Hardness Assumptions for Cryptography</li> <li>BSGS (Baby-Step-Giant-Step + Pollard's rho)</li> <li>Group, Ring and Field (differences)</li> <li>Embedding Degree</li> <li>Pairing</li> <li>Pairing-based cryptography</li> <li>Homomorphic Encryption (Make calculations on the ciphertext)</li> </ul> Notation Description \\(\\mathbb{Z}_n\\) Set of integers modulo n, called the ring of integers modulo \\(n\\). Consists of the integers \\(\\{0, 1, 2, ..., n-1\\}\\) Additive group \\((\\mathbb{Z}_n, +_n, \u2212_n, 0)\\) \\(\\mathbb{Z}_n^*\\) Multiplicative group \\((Z^\u2217_n, \\times_n,^{\u22121} ,1)\\) \\(G_q \u2282 Z^\u2217_p\\) Subgroup \\(G_q\\) (If \\(p\\) and \\(q\\) are used prime numbers are implied) \\(G\\) / \\(\\mathcal{G}\\) Group notation \\(\\mathcal{G} =(G,\u25e6,inv,e)\\) \\(F\\) / \\(\\mathcal{F}\\) Field notation \\(\\mathcal{F} = (F,+,\u2212,0,\u00d7,^{\u22121} ,1)\\) \\(E_{a,b}(F)\\) Elliptic curve over a field with curve parameters \\(a\\) and \\(b\\) <ul> <li>Generators: {\\(3,4,9,16\\)} are always a generator</li> </ul> <p>Adversary Model / Security Model</p> <ul> <li>in Public-Key cryptography, CPA-Security is the minimum (PK is public!)<ul> <li>CCA1 (non-adaptive): adversary gets \\(c\\) after asking oracle</li> <li>CCA2 (adaptive): adversary get \\(c\\) before asking oracle</li> </ul> </li> </ul> <p></p> <p>Public-key cryptosystems</p> <ul> <li>DH (Key exchange)</li> <li>ElGamal (encryption)</li> <li>RSA (encryption)</li> <li>RSA (signature)</li> <li>Blind Signatures (with RSA)</li> <li>Schnorr (signature)</li> <li>DSA (signature)</li> <li>BLS (signature)</li> </ul> <p>Certificates</p> <ul> <li>X.509 (Format of public key certificates)</li> <li>CA (Certification Authority)</li> <li>OCSP (Online Certificate Status Protocol)</li> <li>DANE (DNS-Based Authentication of Named Entities)</li> <li>DNSSEC</li> <li>HPKP (HTTP Public Key Pinning)</li> <li>HSTS (HTTP Strict Transport Security)</li> </ul> <p>Secure Channels / Messaging</p> <ul> <li>TLS (Transport Layer Security)</li> <li>SMTP (Simple Mail Transfer Protocol)</li> <li>MIME (Multipurpose Internet Mail Extensions)</li> <li>S/MIME (Secure/Multipurpose Internet Mail Extensions)</li> <li>Forward secrecy (past stays secret)</li> <li>Future secrecy (future will stay secret)</li> <li>SCIMP (Silent Circle Instant Message Protocol)</li> <li>Signal Protocol</li> </ul> <p>Anonymity</p> <ul> <li>Anonymity (Different aspects of anonymity) </li> <li>Trilemmas (achieve 2 out of 3 goals)</li> <li>Sybil attack (many fake identities)</li> <li>Eclipse attack (separate nodes from each other)</li> <li>Poisoning attack (nodes provide false information)</li> <li>Timing attack (latency, delay, timestamps)</li> <li>Boyd's Theorems (about secure communication)</li> <li>Zfone Authentication (extend DH stuff and call each other)</li> <li>Self stabilisation (system that recovers it self)</li> <li>SMC (Secure Multiparty Computation. Jointly compute something but private)</li> <li>Mixing (Mixing for emails mostly)</li> <li>TOR</li> <li>TOR Hidden Services</li> </ul> <p>Decentralisation</p> <ul> <li>GPG (GNU Privacy Guard)</li> <li>Trust Model (TOFU, Web of Trust, Hierarchical Trust)</li> <li>Fog of Trust (Secure Web of Trust)</li> <li>DHT (Distributed Hash Tables and different approaches)</li> <li>GNS (GNU Name System)</li> <li>GNUnet</li> </ul> <p>Taler</p> <ul> <li>Cut-and-choose (Zero knowledge proof)</li> <li>GNU Taler (Overview)</li> <li>Credit Card Surveillance</li> <li>Double Spending Problem</li> <li>Payto (Similar to mailto)</li> </ul> <p>links: Index</p>"},{"location":"themes/003%20Organisations/","title":"Organisations","text":"<p>links: Index</p> <ul> <li>IEEE (Institute of Electrical and Electronics Engineers)</li> <li>NIST (National Institute of Standards and Technology)</li> <li>IETF (Internet Engineering Task Force)<ul> <li>Standards organisation for the Internet and responsible for the technical standards that make up the Internet protocol suite (TCP/IP). Here we find RFCs.</li> </ul> </li> <li>IANA (Internet Assigned Numbers Authority)<ul> <li>Standards organisation that oversees global IP address allocation, autonomous system number allocation, ports, root zone management in the Domain Name System (DNS), media types, and other Internet Protocol\u2013related symbols and Internet numbers.</li> </ul> </li> <li>ICANN (Internet Corporation for Assigned Names and Numbers)<ul> <li>Responsible for coordinating the maintenance and procedures of several databases related to the namespaces and numerical spaces of the Internet, ensuring the network's stable and secure operation.</li> </ul> </li> <li>RIPE NCC (R\u00e9seaux IP Europ\u00e9ens Network Coordination Centre)<ul> <li>Regional Internet registry (RIR) for Europe, the Middle East and parts of Central Asia.</li> </ul> </li> <li>W3C (World Wide Web Consortium)<ul> <li>An international community that develops open standards to ensure the long-term growth of the Web. While their focus is broader than just domain names and IP addresses, they play a key role in the standardisation of Web technologies.</li> </ul> </li> <li>ITU (International Telecommunication Union) ^1776b5<ul> <li>Agency of the UN. X.509.</li> </ul> </li> <li>Some DNS Root Server Organisations<ul> <li>Verisign, NASA, US Department of Defence, US Army, RIPE NCC, ICANN...</li> </ul> </li> <li>Big Certification Authorities<ul> <li>DigiCert, GlobalSign, Let's Encrypt, GoDaddy...</li> </ul> </li> </ul> <p>links: Index</p>"},{"location":"themes/004%20Ports/","title":"Ports","text":"<p>links: Index</p> <ul> <li>20/21: FTP</li> <li>22: SSH</li> <li>25/465/587: SMTP</li> <li>53: DNS</li> <li>80/443: HTTP, HTTPS</li> <li>110/995: POP3</li> <li>143/993: IMAP</li> </ul> <p>links: Index</p>"},{"location":"themes/005%20Powers%20of%202/","title":"Powers of 2","text":"<p>links: Index</p> <p>Big Numbers in Context</p> Exponent Result 0 1 1 2 2 4 3 8 4 16 5 32 6 64 7 128 8 256 9 512 10 1024 11 2048 12 4096 13 8192 14 16384 15 32768 16 65536 17 131072 18 262144 19 524288 20 1'048'576 32 4'294'967'296 64 1.84 * 10^19 128 3.4 * 10^38 256 1.16 * 10^77 512 1.34 * 10^154 <p>links: Index</p>"},{"location":"themes/100%20AC1%20MOC/","title":"Applied Cryptography 1 MOC","text":"<p>links: Index</p> <ul> <li>Topic 01: Introduction to IT Security</li> <li>Topic 02: Security &amp; Cryptography</li> <li>Topic 03: Randomness</li> <li>Topic 04: Private Key Encryption</li> <li>Topic 05: Random Oracle &amp; Applications</li> <li>Topic 06: Authenticated Encryption with Associated Data</li> <li>Topic 07: From Symmetric Encryption to Secure Channels</li> <li>Topic 08: Blockchain</li> <li>Topic 09: Secret sharing, symmetric key management</li> </ul> <p>links: Index</p>"},{"location":"themes/101%20AC1%20TOC%20-%20Intro/","title":"AC1 TOC - Intro","text":"<p>links: AC1 MOC - Index</p> <ul> <li>Ethics and Law</li> <li>Computer Security Dictionary</li> <li>Hacking</li> <li>Social Engineering</li> <li>Mass Surveillance</li> </ul> <p>links: AC1 MOC - Index</p>"},{"location":"themes/102%20AC1%20TOC%20-%20Security%20%26%20Cryptography/","title":"AC1 TOC - Security &amp; Cryptography","text":"<p>links: AC1 MOC - Index</p> <ul> <li>Security</li> <li>Cryptography</li> <li>Shannons Theorem</li> <li>Shannon Cipher</li> <li>Steganography</li> <li>OneTimePad</li> <li>Cryptoanalysis</li> </ul> <p>links: AC1 MOC - Index</p>"},{"location":"themes/103%20AC1%20TOC%20-%20Randomness/","title":"AC1 TOC - Randomness","text":"<p>links: AC1 MOC - Index</p> <ul> <li>Randomness</li> <li>Entropy</li> <li>Random Number Generator (RNG)</li> <li>Pseudorandom Number Generator (PRNG)</li> <li>Physical Unclonable Function (PUF)</li> <li>Big Numbers in Context </li> <li>Double-Padlock-Protocol</li> </ul> <p>links: AC1 MOC - Index</p>"},{"location":"themes/104%20AC1%20TOC%20-%20Private%20Key%20Encryption/","title":"AC1 TOC - Private Key Encryption","text":"<p>links: AC1 MOC - Index</p> <ul> <li>Private Key Encryption</li> <li>Keccak<ul> <li>SHAKE &amp; cSHAKE</li> </ul> </li> <li>EAV-Security</li> <li>CPA-Security</li> <li>CCA-Security</li> <li>CPA vs. CCA</li> </ul> <p>links: AC1 MOC - Index</p>"},{"location":"themes/105%20AC1%20TOC%20-%20Random%20Oracle%20%26%20Applications/","title":"AC1 TOC - Random Oracle &amp; Applications","text":"<p>links: AC1 MOC - Index</p> <ul> <li>Random-Oracle Model</li> <li>Hash Functions<ul> <li>Additional Applications of Hash Functions</li> <li>Cryptographic Hash Functions</li> </ul> </li> <li>Message Authentication Code (MAC)<ul> <li>Cryptographic MACs</li> </ul> </li> <li>Hash-and-Mac</li> <li>Cryptographic Commitment</li> <li>Key Derivation Function (KDF)</li> <li>Password Based Key Derivation Function (PBKDF)</li> </ul> <p>links: AC1 MOC - Index</p>"},{"location":"themes/106%20AC1%20TOC%20-%20AEAD/","title":"AC1 TOC - Authenticated Encryption with Associated Data","text":"<p>links: AC1 MOC - Index</p> <ul> <li>Authenticated Encryption with Associated Data</li> <li>Ascon</li> </ul> <p>links: AC1 MOC - Index</p>"},{"location":"themes/107%20AC1%20TOC%20-%20Secure%20Channels/","title":"AC1 TOC - From Symmetric Encryption to Secure Channels","text":"<p>links: AC1 MOC - Index</p> <ul> <li>CBC Attack</li> <li>CCA-Security</li> <li>CPA vs. CCA</li> <li>Pseudo Random Functions</li> <li>GCM</li> <li>Key Establishment</li> <li>Secure Channels</li> </ul> <p>links: AC1 MOC - Index</p>"},{"location":"themes/108%20AC1%20TOC%20-%20Blockchain/","title":"AC1 TOC - Blockchain","text":"<p>links: AC1 MOC - Index</p> <ul> <li>Blockchain</li> <li>Naming Systems</li> <li>Key Revocation</li> <li>Bloom Filters &amp; Set Unification</li> <li>Bloom Filters example implementation</li> </ul> <p>links: AC1 MOC - Index</p>"},{"location":"themes/109%20AC1%20TOC%20-%20Secret%20sharing/","title":"AC1 TOC - Secret sharing, symmetric key management","text":"<p>links: AC1 MOC - Index</p> <ul> <li>Key Management</li> <li>Shamir Secret Sharing</li> <li>Key escrow and recovery</li> <li>Threshold Signatures</li> </ul> <p>links: AC1 MOC - Index</p>"},{"location":"themes/200%20AC2%20MOC/","title":"Applied Cryptography 2 MOC","text":"<p>links: Index</p> <ul> <li>Topic 1: Introduction public-key cryptography</li> <li>Topic 2: Modular Arithmetic and Group Theory</li> <li>Topic 3: Number-Theoretic Algorithms and Hardness Assumptions</li> <li>Topic 4: RSA and ElGamal Encryption</li> <li>Topic 5: Digital Signatures</li> <li>Topic 6: Elliptic curves</li> <li>Topic 7: X.509</li> <li>Topic 8: Centralized public-key infrastructures</li> <li>Topic 9: Secure messaging and channels</li> <li>Topic 10: Anonymity</li> <li>Topic 11: Decentralized Public Key Infrastructures</li> <li>Topic 12: GNU Taler</li> </ul> <p>links: Index</p>"},{"location":"themes/201%20AC2%20TOC%20-%20Intro%20Public%20Key%20Encryption/","title":"AC2 TOC - Intro Public Key Encryption","text":"<p>links: AC2 MOC - Index</p> <ul> <li>Intro Public Key Cryptography</li> <li>Diffie-Hellman</li> <li>Public Key Encryption</li> </ul> <p>Exercises</p> <ul> <li>math.pdf</li> <li>ExerciseSheet1.pdf</li> </ul> <p>links: AC2 MOC - Index</p>"},{"location":"themes/202%20AC2%20TOC%20-%20Modular%20Arithmetic%20and%20Group%20Theory/","title":"AC2 TOC - Modular Arithmetic and Group Theory","text":"<p>links: AC2 MOC - Index</p> <ul> <li>Prime Numbers</li> <li>Modular Arithmetic</li> <li>Group Theory</li> </ul> <p>Exercises</p> <ul> <li>ExerciseSheet2.pdf</li> </ul> <p>links: AC2 MOC - Index</p>"},{"location":"themes/203%20AC2%20TOC%20-%20Number-Theoretic%20Algorithms%20and%20Hardness%20Assumptions/","title":"AC2 TOC - Number-Theoretic Algorithms and Hardness Assumptions","text":"<p>links: AC2 MOC - Index</p> <ul> <li>Generating Random Group Elements and Generators</li> <li>Generating (Random) Primes</li> <li>Algorithm of Euclid</li> <li>Multiplicative Inverse</li> <li>Modular Exponentiation</li> <li>Computational Hardness Assumption</li> <li>FACTORING &amp; DL Algorithms</li> <li>Complexity Notation</li> <li>Complexity Classes</li> <li>Complexity Reduction</li> </ul> <p>Exercises</p> <ul> <li>Math Exercise 3</li> <li>ExerciseSheet3.pdf</li> </ul> <p>links: AC2 MOC - Index</p>"},{"location":"themes/204%20AC2%20TOC%20-%20RSA%20and%20ElGamal%20Encryption/","title":"AC2 TOC - RSA and ElGamal Encryption","text":"<p>links: AC2 MOC - Index</p> <ul> <li>RSA</li> <li>ElGamal</li> </ul> <p>Exercises</p> <ul> <li>ExerciseSheet4.pdf</li> </ul> <p>links: AC2 MOC - Index</p>"},{"location":"themes/205%20AC2%20TOC%20-%20Digital%20Signatures/","title":"AC2 TOC - Digital Signatures","text":"<p>links: AC2 MOC - Index</p> <ul> <li>Digital Signatures</li> <li>RSA Signature Scheme</li> <li>DSA Signature Scheme</li> <li>Blind Signatures (RSA)</li> <li>Schnorr Signatures</li> </ul> <p>links: AC2 MOC - Index</p>"},{"location":"themes/206%20AC2%20TOC%20-%20Elliptic%20curves/","title":"AC2 TOC - Elliptic Curves","text":"<p>links: AC2 MOC - Index</p> <ul> <li>Group, Ring and Field</li> <li>Elliptic Curves</li> <li>Elliptic Curves in Crypto</li> <li>The Animated Elliptic Curve</li> </ul> <p>links: AC2 MOC - Index</p>"},{"location":"themes/207%20AC2%20TOC%20-%20X.509/","title":"AC2 TOC - X.509","text":"<p>links: AC2 MOC - Index</p> <ul> <li>Certificates</li> <li>Certificate Standards</li> <li>Certificate Levels</li> <li>X.509 Certificates</li> <li>Attribute Certificates</li> <li>Card Verifiable Certificates</li> </ul> <p>links: AC2 MOC - Index</p>"},{"location":"themes/208%20AC2%20TOC%20-%20Centralized%20public-key%20infrastructures/","title":"AC2 TOC - Centralized public-key infrastructures","text":"<p>links: AC2 MOC - Index</p> <ul> <li>Public Key Infrastructure</li> <li>Trust Issues in X.509</li> <li>X.509 CA Alternatives</li> <li>Digital Timestamping</li> <li>Trust Agility</li> </ul> <p>links: AC2 MOC - Index</p>"},{"location":"themes/209%20AC2%20TOC%20-%20Secure%20messaging%20and%20channels/","title":"AC2 TOC - Secure messaging and channels","text":"<p>links: AC2 MOC - Index</p> <ul> <li>TLS</li> <li>SMTP</li> <li>MIME &amp; S/MIME</li> <li>Asynchronous Bidirectional Secure Channels</li> </ul> <p>Exercises</p> <ul> <li>WEP Insecurity</li> </ul> <p>links: AC2 MOC - Index</p>"},{"location":"themes/210%20AC2%20TOC%20-%20Anonymity/","title":"AC2 TOC - Anonymity","text":"<p>links: AC2 MOC - Index</p> <ul> <li>Anonymity</li> <li>Attacks</li> <li>Trilemmas</li> <li>Distributed Computing</li> <li>Mixing</li> <li>TOR</li> </ul> <p>Exercises</p> <ul> <li>Anonymity - Exercises</li> </ul> <p>links: AC2 MOC - Index</p>"},{"location":"themes/211%20AC2%20TOC%20-%20DPKI/","title":"AC2 TOC - Decentralized Public Key Infrastructures (DPKI)","text":"<p>links: AC2 MOC - Index</p> <ul> <li>GnuPG</li> <li>Trust Model</li> <li>Fog of Trust</li> <li>Advanced Cryptographic Primitives</li> <li>DHT</li> <li>GNU Name System</li> <li>GNUnet</li> <li>DNS Recap</li> </ul> <p>links: AC2 MOC - Index</p>"},{"location":"themes/212%20AC2%20TOC%20-%20GNU%20Taler/","title":"AC2 TOC - GNU Taler","text":"<p>links: AC2 MOC - Index</p> <ul> <li>Blind Signatures (RSA)</li> <li>Schnorr Signatures</li> <li>Cut-and-choose zero-knowledge proof</li> <li>Credit Card Surveillance</li> <li>GNU Taler Overview</li> <li>GNU Taler Details</li> <li>GNU Taler Bank Integration</li> <li>GNU Taler Key Management</li> <li>GNU Taler and Blockchains</li> <li>Payto</li> </ul> <p>links: AC2 MOC - Index</p>"},{"location":"themes/300%20Modern%20Cryptography%20MOC/","title":"Introduction to Modern Cryptography MOC","text":"<p>links: Index</p> <p>I - Introduction and Classical Cryptography</p> <ul> <li>Introduction </li> <li>Perfectly Secret Encryption <ul> <li>OneTimePad </li> <li>Shannon's Theorem </li> </ul> </li> </ul> <p>II - Private-Key (Symmetric) Cryptography</p> <ul> <li>Computational Security<ul> <li>EAV-Security</li> <li>CPA-Security</li> </ul> </li> <li>Modes of Operation<ul> <li>Stream Cipher</li> <li>Block Cipher</li> </ul> </li> <li>Message Authentication Codes<ul> <li>Cryptographic MACs</li> </ul> </li> <li>Authenticated Encryption<ul> <li>CCA-Security</li> </ul> </li> <li>Hash Functions<ul> <li>Random-Oracle Model</li> <li>Additional Applications of Hash Functions</li> <li>Cryptographic Hash Functions</li> </ul> </li> <li>Hash-and-Mac</li> </ul> <p>III - Public-Key (Asymmetric) Cryptography</p> <p>...</p> <p>links: Index</p>"},{"location":"themes/AC2%20-%20Math%20-%20Exercise%203/","title":"AC2 - Math - Exercise 3","text":"<p>links: AC2 TOC - Number-Theoretic Algorithms and Hardness Assumptions - Index</p>"},{"location":"themes/AC2%20-%20Math%20-%20Exercise%203/#euclid","title":"Euclid","text":"<p>see Algorithm of Euclid</p> <p>Euclid(48, 174)</p> <p>174 mod 48 = 30 48 mod 30 = 18 30 mod 18 = 12 18 mod 12 = 6 12 mod 6 = 0</p>"},{"location":"themes/AC2%20-%20Math%20-%20Exercise%203/#exteuclid","title":"ExtEuclid","text":"<p>see Extended Algorithm of Euclid</p> <p>ExtEuclid(48, 174)</p> 6 = 18 - 1(12) 12 = 30 - 1(18) 6 = 18 - 1(30 - 1(18)) = 2(18) - 1(30) 18 = 48 - 1(30) 6 = 2(48 - 1(30)) -1(30) = 2(48) - 3(30) 30 = 174 - 3(48) 6 = 2(48) - 3(174 - 3(48)) = -3(174) + 11(48)"},{"location":"themes/AC2%20-%20Math%20-%20Exercise%203/#multiplicative-inverse","title":"Multiplicative Inverse","text":"<p>see Multiplicative Inverse</p> <p>MultInv(48, 127)</p> <p>127 mod 48 = 31 48 mod 31 = 17 31 mod 17 = 14 17 mod 14 = 3 14 mod 3 = 2 3 mod 2 = 1 2 mod 1 = 0</p> 1 = 3 -1(2) 2 = 14 - 4(3) 1 = 3 - 1(14 - 4(3)) = -1(14) + 5(3) 3 = 17 - 1(14) 1 = -1(14) + 5(17 - 1(14)) = 5(17) - 6(14) 14 = 31 - 1(17) 1 = 5(17) - 6(31 - 1(17)) = -6(31) + 11(17) 17 = 48 - 1(31) 1 = -6(31) + 11(48 - 1(31)) = 11(48) - 17(31) 31 = 127 - 2(48) 1 = 11(48) - 17(127 - 2(48)) = -17(127) + 45(48) <p>45 * 48 mod 127 = 1</p> <p>links: AC2 TOC - Number-Theoretic Algorithms and Hardness Assumptions - Index</p>"},{"location":"themes/Additional%20Applications%20of%20Hash%20Functions/","title":"Additional Applications of Hash Functions","text":"<p>links: AC1 TOC - Random Oracle &amp; Applications - Modern Cryptography MOC - Index</p>"},{"location":"themes/Additional%20Applications%20of%20Hash%20Functions/#fingerprinting-and-deduplication","title":"Fingerprinting and Deduplication","text":"<p>use hash (or digest) as fingerprint of a file, used e.g. for</p> <ul> <li>Virus fingerprinting: compare only hash of a file with a hash database of virus-files</li> <li>Deduplication: eliminate duplicate copies of data, only store once</li> <li>Peer-to-peer (P2P) file sharing: server store files and broadcasting the hashes of those files, allow client to easily find out on which servers a file is hosted.</li> </ul>"},{"location":"themes/Additional%20Applications%20of%20Hash%20Functions/#password-hashing","title":"Password Hashing","text":"<p>One of the most common and important uses of hash functions in computer security is for password protection. To authenticate a user, some form of the user's password has to be stored. To mitigate the risk of stolen passwords, only a hash of the password can be stored instead of the password itself. Operating systems or web services only checks whether \\(H(PW) \\stackrel{?}{=} hpw\\). The hash functions should be \"moderately hard to compute\" when evaluated once (e.g. on a client/server side) but prohibitively expensive to evaluate tens of thousands of times (see PBKDF).</p> <p>Rainbow Tables</p> <p>A so called \"rainbow table\" refers to\u00a0a precomputed table that contains the password hash value for some (or all possible) strings in a domain. These tables only need to be generated once and are highly effective at recovering passwords.</p> <p>Salt</p> <p>To mitigate the problem of rainbow tables, we can introduce a salt. When a user registers their password, the laptop/server will generate a long random value \\(s\\) (a \"salt\") unique to that user, and store (\\(s, hpw = H(s,pw)\\)) instead of merely storing \\(H(pw)\\). Since \\(s\\) is unknown to the attacker in advance, preprocessing is ineffective and a separate brute-force search is needed to recover each user's password.</p>"},{"location":"themes/Additional%20Applications%20of%20Hash%20Functions/#key-derivation","title":"Key Derivation","text":"<ul> <li>see Key Derivation Function (KDF)</li> </ul>"},{"location":"themes/Additional%20Applications%20of%20Hash%20Functions/#commitment-schemes","title":"Commitment Schemes","text":"<ul> <li>see Cryptographic Commitment</li> </ul> <p>links: AC1 TOC - Random Oracle &amp; Applications - Modern Cryptography MOC - Index</p>"},{"location":"themes/Advanced%20Cryptographic%20Primitives/","title":"Advanced Cryptographic Primitives","text":"<p>links: AC2 TOC DPKI - Index</p>"},{"location":"themes/Advanced%20Cryptographic%20Primitives/#homomorphic-encryption","title":"Homomorphic Encryption","text":"<p>see Homomorphic Groups</p> \\[ E(x_1 \\oplus x_2) = E(x_1) \\otimes E(x_2) \\] <ul> <li>Unpadded RSA (multiplicative)</li> </ul> \\[ E(x_1) \\cdot E(x_2) = x_1^ex_2^e = E(x_1 \\cdot x_2) \\] <ul> <li>ElGamal</li> </ul> \\[ \\begin{align} E(x_1)\u00a0\\cdot E(x_2) &amp; = (g^{r_1}, x_1 \\cdot h^{r_1})(g^{r_2},x_2 \\cdot h^{r_2}) \\\\ &amp; = (g^{r_1 + r_2}),(x_1 \\cdot x_2)h^{r_1+r_2} \\\\ &amp; = E(x_1 \\cdot x_2) \\end{align} \\]"},{"location":"themes/Advanced%20Cryptographic%20Primitives/#fully-homomorphic-encryption","title":"Fully homomorphic encryption","text":"<ul> <li>Additive</li> </ul> <p>$$ E(A) \\oplus E(B) = E(A+B) $$ - and multiplicative</p> \\[ E(A) \\otimes E(B) = E(A \\cdot B) \\] <ul> <li>Known cryptosystems: Brakerski-Gentry-Vaikuntanathan (BGV), NTRU, Gentry-Sahai-Waters (GSW)</li> </ul>"},{"location":"themes/Advanced%20Cryptographic%20Primitives/#pairing-based-cryptography","title":"Pairing-based cryptography","text":"<ul> <li>Pairing-based cryptography is based on pairing functions that map pairs of points on an elliptic curve into a finite field</li> <li>if constructed properly, they can produce finite fields that are large enough to make the discrete logarithm problem hard to compute, but small enough to make computations efficient</li> <li>Pairing-based cryptography can be used to construct identity-based encryption (IBE), which allows a sender to encrypt a message without needing a receiver\u2019s public key to have been certified and distributed in advance. IBE uses some form of a person (or entity\u2019s) identification to generate a public key</li> </ul> <p>Source: en: doubleoctopus.com</p> <p></p>"},{"location":"themes/Advanced%20Cryptographic%20Primitives/#hardness-assumption","title":"Hardness assumption","text":"<ul> <li>Computational Diffie Hellman (remains hard on \\(G\\) even given \\(e\\)):</li> </ul> \\[ g,g^x,g^y \\implies g^{xy} \\]"},{"location":"themes/Advanced%20Cryptographic%20Primitives/#bonehlynnshacham-bls-signatures","title":"Boneh\u2013Lynn\u2013Shacham (BLS) signatures","text":"<ul> <li>cryptographic signature scheme with allows a user to verify that a signer is authentic</li> <li>scheme uses a bilinear pairing for verification, signatures are elements of an elliptic curve group (provides some defense against index calculus attacks)</li> <li> <p>(Index calculus attacks exploit the algebraic structure of finite fields or elliptic curves to solve the discrete logarithm problem efficiently. The key idea behind index calculus attacks is to build a system of equations involving the unknown exponent \\(x\\) and then solve these equations using linear algebra or other mathematical techniques.)</p> </li> <li> <p>\\(x\\): private key</p> </li> <li>\\(g^x\\): public key</li> <li>\\(\\sigma\\): signature</li> <li>\\(h\\): hash</li> <li>g: generator</li> </ul> <p></p> <p></p> <p>links: AC2 TOC DPKI - Index</p>"},{"location":"themes/Algorithm%20of%20Euclid/","title":"Algorithm of Euclid","text":"<p>links: AC2 TOC - Number-Theoretic Algorithms and Hardness Assumptions - Index</p>"},{"location":"themes/Algorithm%20of%20Euclid/#algorithm-of-euclid_1","title":"Algorithm of Euclid","text":"<ul> <li>maximal iterations are the number of bits of \\(n\\)</li> </ul>"},{"location":"themes/Algorithm%20of%20Euclid/#extended-algorithm-of-euclid","title":"Extended Algorithm of Euclid","text":""},{"location":"themes/Algorithm%20of%20Euclid/#bezouts-lemma-use-cases","title":"B\u00e9zout's Lemma Use Cases","text":"<p>Solving Linear Diophantine Equations</p> <p>These are equations of the form \\(ax + by = c\\), where \\(a\\), \\(b\\), \\(c\\) are given integers, and \\(x\\), \\(y\\) are unknown integers. B\u00e9zout's Lemma tells us that a solution exists if and only if the greatest common divisor (gcd) of \\(a\\) and \\(b\\) divides \\(c\\). Furthermore, once one solution is found, all other solutions can be expressed in terms of it.</p> <p>Finding Inverses Modulo n</p> <p>In the context of modular arithmetic, B\u00e9zout's Lemma can be used to find multiplicative inverses. The multiplicative inverse of a modulo \\(n\\) is a number \\(x\\) such that \\((a*x) \\mod n = 1\\). This is important in cryptographic algorithms, such as the RSA algorithm, which rely on the existence and calculation of such inverses.</p> <p>links: AC2 TOC - Number-Theoretic Algorithms and Hardness Assumptions - Index</p>"},{"location":"themes/Anonymity%20-%20Attacks/","title":"Attacks","text":"<p>links: AC2 TOC - Anonymity - Index</p>"},{"location":"themes/Anonymity%20-%20Attacks/#attacks-to-avoid","title":"Attacks to avoid","text":"<p>Hopeless situations:</p> <ul> <li>All nodes collaborate against the victim</li> <li>All directly adjacent nodes collaborate</li> <li>All non-collaborating adjacent nodes are made unreachable form the victim</li> <li>The victim is required to prove his innocent \\(\\rightarrow\\) not possible in an anonymous system!</li> </ul>"},{"location":"themes/Anonymity%20-%20Attacks/#sybil-attacks","title":"Sybil Attacks","text":"<ul> <li>Insert a node multiple times into a network, each time with a different identity</li> <li>Position a node for next step on attack:<ul> <li>Attack connectivity of the network</li> <li>Attack replica set</li> <li>In case of majority votes, be the majority</li> </ul> </li> </ul> <p>Mitigation</p> <ul> <li>Use authentication with trusted party that limits identity creation</li> <li>Use \u201cexternal\u201d identities (IP address, MAC, e-mail)</li> <li>Use \u201cexpensive\u201d identities (solve computational puzzles, require payment)</li> </ul> <p>Without trusted authority to certify identities, no realistic approach exists to completely stop the Sybil attack.</p>"},{"location":"themes/Anonymity%20-%20Attacks/#eclipse-attacks","title":"Eclipse Attacks","text":"<ul> <li>Separate a node or group of nodes from the rest of the network</li> <li>isolate peers (DoS, surveillance) or isolate data (censorship)</li> <li>Techniques: use Sybil attack to increase number of malicious nodes, take over routing tables/ peer discovery</li> </ul> <p>Mitigation</p> <ul> <li>Large number of connections (reduce risk of being isolated)</li> <li>Replication (replicating data across multiple nodes, cross-verify data with copies)</li> <li>Diverse neighbour selection (different IP subnets/ geographic locations, make it more difficult for an attacker to control all communications)</li> <li>Aggressive Discovery (\"continuous\" bootstrap, regularly finding and connecting to new peers)</li> <li>Audit neighbour behaviour (if possible, detect eclipse attack)</li> <li>Prefer long-lived connections / old peers</li> </ul>"},{"location":"themes/Anonymity%20-%20Attacks/#poisoning-attacks","title":"Poisoning Attacks","text":"<ul> <li>Attack: Nodes provide false information:<ul> <li>wrong routing tables</li> <li>wrong meta data</li> <li>wrong performance measurements</li> </ul> </li> <li>Aim: undermine trust within the network, spread of false information (e.g. in a blockchain network)</li> </ul> <p>Mitigation</p> <ul> <li>robust data verification methods</li> <li>trust- or reputation-based networking models</li> </ul>"},{"location":"themes/Anonymity%20-%20Attacks/#timing-attacks","title":"Timing Attacks","text":"<ul> <li>Nodes can:<ul> <li>measure latency to determine origin of data (guess about where the data originated)</li> <li>delay messages (disrupt the operation of the network timeouts)</li> <li>send messages using particular timing patterns to aid correlation</li> <li>include wrong timestamps</li> </ul> </li> </ul> <p>Mitigation</p> <ul> <li>Uniform response time</li> <li>Random delays</li> <li>Timestamp validation</li> <li>Anomaly detection systems</li> </ul> <p>links: AC2 TOC - Anonymity - Index</p>"},{"location":"themes/Anonymity%20-%20Exercises/","title":"Anonymity - Exercises","text":"<p>links: AC2 TOC - Anonymity - Index</p>"},{"location":"themes/Anonymity%20-%20Exercises/#entropy-calculation-example","title":"Entropy Calculation Example","text":"<p>Suppose we have 101 suspects including Bob. Furthermore, suppose for Bob the attacker has a probability of 0.9 and for all the 100 other suspects the probability is 0.001. What is the entropy of this?</p> <p>\\(\\sum_{i=1}^{n} p_i \\cdot \\log_{2}\\left(\\frac{1}{p_i}\\right)\\)</p> <p>\\(100 * \\frac{1}{1000} * \\log_{2}(1000) + \\frac{9}{10} * log_{2}(\\frac{10}{9}) = 1.133\\)</p> <p>100 suspects with probability \\(\\frac{1}{1000}\\) and 1 suspect with probability \\(\\frac{9}{10}\\).</p>"},{"location":"themes/Anonymity%20-%20Exercises/#explain-the-dining-cryptographers-problem","title":"Explain the Dining Cryptographers Problem","text":"<p>You want to make sure that an entity inside a group is responsible for some action but you want, that it remains a secret who has done it. The dining cryptographers approach can make a statement, whether some entity inside the group is responsible for an action or someone outside (Mallory) did it.</p> <p>Every two cryptographers establish a shared one-bit secret. Everyone then makes an XOR out of the two shared one-bit secrets and reveals the result.</p> <ul> <li>If they payed they invert the XOR</li> <li>If they didn't pay they just reveal the XOR of the shared one-bit secrets</li> </ul> <p>Finally the revealed results are XORed aswell</p> <ul> <li>If the result is 1 then someone payed but this person stays anonymous (someone of the group payed / did the action)</li> <li>If the result is 0 then the NSA payed (someone who is not part of the group payed / did the action)</li> </ul> <p>links: AC2 TOC - Anonymity - Index</p>"},{"location":"themes/Anonymity%20-%20Mixing/","title":"Mixing","text":"<p>links: AC2 TOC - Anonymity - Index</p>"},{"location":"themes/Anonymity%20-%20Mixing/#definition","title":"Definition","text":"<ul> <li>see Dining cryptographers problem</li> <li>goal is: destroying linkability</li> </ul>"},{"location":"themes/Anonymity%20-%20Mixing/#types-of-mixing","title":"Types of mixing","text":""},{"location":"themes/Anonymity%20-%20Mixing/#threshold-mix","title":"Threshold Mix","text":"<p>A type of mix that waits until it has received messages from a certain number of users (the threshold) before it sends them out in a random order.</p> <p></p>"},{"location":"themes/Anonymity%20-%20Mixing/#timed-mix","title":"Timed Mix","text":"<p>This mix collects messages for a certain period of time before sending them out in a random order.</p> <ul> <li>Advantages: performance guaranty</li> <li>Disadvantages: if only one input \\(\\rightarrow\\) same output, n-1 attack (send all inputs -1)</li> </ul> <p></p>"},{"location":"themes/Anonymity%20-%20Mixing/#pool-mix","title":"Pool Mix","text":"<p>In a pool mix, incoming messages are added to a pool. A certain number of messages are randomly selected from the pool and sent out, while the remaining messages stay in the pool for the next round.</p> <ul> <li>Advantages: \\(P_{min}\\) &amp; \\(P_{max}\\), n-1 attack not possible</li> <li>Disadvantages: a message may stay forever in the pool</li> </ul> <p></p>"},{"location":"themes/Anonymity%20-%20Mixing/#mixminion","title":"Mixminion","text":"<ul> <li>based on mixmailers: uses mix networks for email communication, effectively anonymizing the sender and recipient of an email (only for email application)</li> <li>possibility to reply: without knowing the sender's actual identity</li> <li>directory servers to evaluate participating remailers: helps users to select reliable and trustworthy nodes for routing their message</li> <li>exit policies: like with Tor, nodes can have policies which allow the operator to determine what type of traffic is allowed to exit their node and to where (legal and ethical considerations)</li> </ul> <p>Key ideas</p> <ul> <li>when a message traverses mixminion, each node must decrypt the message using its (ephemeral) private key</li> <li>the key idea behind the replies is splitting the path into two legs:<ul> <li>the first half is chosen by the responder to hide the responder identity</li> <li>\ufeff\ufeffthe second half was communicated by the receiver to hide the receiver identity</li> <li>\ufeff\ufeffa crossover-node in the middle is used to switch the headers specifying the path</li> </ul> </li> </ul> <pre><code>Alice -------------------------------------------&gt; Bob\nAlice &lt;-- second leg -- Crossover &lt;-- first leg -- Bob\n</code></pre> <p>Replay attacks</p> <ul> <li>servers keep hash of previously processed messages until the server key is rotated</li> <li>bounded amount of state in the server, no possibility for replay attack due to key rotation</li> </ul> <p>Directory Servers</p> <ul> <li>inform users about servers</li> <li>probe servers for reliability</li> <li>allow partitioning attack \\(\\rightarrow\\) users are advised to query all directory servers to obtain a complete network view</li> </ul> <p>Nymservers</p> <ul> <li>Nyms (short for pseudonyms) allow users to maintain long-term identities without revealing their true identities or their locations</li> <li>A nym server stores nyms and the associated reply blocks</li> <li>Vulnerable to DoS attacks</li> </ul> <p>Problems</p> <ul> <li>No benefits / incentives of running a mixer</li> <li>A lot of public key cryptography (slow)</li> <li>Users have to trust directory servers (those also don't have an incentive to act good)</li> <li>Servers have to keep state (resources)</li> <li>Service is limited to E-Mail because of high latency</li> <li>Exit nodes can be liable for legal action</li> <li>No functionality to avoid DoS attacks</li> <li>Statistical correlation of entities communicating over time is still possible if the whole network is observed</li> <li>Bridge between anonymous network and a traditional protocol is difficult</li> </ul> <p>links: AC2 TOC - Anonymity - Index</p>"},{"location":"themes/Anonymity%20-%20TOR/","title":"TOR","text":"<p>links: AC2 TOC - Anonymity - Index</p> <p>Tor is a P2P network of low-latency mixes which are used to provide anonymous communication between parties on the Internet. It works for any TCP-based protocol and traffic enters the network via SOCKS proxy. Commonly used for anonym web browsing.</p>"},{"location":"themes/Anonymity%20-%20TOR/#onion-routing","title":"Onion Routing","text":"<ul> <li>Multiple mix servers</li> <li>Path of mx servers chosen by initiator</li> <li>Chosen mix servers create \"circuit\" (see following example)</li> </ul> <p>Example</p> <ul> <li>Client choses which mix servers he wants to use for communication</li> <li>Set up symmetric key \\(K_{S_1}\\) with first mix server</li> <li>Through first mix server set up symmetric key \\(K_{S_2}\\) with second mix server</li> <li>Repeat until user has a key for every mix server</li> <li>Encrypt message with all symmetric keys \\((K_{S_1}(K_{S_2}(m)))\\) and send message to first mix server</li> <li>First mix server decrypts the message and sends the message to the next mix server until destination is reached.</li> </ul> <p></p> <p>Just like in Mixminion, there are directory servers which keep track of contact information, public keys and statistics. Clients use directory servers to chose servers randomly with bias towards bandwidth/ uptime. Circuits are bi-directional and of length three.</p> <p></p> <p>In the example above:</p> <ul> <li>Tor Node 1 is the Entry node / Guard<ul> <li>Generally long lived \"good\" nodes</li> <li>Client (User) has to trust this node since it directly communicates with it</li> </ul> </li> <li>Tor Node 5 is the Relay / Middle node</li> <li>Tor Node 8 is the Exit node<ul> <li>Visible to outside destination</li> <li>Most vulnerable node in circuit / route</li> <li>Supports filtering of outgoing traffic</li> </ul> </li> </ul>"},{"location":"themes/Anonymity%20-%20TOR/#hidden-services-in-tor","title":"Hidden Services in Tor","text":"<p>Services inside the tor network which are only available from inside the tor network. They allow tor servers to receive incoming connections anonymously.</p> <ol> <li>Service Setup: The hidden service picks some introduction points and builds circuits to them. Then the service advertises his service (as a <code>.onion</code> address) at the DB (DHT)</li> <li>Client Request: When a client wants to connect to a hidden service, it loads the <code>.onion</code> address into a Tor-enabled client (like the Tor browser). This address corresponds to the public key of the hidden service. The client uses this key to check the DHT and retrieve the descriptor, which contains the introduction points and the service's public key.</li> <li>Introduction Points Connection: After obtaining the introduction points and the service's public key, the client randomly picks a relay in the network to act as a rendezvous point and communicates it to the hidden service via one of the introduction points.</li> <li>Rendezvous Point: The client builds a circuit to the rendezvous point and sends a rendezvous message there. The rendezvous point holds this message until the hidden service connects.</li> <li>Circuit Building: In the meantime, the hidden service builds a circuit to the rendezvous point and sends a rendezvous message, which makes the rendezvous point connect the two circuits.</li> <li>Hidden Service Connection: Now, the client and the hidden service are connected through Tor circuits and can communicate privately. The rendezvous point simply relays (end-to-end encrypted) messages from client to service and vice versa. It does not know the client's IP or the hidden service's IP. It also can't read the content of the messages because they are end-to-end encrypted between the client and the service.</li> </ol> <p></p>"},{"location":"themes/Anonymity%20-%20TOR/#attacks-on-tor","title":"Attacks on Tor","text":"<ul> <li>Exit Relay Snooping (not encrypted traffic, e.g. http)</li> <li>Website fingerprinting (monitor entry node to analyse which sites are being visited, only metadata through encryption)</li> <li>Traffic Analysis (stuttering while packet send to identify exit point)</li> <li>Intersection Attack (e.g. disable internet, see if attack stops)</li> <li>DoS (circle in path, e.g. 10'000 hops)</li> </ul> <p>links: AC2 TOC - Anonymity - Index</p>"},{"location":"themes/Anonymity%20-%20Trilemmas/","title":"Trilemmas","text":"<p>links: AC2 TOC - Anonymity - Index</p>"},{"location":"themes/Anonymity%20-%20Trilemmas/#cap-theorem","title":"CAP Theorem","text":"<p>No distributed system can be consistent, available and partition tolerant at the same time.</p> <ul> <li>\ufeff\ufeffConsistency: A read sees the changes made by all previous writes</li> <li>\ufeff\ufeffAvailability: Reads and writes always succeed</li> <li>\ufeff\ufeffPartition tolerance: The system operates even when network connectivity between components is broken</li> </ul>"},{"location":"themes/Anonymity%20-%20Trilemmas/#blockchain-trilemma","title":"Blockchain Trilemma","text":"<p>This is a concept in blockchain technology that posits it's impossible to fully achieve all three of the following features at once: </p> <ul> <li>Security: the network can resist attacks</li> <li>Scalability: the network can process a high number of transactions</li> <li>Decentralization: all peers in the network are equal, and there are no trusted third parties</li> </ul>"},{"location":"themes/Anonymity%20-%20Trilemmas/#ryges-trilemma","title":"Ryge's Trilemma","text":"<p>Ryge's Triangle postulates three key management goals for a system associating cryptographic keys with addresses or names:</p> <ul> <li>\ufeff\ufeffNon-interactive: the system should require no user interface</li> <li>\ufeff\ufeffFlexible: addresses / names can be re-used by other participants</li> <li>\ufeff\ufeffSecure: the system is secure against active attackers  </li> </ul> <p>Ryge's triangle says that one can only have two of the three.</p>"},{"location":"themes/Anonymity%20-%20Trilemmas/#zookos-triangle","title":"Zooko's Triangle","text":"<p>This is a trilemma concept in naming systems which argues that names can't be all three of the following: </p> <ul> <li>Secure: names honestly represent the identity of the named entity.</li> <li>Decentralized/ Global: no central authority is needed to control name allocation</li> <li>Human-meaningful/ Memorable: names are meaningful and memorable to humans.</li> </ul> <p>links: AC2 TOC - Anonymity - Index</p>"},{"location":"themes/Anonymity/","title":"Anonymity","text":"<p>links: AC2 TOC - Anonymity - Index</p>"},{"location":"themes/Anonymity/#definition-of-anonymity","title":"Definition of anonymity","text":"<ul> <li>Merriam-Webster<ul> <li>not named or identified: \u201can anonymous author\u201d, \u201cthey wish to remain anonymous\u201d</li> <li>of unknown authorship or origin: \u201can anonymous tip\u201d</li> <li>lacking individuality, distinction, or recognizability: \u201cthe anonymous faces in the crowd\u201d, \u201cthe gray anonymous streets\u201d</li> </ul> </li> <li>Pfitzmann:<ul> <li>Anonymity is the state of being not identifiable within a set of subjects, the anonymity set</li> </ul> </li> <li>EFF<ul> <li>Instead of using their true names to communicate, (...) people choose to speak using pseudonyms (assumed names) or anonymously (no name at all).</li> </ul> </li> <li>Grothoff<ul> <li>A user\u2019s action is anonymous if the adversary cannot link the action to the user\u2019s identity</li> </ul> </li> </ul>"},{"location":"themes/Anonymity/#pseudonymity","title":"Pseudonymity","text":"<ul> <li>A pseudonym is an identity for an entity in the system. It is a \u201cfalse identity\u201d and not the true identity of the holder of the pseudonym.</li> <li>Nobody, but (maybe) a trusted party may be able to link a pseudonym to the true identity of the holder of the pseudonym.</li> <li>A pseudonym can be tracked. We can observe its behaviour, but we do not learn who it is.</li> </ul>"},{"location":"themes/Anonymity/#a-users-identity","title":"A user's identity","text":"<p>Includes personally identifiable information, such as:</p> <ul> <li>real name</li> <li>fingerprint</li> <li>passport number</li> <li>IP address</li> <li>MAC address</li> <li>login name</li> </ul> <p>Actions includes</p> <ul> <li>Internet access</li> <li>speech</li> <li>participation in demonstration</li> <li>purchase in a store</li> <li>walking across the street</li> </ul>"},{"location":"themes/Anonymity/#evaluating-anonymity","title":"Evaluating Anonymity","text":"<ul> <li>number of known attacks</li> <li>lowest complexity of successful attacks</li> <li>information leaked through messages and maintenance procedures</li> <li>number of users (more user = more security)</li> </ul>"},{"location":"themes/Anonymity/#terms","title":"Terms","text":"<ul> <li>Sender anonymity: the sender's identity is hidden during message transmission. However, potential traces like IP addresses or metadata may provide a path back to the sender.</li> <li>Receiver anonymity: allows the recipient to receive messages without revealing their identity. Since the receiver is not generating traffic, the chance of tracing back to them is less, unless the system logs incoming connections.</li> </ul>"},{"location":"themes/Anonymity/#anonymity-sets","title":"Anonymity Sets","text":"<ul> <li>Anonymity Set: It's the group of all potential users that could be responsible for an action, contributing to the anonymity of the actual user:</li> <li>Example for large sets:<ul> <li>Any human</li> <li>Any human with Internet access</li> <li>Any human speaking German</li> <li>Any human speaking German with Internet access awake at 3am CEST</li> </ul> </li> <li>Attacker computes a probability distribution describing the likelihood of each participant to be the responsible party.</li> </ul> <p>Anonymity is the stronger, the larger the anonymity set and the more evenly distributed the subjects within that set are.</p>"},{"location":"themes/Anonymity/#maximum-likelihood-ml","title":"Maximum likelihood (ML)","text":"<p>The highest probability that a particular user in the anonymity set is responsible. Legal cases require varying levels of ML for successful prosecution (e.g. for successful civil prosecution in the US, the law requires \\(ML \\gt 1/2\\))</p>"},{"location":"themes/Anonymity/#anonymity-metric-entropy","title":"Anonymity Metric: Entropy","text":"<p>Entropy, as a concept from information theory, quantifies the level of uncertainty or randomness in a set of data. In the context of anonymity, entropy represents the measure of uncertainty about the identity of a user within an anonymity set. A higher entropy denotes a greater degree of anonymity, as there's more uncertainty for an attacker trying to identify a specific user.</p> <p>Expected number of bits of additional information that the attacker needs to definitely identify the user (with absolute certainty).</p>"},{"location":"themes/Anonymity/#economics-anonymity","title":"Economics &amp; Anonymity","text":"<ul> <li>Providing anonymity services has economic disincentives<ul> <li>providing anonymity services is often not cheap</li> <li>providers may face legal risks if their services are used for unlawful activities</li> <li>services often introduces inefficiencies such as slower data transmission due to routing through multiple nodes for obfuscation</li> <li>anonymity services are often targets for attacks (DoS)</li> </ul> </li> </ul> <p>The anonymizing server that has the best reputation (performance, most traffic) is presumably compromised</p> <p>links: AC2 TOC - Anonymity - Index</p>"},{"location":"themes/Ascon/","title":"Ascon","text":"<p>links: AC1 TOC - AEAD - Index</p> <p>Ascon was Submitted on May 31, 2021 to NIST. It provides authenticated encryption with associated data (AEAD) and hashing functionality. For full information see the NIST Submission.</p>"},{"location":"themes/Ascon/#functions","title":"Functions","text":"<p>The Ascon suite consists of:</p> <p>Authenticated Cyphers:</p> <ul> <li>Ascon-128</li> <li>Ascon-128a</li> <li>Ascon-80pq</li> </ul> <p>Hash Functions:</p> <ul> <li>Ascon-Hash</li> <li>Ascon-Hasha</li> </ul> <p>Extendable Output Functions (XOF):</p> <ul> <li>Ascon-XOF</li> <li>Ascon-XOFa</li> </ul>"},{"location":"themes/Ascon/#definition","title":"Definition","text":"<p>In this section the several parts of Ascon will be described briefly for a visualization see the images down below. For the full explanation see the NIST Submission.</p>"},{"location":"themes/Ascon/#initialization","title":"Initialization","text":"<p>The initial state of Ascon is 320 bits. It is formed by the secret key, the nonce \\(N\\) and an \\(IV\\) initializing the algorithm (including the key size \\(k\\), the rate \\(r\\), the initialization and finalization round number \\(a\\) and the intermediate round number \\(b\\)).</p> <p>During the initialization \\(a\\) rounds of \\(P\\) (permutation / transformation) are applied. Followed by an XOR of the secret key \\(K\\).</p>"},{"location":"themes/Ascon/#associated-data","title":"Associated Data","text":"<p>Ascon appends a single \\(1\\) and the smallest number of \\(0\\)'s to \\(A\\) to make it a multiple of \\(r\\) bits. \\(A\\) is then divided into blocks of \\(r\\) bits.</p> <p>Each block \\(A_i\\) is XORed with the first \\(r\\) bits of \\(S_R\\) of the state \\(S\\). Then a \\(b\\)-round permutation \\(p^b\\) is applied to \\(S\\).</p>"},{"location":"themes/Ascon/#plaintext","title":"Plaintext","text":"<p>Encryption</p> <p>As with the associated data, the plaintext is padded to a multiple of \\(r\\) bits and then divided into blocks of size \\(r\\).</p> <p>Each iteration on the plaintext block \\(P_i\\) is XORed with the first \\(r\\) bits of \\(S_r\\). Then a ciphertext block \\(C_i\\) is extracted. After the initial state \\(S\\) is transformed by the permutation \\(p^b\\) using \\(b\\) rounds.</p> <p>Decryption</p> <p>The plaintext block \\(P_i\\) is computed by XORing \\(C_i\\) with the first \\(r\\) bits of \\(S_r\\). Then the first \\(r\\) bits of \\(S\\) are replaced by \\(C_i\\). Finally, \\(S\\) is transformed using the \\(b\\)-round permutation \\(p^b\\).</p>"},{"location":"themes/Ascon/#finalization","title":"Finalization","text":"<p>The secret key \\(K\\) is XOR'ed with \\(S\\) and \\(S\\) is transformed by the permutation \\(p^a\\) using a round. The tag \\(T\\) consists of the last 128 bits of \\(S\\) XORed with the last 128 bits of \\(K\\).</p> <p>The encryption returns \\(T\\) with the ciphertext. Decryption returns the plaintext if the computed tag value matches \\(T\\).</p> <p></p> <p></p> <p>links: AC1 TOC - AEAD - Index</p>"},{"location":"themes/Asynchronous%20Bidirectional%20Secure%20Channels/","title":"Asynchronous Bidirectional Secure Channels","text":"<p>links: AC2 TOC - Secure messaging and channels - Index</p>"},{"location":"themes/Asynchronous%20Bidirectional%20Secure%20Channels/#forward-secrecy","title":"Forward secrecy","text":"<p>If the long-term secret key is compromised, decryption is only possible for future sessions, not for past sessions.</p>"},{"location":"themes/Asynchronous%20Bidirectional%20Secure%20Channels/#future-secrecy","title":"Future secrecy","text":"<p>If a session key is compromised, it doesn't affect the security of future session keys.</p>"},{"location":"themes/Asynchronous%20Bidirectional%20Secure%20Channels/#silent-circle-instant-message-protocol-scimp","title":"Silent Circle Instant Message Protocol (SCIMP)","text":"<p>Forward Secrecy</p> <p>Protocol which uses hashes of the private key to encrypt data instead of using the actual key. This leads to forward secrecy because if the current key (\\(h_3(h_2(h_1(k)))\\)) gets leaked the attacker can't go back to previous hashes of the key. Past encryptions stay secure.</p>"},{"location":"themes/Asynchronous%20Bidirectional%20Secure%20Channels/#axolotl-signal-protocol","title":"Axolotl / Signal Protocol","text":"<p>Forward &amp; Future Secrecy</p> <p>The protocol combines the Double Ratchet algorithm, prekeys, and a triple Elliptic-curve Diffie\u2013Hellman (Secure Channels#Triple Diffie-Hellman (3DH)|3DH) handshake, and uses Curve25519, AES-256, and HMAC-SHA256 as primitives.</p> <p></p> <p>links: AC2 TOC - Secure messaging and channels - Index</p>"},{"location":"themes/Attribute%20Certificates/","title":"Attribute Certificates","text":"<p>links: AC2 TOC - X.509 - Index</p>"},{"location":"themes/Attribute%20Certificates/#identity-certificates-vs-attribute-certificates","title":"Identity Certificates vs. Attribute Certificates","text":"<ul> <li>If you want to change something in a certificate: Revoke and reissue</li> <li>Attributes in a certificate should be as static as possible</li> <li>If you have a dynamic environment it makes sense to use attribute certificates</li> <li>Attribute certificate helps to separate authentication (identity) and authorization (permission).</li> </ul>"},{"location":"themes/Attribute%20Certificates/#definition","title":"Definition","text":"<ul> <li>a certified set of attributes like temporary network access privileges, electronic letters of credit access, signing and purchasing authority, etc.</li> <li>much the same syntax as a X.509v3 certificate (without a public key)    </li> <li>bound to a serial number of an identity certificate </li> <li>typically have a much shorter lifetime than identity certificates </li> <li>grants temporary authorization to individuals</li> </ul> <p>Individuals can hold several attribute certificates:</p> <ul> <li>each referencing the same identity certificate  </li> <li>each issued by a different attribute authority (AA)  </li> <li>and use them selectively according to the resource or service being accessed</li> </ul> <p>links: AC2 TOC - X.509 - Index</p>"},{"location":"themes/Authenticated%20Encryption%20with%20Associated%20Data/","title":"Authenticated Encryption with Associated Data","text":"<p>links: AC1 TOC - AEAD - Authenticated Encryption - Index</p> <p>This chapter will only describe AEAD. For an overview of Authenticated Encryption, click here.</p>"},{"location":"themes/Authenticated%20Encryption%20with%20Associated%20Data/#definition","title":"Definition","text":"<p>AEAD provides:</p> <ul> <li>Confidentiality</li> <li>Integrity</li> <li>Authenticity</li> </ul> <p>For every AEAD cipher 3 inputs are needed:</p> <ul> <li>Plaintext Data</li> <li>Secret Key</li> <li>Associated data</li> </ul> <p>Here's how AEAD works:</p> <ol> <li> <p>Encryption: The plaintext data is encrypted using the secret key to produce ciphertext. This ensures confidentiality as only entities with the secret key can decrypt and access the data.</p> </li> <li> <p>Authentication: The additional data, the ciphertext, and the secret key are used to generate a unique tag (by applying a MAC over the additional data and the plaintext using the secret key). This tag allows you to verify the integrity and authenticity of both the ciphertext and the additional data.</p> </li> </ol> <p>To decrypt and verify data using AEAD, the following inputs are required: the ciphertext, the additional data, the tag, and the secret key. The output is the plaintext data if the tag verifies correctly, and an error message otherwise.</p> <p>AEAD Protocols</p> <ul> <li>AES-GCM with associated Data</li> <li>ChaCha20-Poly1305</li> <li>Ascon</li> </ul>"},{"location":"themes/Authenticated%20Encryption%20with%20Associated%20Data/#example-with-aes-gcm","title":"Example with AES-GCM","text":"<p>Step 1: Key generation</p> <p>Alice and Bob agree on a secret key \"secretkey123\". This could be done in person or through a secure key exchange protocol such as Diffie-Hellman.</p> <p>Step 2: Alice encrypts the message</p> <p>Alice uses AES-GCM with the secret key \"secretkey123\" to encrypt her message \"Meet me at the park\". Let's assume this produces the ciphertext \"abc123\".</p> <p>Step 3: Alice authenticates the data</p> <p>Alice uses AES-GCM with the secret key \"secretkey123\", the ciphertext \"abc123\", and the associated data \"2023-06-28\" to produce a unique authentication tag. Let's say the generated tag is \"xyz789\".</p> <p>Step 4: Alice sends the data</p> <p>Alice then sends Bob the ciphertext \"abc123\", the associated data \"2023-06-28\", and the authentication tag \"xyz789\".</p> <p>Step 5: Bob verifies the data</p> <p>Bob uses AES-GCM with his copy of the secret key \"secretkey123\", the received ciphertext \"abc123\", and the associated data \"2023-06-28\" to generate a new authentication tag.</p> <p>Step 7: Bob compares the tags</p> <p>Bob then compares this new authentication tag with the received tag \"xyz789\". If they match, it verifies that the data hasn't been tampered with during transmission and is indeed from Alice. Now bob has not only confidentiality (encrypted plaintext which he can decrypt by using the shared secret key) but also integrity and authenticity (by verifying the tag using the shared secret key).</p> <p>links: AC1 TOC - AEAD - Authenticated Encryption - Index</p>"},{"location":"themes/Authenticated%20Encryption/","title":"Authenticated Encryption","text":"<p>links: Authenticated Encryption with Associated Data - AC1 TOC - From Symmetric Encryption to Secure Channels - Modern Cryptography MOC - Index</p> <p>Until now, we have considered how to obtain secrecy (using encryption) and integrity (using MACs) separately. The aim of authenticated encryption is to achieve both goals simultaneously.</p> <p>A private-key encryption scheme is an authenticated encryption (AE) scheme if it is CCA-Secure and unforgeable.</p>"},{"location":"themes/Authenticated%20Encryption/#authenticated-encryption-with-associated-data","title":"Authenticated encryption with associated data","text":"<p>Often, a message \\(m\\) requires both secrecy and integrity but various associated data (e.g. header information) sent along with the message requires integrity only. This schemes are called authenticated encryption with associated data (AEAD) schemes.</p>"},{"location":"themes/Authenticated%20Encryption/#cca-security-vs-authenticated-encryption","title":"CCA Security vs. Authenticated Encryption","text":"<p>There is no reason to ever use a CCA-secure scheme that is not also an authenticated encryption scheme, simply because we don't have any constructions of the former that are more efficient than constructions of the latter.</p>"},{"location":"themes/Authenticated%20Encryption/#authenticated-encryption-schemes","title":"Authenticated Encryption Schemes","text":"<p>Encrypt-and-authenticate</p> <ul> <li>encryption and message authentication are carried out independently</li> <li>even a strongly secure MAC does not guarantee any secrecy and so it is possible for the tag \\(t\\) to leak information about \\(m\\) to an eavesdropper</li> </ul> <p>Authenticate-then-encrypt</p> <ul> <li>first compute tag, then encrypt message with tag</li> <li>there are two sources of potential decryption failure: the padding may be incorrect or the tag may not verify</li> <li>does not necessarily provide authenticated encryption</li> </ul> <p>Encrypt-then-authenticate</p> <ul> <li>message is first encrypted an then a MAC is computed over the result<ul> <li>Encryption: \\(c \\leftarrow Enc_{kE}(m)\\) and \\(t \\leftarrow Mac_{kM}(c)\\), send pair \\(\\langle c, t \\rangle\\)</li> <li>Decryption: if \\(Vrfy_{kM}(c, t) \\neq 1\\), output \\(Dec_{kE}(c)\\)</li> </ul> </li> <li>with associated data \\(d\\) simply change tag to: \\(t \\leftarrow Mac_{kM}(d \\| c)\\)</li> </ul>"},{"location":"themes/Authenticated%20Encryption/#the-need-for-independent-keys","title":"The need for independent keys","text":"<p>different instances of cryptographic primitives should always use independent keys!</p>"},{"location":"themes/Authenticated%20Encryption/#standardized-schemes","title":"Standardized Schemes","text":""},{"location":"themes/Authenticated%20Encryption/#gcm-galois-counter-mode","title":"GCM (Galois Counter Mode)","text":"<ul> <li>follows the encrypt-then-authenticate approach with CTR mode as the underlying encryption  scheme and GMAC as the underlying message authentication code.</li> <li>uses only one single key and the same IV for CTR-mode encryption and as the nonce for GMAC \\(\\rightarrow\\) Both these changes can be proven secure in GCM.</li> <li>a repeated IV would fail/drop secrecy and authenticity!</li> </ul>"},{"location":"themes/Authenticated%20Encryption/#ccm-counter-with-cbc-mac","title":"CCM (Counter with CBC-MAC)","text":"<ul> <li>follows the authenticate-then-encrypt approach with CTR mode as the underlying encryption scheme and CBC-MAC as the underlying message authentication code.</li> <li>uses only one single key but is proven secure</li> <li>Drawback: CCM is relatively slow and cannot be fully parallelized</li> </ul>"},{"location":"themes/Authenticated%20Encryption/#chacha20-poly1305","title":"ChaCha20-Poly1305","text":"<ul> <li>relies on the encrypt-then-authenticate approach</li> <li>using the stream cipher ChaCha20 in unsynchronized mode and Poly1305 as MAC</li> </ul>"},{"location":"themes/Authenticated%20Encryption/#secure-communication-sessions","title":"Secure Communication Sessions","text":"<p>A communication session is a period of time during which the communicating parties maintain state. To ensure secure communication based on an AE scheme, the following attacks are still possible:</p> <ul> <li>Re-ordering attack: an attacker can swap the order of messages</li> <li>Replay attack: An attacker can replay a (valid) ciphertext \\(c\\) sent previously by on of the parties.</li> <li>Message-dropping attack: An attacker may drop some of the messages sent between A and B.</li> </ul> <p>\\(\\rightarrow\\) this attacks can be addressed using a counter/ sequence number</p> <ul> <li>Reflection attack: An attacker can take a ciphertext \\(c\\) sent from A to B and send it back to A.</li> </ul> <p>\\(\\rightarrow\\) this attack can be addressed using a directionality bit</p> <p>links: Authenticated Encryption with Associated Data - AC1 TOC - From Symmetric Encryption to Secure Channels - Modern Cryptography MOC - Index</p>"},{"location":"themes/Big%20Numbers%20in%20Context/","title":"Big Numbers in Context","text":"<p>links: AC1 TOC - Randomness - Index</p>"},{"location":"themes/Big%20Numbers%20in%20Context/#2256","title":"\\(2^{256}\\)","text":"<p>\\(2^{256}\\) is an unfathomably large number. It's \\(\\sim 10^{77}\\) in decimal. The (observable) universe is estimated to contain \\(10^{80}\\) atoms.</p> <p>It is many orders of magnitude larger than the estimated number of grains of sand on Earth, which is around \\(5.23 \\times 10^{23}\\).</p>"},{"location":"themes/Big%20Numbers%20in%20Context/#2128","title":"\\(2^{128}\\)","text":"<p>The number of seconds that have elapsed since the Big Bang is believed to be around \\(10^{17}\\). Even if every second of the universe's existence had been used to generate a new, unique value, we would still be far from exhausting \\(2^{128}\\) possibilities.</p> <p>\\(2^{128}\\) = \\(\\sim 3.4 \\times 10^{38}\\)</p>"},{"location":"themes/Big%20Numbers%20in%20Context/#how-much-entropy","title":"How much entropy","text":"<p>Dice</p> <p>\\(\\frac{1}{6} \\cdot \\log_{2} 6 \\cdot 6 = 2.58\\) bit</p> <p>Latte Macchiato</p> <p>\\(2^{83}\\) = \\(\\sim 8.36 \\times 10^{24}\\)</p> <p>Ca. 16 times all the sand grains on planet earth are in one cup^^ (in regards to bits of entropy)</p> <p>Card deck shuffle</p> <p>\\(36! = 2^{138}\\)</p> <p>links: AC1 TOC - Randomness - Index</p>"},{"location":"themes/Blind%20Signatures%20%28RSA%29/","title":"Blind Signatures (RSA)","text":"<p>links: AC2 TOC - GNU Taler - AC2 TOC - Digital Signatures - Index</p> <p>Blind signatures are a form of digital signature where the content of a message is disguised (blinded) before it is signed. The entity signing the message cannot see its contents, but other entities can still verify the signature.</p> <p>Like this a certain degree of anonymity can be established by allowing an intermediate to sign a blinded value and letting everybody verify the signature. Since the signature is not of the original sender but the intermediate, the receiver doesn't know who actually sent the message. The intermediate party therefore acts as trusted third party where the sender trusts that the TTP doesn't reveal who he is and the receiver trusts the TTP to only sign messages from trustworthy senders. </p>"},{"location":"themes/Blind%20Signatures%20%28RSA%29/#full-domain-hash-fdh","title":"Full Domain Hash (FDH)","text":"<p>FDH is an RSA-based signature scheme that follows the hash-and-sign paradigm. FDH involves hashing a message using a function whose image size equals the size of the RSA modulus, and then raising the result to the secret RSA exponent.</p>"},{"location":"themes/Blind%20Signatures%20%28RSA%29/#blinding","title":"Blinding","text":"<ol> <li>Obtain the public key of the signer: \\((e, n)\\)</li> <li>Hash the message using FDH: \\(h := FDH(m)\\)</li> <li>Pick a blinding factor: \\(r \\in \\mathbb{Z}_n\\)</li> <li>Send blinded hash to the signer: \\(h' := hr^e \\mod n\\)</li> </ol>"},{"location":"themes/Blind%20Signatures%20%28RSA%29/#signing","title":"Signing","text":"<ol> <li>Receive blinded hash: \\(h'\\)</li> <li>Compute signature: \\(s' := h'^d \\mod n\\)</li> <li>Send signed hash back: \\(s'\\)</li> </ol>"},{"location":"themes/Blind%20Signatures%20%28RSA%29/#unblinding","title":"Unblinding","text":"<ol> <li>Receive signed hash: \\(s'\\)</li> <li>Unblind: \\(s := s'r^{-1} \\mod n\\)</li> </ol>"},{"location":"themes/Blind%20Signatures%20%28RSA%29/#for-dummies","title":"For dummies","text":"<p>The goal is to retrieve a valid signature for my message \\(m\\) without letting the signer know what is signed. For this we first blind the hash of the message with the random number \\(r\\) to gather a blinded hash. Then we send the blinded hash to the signer who signs it and sends the signed blinded hash back to me. I now can remove the parameter \\(r\\) by calculating the inverse \\(r^{-1}\\) multiplied the signed blinded hash \\(s'\\) modulo \\(n\\) to retrieve the valid signature of my unblinded message \\(m\\). Now I send my message to the receiver who then can verify the signers signature with the signers public key. The verifier now knows that the message originates from someone who is trusted by the signer.</p> <p>links: AC2 TOC - GNU Taler - AC2 TOC - Digital Signatures - Index</p>"},{"location":"themes/Block%20Cipher/","title":"Block Cipher","text":"<p>links: AC1 TOC - From Symmetric Encryption to Secure Channels - Modern Cryptography MOC - Index</p>"},{"location":"themes/Block%20Cipher/#pseudorandom-permutation-function","title":"Pseudorandom permutation / function","text":"<p>A block cipher is simply another name for a (strong) pseudorandom permutation.</p> <p>That is, a block cipher \\(F : \\{0, 1\\}^n \\times \\{0, 1\\}^l \\rightarrow \\{0, 1\\}^l\\) is a keyed function, \\(n\\) is the key length of F and \\(l\\) is the block length. The main distinction between block ciphers and pseudorandom permutations is that the former typically only support a specific set of key/block lengths and do not support arbitrary-length keys.</p> <p>The assumption that block ciphers (e.g. AES) are pseudo random functions (PRNG / pseudorandom permutation) is a commonly shared belief of the crypto community. No proof exists.</p>"},{"location":"themes/Block%20Cipher/#electronic-code-block-ecb-mode","title":"Electronic Code Block (ECB) mode","text":"<ul> <li>direct application of the block cipher</li> <li>ECB mode is deterministic and therefore cannot be CPA secure</li> <li>not even EAV secure \\(\\rightarrow\\) should never be used!</li> </ul>"},{"location":"themes/Block%20Cipher/#cipher-block-chaining-cbc-mode","title":"Cipher Block Chaining (CBC) mode","text":"<ul> <li>randomized through IV</li> <li>Unsynchronized mode (stateless)</li> <li>CPA secure (random IV)</li> <li>not parallel encryption/decryption</li> </ul>"},{"location":"themes/Block%20Cipher/#chained-cbc-mode","title":"Chained CBC mode","text":"<ul> <li>last block of the previous ciphertext is used as the IV \\(\\rightarrow\\) reduces bandwith</li> <li>synchronized mode (stateful)</li> <li>not CPA secure \\(\\rightarrow\\) see see CBC Attack!</li> </ul>"},{"location":"themes/Block%20Cipher/#output-feedback-ofb-mode","title":"Output Feedback (OFB) mode","text":"<ul> <li>Unsynchronized mode (stateless)</li> <li>Pseudorandom stream is independent</li> <li>No need of \\(F_k^{-1}\\)</li> <li>not necessary for the plaintext length to be a multiple of the block length \\(n\\)</li> <li>CPA secure</li> </ul>"},{"location":"themes/Block%20Cipher/#counter-ctr-mode","title":"Counter (CTR) mode","text":"<ul> <li>Unsynchronized mode (stateless)</li> <li>Parallel encryption &amp; decryption</li> <li>the blocks of the pseudorandom stream can be computed independently of each other</li> <li>with random IV IND-CPA secure, with stateful IV IND-CPA secure (if no IV reuse)</li> <li>Not CCA secure (Attacker can flip one bit in cipher text, encrypt cipher text to get message with only one bit flipped)</li> </ul>"},{"location":"themes/Block%20Cipher/#practical-considerations","title":"Practical Considerations","text":"<p>Block length and concrete security</p> <p>If the block length \\(n\\) is too short, then the resulting concrete-security bound will be too weak for practical applications. Since the IV is a uniform string of length \\(3n/4\\), an IV will repeat after some time. The the smaller \\(n\\), the faster the IV is repeated. But if \\(n\\) is too large, the concrete-security will also decrease.</p> <p>IV misuse</p> <p>A repeated IV can be catastrophic: it implies that the entire pseudorandom stream is repeated, which means that by XORing the two ciphertexts using the same IV reveals the XOR of the underlying plaintexts.</p>"},{"location":"themes/Block%20Cipher/#nonce-based-encryption","title":"Nonce-Based Encryption","text":"<p>The encryption and decryption algorithms additionally accept a nonce as input. A nonce refers to a value that is supposed to be used once, and never repeated.</p> <p>Difference between IV</p> <ul> <li>instead of using an IV, wich is chosen uniformly, use a nonce</li> <li>repeat cannot occur (assumption that the application using the encryption scheme ensures that nonces never repeat)</li> <li>nonce-based encryption scheme can be CPA-secure even though it is deterministic</li> </ul> <p>Advantages</p> <ul> <li>in settings where generating high-quality randomness is expensive or impossible, it may be much easier to use a counter as a nonce rather than to generate a nonce uniformly.</li> </ul> <p>links: AC1 TOC - From Symmetric Encryption to Secure Channels - Modern Cryptography MOC - Index</p>"},{"location":"themes/Blockchain/","title":"Blockchain","text":"<p>links: AC1 TOC - Blockchain - Index</p>"},{"location":"themes/Blockchain/#what-is-a-blockchain","title":"What is a blockchain?","text":"<p>A blockchain is a distributed ledger which stores data in a series of blocks. Blocks contain lists of transactions and the hash of the previous block. Adding the hash of the previous block links every block to the next which leads to the formation of a chain. Altering data in a older block becomes more difficult over time because the hashes in all the following blocks have to be altered as well.</p>"},{"location":"themes/Blockchain/#advertised-properties-of-blockchain","title":"Advertised properties of blockchain","text":"<p>Buzzwords:</p> <ul> <li>Immutability</li> <li>Transparency</li> <li>Anonymity</li> <li>Decentralization</li> <li>Irreversibility</li> <li>Autonomy</li> </ul>"},{"location":"themes/Blockchain/#immutability","title":"Immutability","text":"<p>Claim</p> <p>When something is written to the blockchain it can not be altered anymore and stays there forever.</p> <p>Reality</p> <p>Given sufficient computing power an attacker can gain more mining power than the rest of the network. This allows them to change data inside a block and then recalculate the following blocks.</p> <p>It's possible to simply start an additional blockchain or fork the initial blockchain and change / remove transactions.</p> <p>It's possible that the network partitions for some time and then merges again. Depending on the protocol this either breaks consensus and some central power has to step in and fix the problem or the longer chain is chosen as the valid one which leads to transactions in the shorter chain getting lost.</p>"},{"location":"themes/Blockchain/#transparency","title":"Transparency","text":"<p>Claim</p> <p>All transactions are publicly available. Every participant in the network can verify that the protocol is followed and there are no malicious transactions (for example double spending).</p> <p>Reality</p> <p>While all transactions are public, there is no personal data required to make a transaction on a blockchain. Every wallet (available money to spend) is represented as a public key (pseudonym) and for an outsider there is nothing to learn from single transactions.</p>"},{"location":"themes/Blockchain/#anonymity","title":"Anonymity","text":"<p>Claim</p> <p>Anonymity can be achieved with some wallets (changing public key after every transaction) and pseudonymity is always \"given\" since no personal information has to be given to anyone to use a blockchain.</p> <p>Reality</p> <p>The most common way to buy cryptocurrency (interacting with a blockchain) is over an exchange which requires kyc (know your customer). The exchange sends the money to your wallet (public key) which essentially links your personal information to your public key. The same is the case when using the money to buy something on the internet. Normally personal information has to be given to buy something on the internet.</p> <p>There are ways to mitigate those issues but it is up to the protocol to decide if those are required or not. For example monero has privacy and anonymity baked into the protocol. This can lead to other issues though. In the case of monero no one can verify that there is no inflation bug in the protocol since no one knows who has how much money.</p>"},{"location":"themes/Blockchain/#decentralization","title":"Decentralization","text":"<p>Claim</p> <p>Anyone can run a bitcoin node, anyone can mine bitcoin and everyone can see the blockchain and verify that everything is correct. It is believed / hoped that no single actor can gain power over the network and alter / stop / remove transactions. Decentralization is important because it eliminates the need to trust a central authority. The blockchain is supposed to run trustlessly</p> <p>Reality</p> <p>In reality blockchains often have a tendency to become more centralized. Places with cheaper energy and less regulation can mine cryptocurrencies cheaply which can lead to mining centralization. Miners are built by companies which gives those companies power. Early adopters of currencies might have a big amount of the currency which allows them to affect the price and in the case of proof of stake have a bigger voting power for new blocks and higher staking rewards.</p>"},{"location":"themes/Blockchain/#irreversibility","title":"Irreversibility","text":"<p>Claim</p> <p>Once a transaction is on the blockchain it cannot be undone.</p> <p>Reality</p> <p>See Immutability</p>"},{"location":"themes/Blockchain/#autonomy","title":"Autonomy","text":"<p>Claim</p> <p>Every user owns his own money and can send it to anyone else without being censored by a central power (bank or government).</p> <p>Reality</p> <p>While the claims can be true there are problems that come with it. Users need to self custody their money which is similar to having money under the mattress. A user error leads to lost funds and no way to recover them (hackers, losing private key, security bug in wallet / protocol). Those properties lead users to store their funds on central exchanges. Since there is not much regulation currently when it comes to internet money, those exchanges can not always (never) be trusted.</p>"},{"location":"themes/Blockchain/#what-is-proof-of-work-mining","title":"What is proof of work / mining?","text":"<p>Proof of work (POW) is what a miner does to append a block to the blockchain. User transactions are propagated through the network and end up in the mempool (memory pool) of the nodes. Mempool is just a list of pending transactions. A miner (node) then takes some transactions and puts them in a block and adds the hash of the previous block. The miner has to make sure that the chosen transactions are valid (no double spending and user must have enough available funds). A miner has to have all the balances from all users in the network loaded in memory to be able to verify new transactions in reasonable time. This means that every miner initially has to parse the whole blockchain (around 500GB for bitcoin) and load the current balances of all the users.</p> <p>Mining means adding a random string to the block and hashing the block until some goal is reached. Normally the goal is to find a hash which has a number of leading 0's (finding a partial collision). The number of the leading 0's is the difficulty. The difficulty can be adjusted based on the computing power of the network (how long it takes on average to find a new block). This happens automatically based on the rules in the protocol.</p> <p>When a miner finds a block he propagates it through the network. Every miner/node reads the random string from the block, hashes the block and confirms that the resulting hash has enough leading 0's to reach the difficulty goal. If that's the case they remove those transactions from their mempool, add the block to their local copy of the blockchain (ledger) and continue mining.</p> <p>Mining is usually done with ASICs (application-specific integrated circuit) to get the most out of the available power. Mining on CPU / GPU is possible but normally not economically viable.</p>"},{"location":"themes/Blockchain/#what-is-proof-of-stake","title":"What is proof of stake?","text":"<p>Instead of mining users can lock up their money and put it \"at stake\". Users that are staking are randomly chosen to \"mine\" the next block. This solution uses less energy because no mining is happening but it's debatable if it's as secure as mining. Users with a lot of money can have more influence over the network and they get more money over time because they still get the rewards for every block they mine.</p>"},{"location":"themes/Blockchain/#why-is-mining-staking-necessary","title":"Why is mining / staking necessary?","text":"<p>It's to avoid sybil attacks. If there was no requirement to mine a block an attacker could deploy multiple nodes and have a higher chance to mine blocks. Mining / staking ensures that this is not possible.</p>"},{"location":"themes/Blockchain/#what-is-bitcoin","title":"What is bitcoin?","text":"<p>The most popular implementation of blockchain internet money / cryptocurrency is bitcoin. Every user has at least one public / private key pair. Money can be sent to other users public keys and private keys are used to sign transactions.</p> <p>Bitcoins are created (minted) when a block in mined. A miner can add a transaction in the block which essentially creates some bitcoin (6.25 currently) out of nothing and give it to himself. This is called the block reward. Regular users have to provide transaction fees when doing a transaction. The miner can add those fees to his own address as well.</p> <p>Normal block time is 10 minutes. This means that the protocol tries to adjust the difficulty so that around every 10 minutes a miner finds a block. If too many blocks are found the difficulty is increased which means miners have to find hashes with more leading 0's.</p> <p>Bitcoin has a maximum available supply of 21 million. Every ~4 years the block reward is cut in half. This means that to keep miners incentivised to mine the price of bitcoin needs to double every 4 years. If that is not the case then some miners will not be profitable anymore and might have to stop mining. This leads to less security for the network. In the year 2140 all 21 million bitcoin will be mined. It is not yet clear what is going to happen at this point. The current idea is that the block rewards will be replaced by transaction fees.</p> <p></p>"},{"location":"themes/Blockchain/#what-are-problems-of-bitcoin","title":"What are problems of bitcoin?","text":"<p>Conflicting blocks</p> <p>It's possible that two miners mine a block at the same time. This means that one partition of the network has has Block A as latest block and the other partition has Block B as latest block. This problem is easily solved by the fact that bitcoins protocol always chooses the longest chain. If a miner which has Block A as latest block mines Block C then all nodes which have Block B as latest block will notice that they are not part of the longest chain anymore and will have to either resync with the rest of the network or fork.</p> <p>Forking</p> <p>Forking means that one or more nodes decide to mine their own blockchain independently from the rest of the network. This allows them to change the history of the blockchain, remove parts of the blockchain or change the protocol entirely. In the case of a protocol change, the history of the blockchain stays the same. This means that users who had money on the old blockchain will have the same amount on the new blockchain and will be able to spend the money on both blockchains.</p> <p>The most prominent fork is the bitcoin fork of 2016 which lead to the creation of bitcoin cash. For bitcoin nothing really changed through this fork. Some people sold off their bitcoin because they believe bitcoin cash is the real bitcoin but most users sold their newly forked bitcoin cash and kept their bitcoin which lead to bitcoin cash being orders of magnitude less valuable than bitcoin.</p> <p>Finality / Latency</p> <p>Because of the double spending problems it is recommended to wait around 6 blocks until a transaction is confirmed. Reversing a transaction after only 1 block is easier than reversing it after 6 additional blocks have already been mined. An attacker would need to change the transaction and then shadow mine (mine locally without broadcasting) all the previous blocks and catch up with the longest chain. An attacker needs at least 51% of the mining power to achieve this attack but the older the transaction the more mining power is needed to catch up with the current state of the chain in a reasonable time. For every shadow mined block the actual block chain has a 49% chance to also find a block which means the attacker need to shadow mine even more.</p> <p>Compared to mastercard the waiting time for finality isn't too bad. On Mastercard settlement only happens after 1-2 business days and even after that a chargeback can still be made weeks or months after the transaction happened.</p> <p>Privacy</p> <p>Transactions are only private as long as your personal information are not linked to your public key. All transactions are transparent and public available.</p> <p>Storage</p> <p>The bitcoin blockchain grows linearly over time. It's currently around 500GB and there is no garbage collection. Spent transactions are only used for parsing the blockchain and for nodes to verify themselves that every transaction that ever happened is valid. Removing part of the blockchain would theoretically add trust because new nodes will have to trust that previous transactions were valid. This is an open discussion and the blockchain can be pruned (remove old transactions) in the future if consensus can be reached.</p> <p>Power consumption</p> <p>Mining takes up a lot of energy. The spent energy can be considered as wasted. If bitcoin has actual value or not is a debatable topic and the amount of energy spent on creating it is linked to this discussion. It is believed that mining uses as much energy as Denmark today. There is no way to actually verify this claim.</p> <p>Rate</p> <p>The bitcoin network supports around 7 transactions per second which is very little. This leads to high transactions fees. Other solutions like the lightning network or central exchanges help with this problem but they lead to less security (lightning network) or less decentralization / more trust (central exchanges) -&gt; blockchain trilemma</p> <p>Accountability</p> <p>Because personal information is not linked to bitcoin public keys it used to be used for criminal activity. Because of the pseudonymity it is not the best solution since the police can still find bad actors if they can link the public key to a person in any way (buying bitcoin on exchange or spending it). Solutions like monero are better suited for criminal activity.</p>"},{"location":"themes/Blockchain/#what-are-altcoins","title":"What are altcoins","text":"<p>Altcoins are cryptocurrencies which are not bitcoin.</p> <p>Dogecoin</p> <p>Memecoin which essentially works like bitcoin, only slight protocol changes</p> <p>Zcash</p> <p>Uses ZKSNARKs (Zero-Knowledge Succinct Non-Interactive Argument of Knowledge) to hide transactions</p> <p>Ethereum</p> <p>Allows users to deploy smart contracts (programs) on the blockchain which miners will execute in decentralized way. Allows the creation of additional altcoins on top of ethereum.</p>"},{"location":"themes/Blockchain/#case-study","title":"Case study","text":"<p>\u201cA company is developing new software for private payments. This will enable its customers to transact with \u201ccomplete\u201d privacy (like cash). The solution does not include backdoors, and thus the company cannot block payments to support trade embargos or anti money laundering efforts.\u201d</p>"},{"location":"themes/Blockchain/#virtues","title":"Virtues","text":"<p>Privacy</p> <p>Users can transact money privately</p> <p>Autonomy</p> <p>Users can do whatever they want with their money and no one can stop them</p> <p>Inclusivity</p> <p>Users who might not had a bank account before get to use money on the internet which might not have been possible previously</p>"},{"location":"themes/Blockchain/#vices","title":"Vices","text":"<p>Illicit activities</p> <p>Users can use this system to do illegal activities like money laundering or tax evasion</p> <p>Lack of consumer protection</p> <p>Reversing fraudulent transactions is not possible if everything is private</p> <p>Regulatory compliance</p> <p>Anti-money laundering efforts can not be supported which might make this system illegal in some parts of the world</p> <p>links: AC1 TOC - Blockchain - Index</p>"},{"location":"themes/Bloom%20Filters%20%26%20Set%20Unification/","title":"Bloom Filters &amp; Set Unification","text":"<p>links: AC1 TOC - Blockchain - Index</p>"},{"location":"themes/Bloom%20Filters%20%26%20Set%20Unification/#problem","title":"Problem","text":"<p>The problem to solve is that two nodes each have a sets with small differences and they want to sync up their sets so they end up with the same combined sets.</p> <p>The naive approach is that both nodes send their sets to the other nodes and they each compare the other nodes set and add whatever they are missing. This gives a communication cost of \\(\\mathcal{O}(\\vert {A} \\vert + \\vert {B} \\vert)\\) which is not great. Instead of sending the actual set, hashes of the elements can be sent but that doesn't improve complexity. The ideal solution would have complexity of \\(\\mathcal{O}(\\vert diff(A, B) \\vert)\\).</p>"},{"location":"themes/Bloom%20Filters%20%26%20Set%20Unification/#bloom-filters","title":"Bloom filters","text":"<p>Take an array of 0's and the hash of the first element in the set. Flip the corresponding bits in the array. Repeat for the following elements in the set. If a bit is already flipped to 1 leave it on 1.</p> <p>Send the array to the other node. The node can check its set elements by hashing them and checking if all the bits are set to 1. If they are then it is likely that all the elements are also present in the set of the sending node. If a bit of an element is not set to 1 then this element is definitely not part of the other nodes set. The probability can be adjusted through the size of the array. The larger the array the lower the chance for false positives.</p> <p> </p>"},{"location":"themes/Bloom%20Filters%20%26%20Set%20Unification/#counting-bloom-filter-cbf","title":"Counting Bloom Filter (CBF)","text":"<p>Bloom filters where buckets (array fields) hold positive integers instead of only 0 and 1. This means that elements can also be removed. This leads to the possibility of false negatives. This can happen when an element, which was not previously added, is removed from the CBF. </p> <p>The receiver of a CBF can subtract all the elements from its set and when the CBF ends up being negative, the CBF represents the elements that are missing in the other nodes set.</p>"},{"location":"themes/Bloom%20Filters%20%26%20Set%20Unification/#invertible-bloom-filter-ibf","title":"Invertible Bloom Filter (IBF)","text":"<p>Extension of CBF. They allow negative counts and they store XOR-sums of the elements hashes in the buckets. This allows extraction of elements from the IBF and the construction of a symmetric difference.</p> <p>see Video</p> <p>Extraction</p> <ol> <li>Chose a pure bucket (bucket with count 1) and read pure hash</li> <li>Based on hash you find out which other buckets are used</li> <li>XOR the sum of hashes with the pure hash which removes / extract the hash from the sum. The result is the element itself information if the element is missing in my own set or in the other nodes set (don't know where this information is supposed to come from)</li> <li>Hopefully more pure buckets will have formed to extract more elements</li> <li>Repeat until all elements are successfully extracted (IBF should be all 0). If not, the extraction failed and the process has to be restarted with a larger IBF.</li> </ol> <p>Symmetric Difference</p> <p>The symmetric difference can be calculated out of two IBFs from two nodes. It's an XOR of the two IBFs and the result is an IBF of the elements which are missing in the other set. After having calculated the diff, extraction can be applied because it's more likely to find buckets with count 1. If there are no buckets with 1 or if other conflicts occur the size of the array can be increased.</p> <p></p> <p>The advantage of IBFs is that the size of the actual set does not matter. Only the size of the diff matters. The larger the diff the larger the IBF has to be.</p> <p>To understand Bloom filters the RFC about Byzantine Fault Tolerant Set Reconciliation was implemented and can be found on GitHub. The implementation is not thought to be ready to use but show the basic principles and the process. It makes simplifications and might not follow the standard perfectly due to misunderstanding or laziness.</p>"},{"location":"themes/Bloom%20Filters%20%26%20Set%20Unification/#set-union-protocol","title":"Set Union Protocol","text":"<p>Unify two sets in an efficient manner.</p>"},{"location":"themes/Bloom%20Filters%20%26%20Set%20Unification/#difference-estimation-strata-estimator","title":"Difference Estimation / Strata Estimator","text":"<p>Strata Estimator: Collection of IBFs is called a Strata Estimator (SE)</p> <p>Strata Estimator Creation: Create fixed number of constant-size IBFs by sampling the set.</p> <ul> <li>Stratum 1 contains \\(\\frac{1}{2}\\) of all elements</li> <li>Stratum 2 contains \\(\\frac{1}{4}\\) of all elements</li> <li>Stratum n contains \\(\\frac{1}{2^n}\\) of all elements</li> </ul> <p>Difference Estimation: To estimate the difference between two sets, you compare the IBF in each stratum. Starting from the lowest stratum, you continue until you find a stratum where the IBFs differ. The index of this stratum gives an estimate of the size of the set difference (\\(\u03b4\\)).</p>"},{"location":"themes/Bloom%20Filters%20%26%20Set%20Unification/#protocol","title":"Protocol","text":"<ol> <li>Alice sends \\(SE_{Alice}\\) to Bob  </li> <li>Bob estimates the set difference \\(\u03b4\\)  (Comparing against \\(SE_{Bob}\\))</li> <li>Bob computes \\(IBF_{Bob}\\) with size \\(\u03b4\\) and sends it to Alice </li> <li>Alice computes \\(IBF_{Alice}\\) </li> <li>Alice computes \\(IBF_{diff} = SymDiff (IBF_{Alice}, IBF_{Bob})\\)</li> <li>Alice extracts element hashes from \\(IBF_{diff}\\) . <ul> <li>b = \\(left\\) \u21d2Send element to Bob</li> <li>b = \\(right\\) \u21d2 Send element request to to Bob  </li> <li>b = \\(fail\\) \u21d2 Send larger IBF (double the size) to Bob, go to (3.) with switched roles </li> <li>b = \\(done\\) \u21d2 We\u2019re done</li> </ul> </li> </ol> <p>links: AC1 TOC - Blockchain - Index</p>"},{"location":"themes/CBC%20Attack/","title":"CBC Attack","text":"<p>links: AC1 TOC - From Symmetric Encryption to Secure Channels - Index</p>"},{"location":"themes/CBC%20Attack/#attacking-cbc-stateful-iv","title":"Attacking CBC stateful IV","text":"<p>In a chosen plaintext attack, an attacker can choose a plaintext and observe the resulting ciphertext. In the case of a stateful IV, if the attacker can predict the IV that will be used (for example, because they know the previous ciphertext), they can choose a plaintext that, when XORed with this predicted IV, results in a specific block that they want to encrypt. This allows them to get the ciphertext for any block of their choosing.</p> <p>In other words:</p> <p>If you guess the plaintext corresponding to\u00a0any\u00a0ciphertext block you have seen before, and can predict a future IV, you can verify your guess by submitting a suitable message to be encrypted with that IV. Obviously, that could be bad if you knew the plaintext to be either \"yes\" or \"no\", and only need to find out which one it is.</p> <p>Extract cookies that were sent over HTTPS: BEAST</p> <p>links: AC1 TOC - From Symmetric Encryption to Secure Channels - Index</p>"},{"location":"themes/CCA-Security/","title":"CCA-Security","text":"<p>links: AC1 TOC - Private Key Encryption - Modern Cryptography MOC - Index</p> <p>Assume we have an active adversary which observes a ciphertext \\(c\\). An attacker who can tamper with the communication can modify \\(c\\) to generate another ciphertext \\(c'\\) and send it to the receiver. The receiver will then decrypt \\(c'\\) to get \\(m'\\) (if \\(m' \\neq m\\) and \\(m' \\neq \\perp\\), this is a violation of integrity). What is of interest to us here, however, is the potential impact on secrecy. In particular, if the attacker learns partial information about \\(m'\\), might that reveal information about the original message \\(m\\)?</p> <p>This type of attack, in which an adversary causes a receiver to decrypt ciphertexts that the adversary generates, is called a chosen-ciphertext attack. Chosen-ciphertext attacks are possible, in principle, any time an attacker has the ability to inject traffic on the channel between the sender and receiver.</p> <p>Example: imagine a client sending encrypted messages to a server. If an adversary can impersonate the client and send ciphertexts to the server that appear to originate from the client, the server will decrypt those ciphertexts and the adversary may learn something about the result.</p>"},{"location":"themes/CCA-Security/#padding-oracle-attacks","title":"Padding-Oracle Attacks","text":"<p>The adversary can send arbitrary ciphertexts to the padding oracle (e.g. a server) and learn (based on whether a \"bad padding\" error is returned) whether the underlying encoded data is padded correctly or not. It enables an adversary to completely recover the original message corresponding to any ciphertext of its choice.</p> <p>Padding oracle attacks can be quite powerful because they exploit vulnerabilities in the padding validation process, allowing attackers to decrypt encrypted data without knowledge of the encryption key.</p>"},{"location":"themes/CCA-Security/#non-malleability","title":"Non-Malleability","text":"<p>CCA-security implies a very important property called non-malleability.</p> <p>A non-malleable encryption scheme has the property that if the adversary modifies a given ciphertext, the result decrypts to a plaintext that bears no relation to the original one.</p>"},{"location":"themes/CCA-Security/#authenticity","title":"Authenticity","text":"<p>IND-CCA itself does not provide authenticity. CCA only requires that an attacker cannot determine which of two different plaintexts a given ciphertext corresponds to. Authenticity cannot be provided because under IND-CCA an attacker is still able to create a new valid ciphertext.</p> <p>Example from slides</p> <p>CTR schemes are IND-CCA insecure:</p> <p>\u201cSay \\(\u27e8r,C\u27e9\\) is a ciphertext of some \\(l\\)-bit message \\(M\\), and we flip bit i of \\(C\\), resulting in a new ciphertext \\(\u27e8r,C\u2032\u27e9\\). Let \\(M\u2032\\) be the message obtained by decrypting the new ciphertext. Then \\(M\u2032\\) equals \\(M\\) with the i-th bit flipped. Thus, by making a decryption oracle query of \\(\u27e8r,C\u2032\u27e9\\) one can learn \\(M\u2032\\) and thus \\(M\\).\u201d</p> <p>\u2014 Symmetric Encryption by Mihir Bellare and Phillip Rogaway</p> <p>links: AC1 TOC - Private Key Encryption - Modern Cryptography MOC - Index</p>"},{"location":"themes/CPA%20vs.%20CCA/","title":"CPA vs. CCA","text":"<p>links: AC1 TOC - Private Key Encryption - AC1 TOC - From Symmetric Encryption to Secure Channels - Index</p>"},{"location":"themes/CPA%20vs.%20CCA/#comparison","title":"Comparison","text":"<p>Similarities</p> <ul> <li>Both are attacker models</li> <li>Attacker can chose inputs and observe corresponding outputs</li> </ul> <p>Differences</p> <ul> <li>In CPA the attacker does not have access to a decryption oracle while CCA attacker does</li> <li>IND-CCA is a stronger security model</li> </ul> <p>links: AC1 TOC - Private Key Encryption - AC1 TOC - From Symmetric Encryption to Secure Channels - Index</p>"},{"location":"themes/CPA-Security/","title":"CPA-Security","text":"<p>links: AC1 TOC - Private Key Encryption - Modern Cryptography MOC - Index</p>"},{"location":"themes/CPA-Security/#general-definition","title":"General definition","text":"<p>The attacker can e.g. influence and observe what messages get encrypted (the adversary has access to an encryption oracle). At some later point in time, the attacker observes a ciphertext corresponding to some unknown message encrypted using the same key \\(k\\). Let us even assume that the attacker knows that \\(m\\) is one of two possibilities \\(m_0, m_1\\). Security against CPA means that even in this case the attacker cannot tell which of those two messages was encrypted with probability significantly better than random guessing.</p> <p>Example</p> <p>A simple example is given by an attacker typing on a terminal, which in turn encrypts everything the adversary types using a key (unknown to the attacker) shared with a remote server. Here the attacker exactly controls what gets encrypted, and the encryption scheme should still reveal nothing when it is used\u2014with the same key\u2014to encrypt data typed by another user.</p> <p>Take aways</p> <ul> <li>CPA-security is nowadays the minimal notion of security an encryption scheme should satisfy</li> <li>Any private-key encryption scheme that is CPA-secure is also CPA-secure for multiple encryptions</li> </ul>"},{"location":"themes/CPA-Security/#indistinguishability","title":"Indistinguishability","text":"<p>The most important requirement which is needed for a CPA secure cipher is the indistinguishability of ciphertexts. It is defined by Lindell &amp; Katz (p. 73) as follows:</p> <p>If you give an attacker access to an encryption oracle as well as two plaintext and one of the plaintext ciphertexts. Now the attacker shall not be able to decide which plaintext was encrypted with a probability much higher than 50% (the deviation must be negligible). Assuming the attacker has access to the encryption oracle all the time.</p>"},{"location":"themes/CPA-Security/#constructing-a-cpa-secure-encryption-scheme","title":"Constructing a CPA-Secure Encryption Scheme","text":""},{"location":"themes/CPA-Security/#pseudorandom-functions-and-permutations","title":"Pseudorandom Functions and Permutations","text":"<p>Pseudorandom functions (PRFs) generalize the notion of pseudorandom generators. Now, instead of considering \"random-looking\" strings we consider \"random-looking\" functions.</p> <p>A pseudorandom function is a keyed function \\(F\\) such that \\(F_k\\) (for uniform \\(k \\in {0, 1}^n\\)) is indistinguishable from \\(f\\) (for uniform \\(f \\in Func_n\\))</p> <ul> <li>An example</li> <li>Similarity Block Ciphers and PRFs</li> </ul>"},{"location":"themes/CPA-Security/#cpa-security-from-a-pseudorandom-function","title":"CPA-Security from a Pseudorandom Function","text":"<ul> <li>uses randomized encryption: applying a pseudorandom function to a random value \\(r \\in {0,1}^n\\) </li> <li>the ciphertext includes both the result as well as \\(r\\) (to enable the receiver to decrypt)</li> <li>a fresh pseudorandom pad - that depends on \\(r\\) - is used each time a message is encrypted</li> <li>for any key \\(k\\), every message \\(m\\) has \\(2^n\\) corresponding ciphertexts</li> <li>encryption for fixed length messages</li> <li>Example: \\(r\\) is the IV/nonce, the seed/key is used for the pseudorandom function (as in the EAV construction)</li> </ul> <p>Construction</p> <ul> <li>\\(Enc\\): \\(c := \\langle r, F_k(r) \\oplus m \\rangle\\)</li> <li>\\(Dec\\): ciphertext \\(c = \\langle r,s \\rangle\\) output message \\(m := F_k(r) \\oplus s\\)</li> </ul>"},{"location":"themes/CPA-Security/#definitions","title":"Definitions","text":"<ul> <li>\\(Func_n\\): set of all functions mapping \\(n\\)-bit strings to \\(n\\)-bit strings.</li> </ul> <p>links: AC1 TOC - Private Key Encryption - Modern Cryptography MOC - Index</p>"},{"location":"themes/Card%20Verifiable%20Certificates/","title":"Card Verifiable Certificates","text":"<p>links: AC2 TOC - X.509 - Index</p> <p>Due to the reduced storage and memory resources of a smartcard, X.509 certificates are often too large and operation may be too complex.</p>"},{"location":"themes/Card%20Verifiable%20Certificates/#details","title":"Details","text":"<ul> <li>CVC are not compatible with X.509 certificates.  </li> <li>CVC are used for authentication only. </li> <li>CVC are encoded in Type-Length-Value (TLV) format.</li> </ul> <p>The minimal set of attributes is: </p> <ul> <li>Issuer</li> <li>Subject</li> <li>Public key</li> <li>Access rights</li> <li>Validity period</li> </ul> <p>To save space and time only the signature value will be stored and transmitted rather than the signature value together with the plaintext content. This is realised according to the ISO 9796 signature scheme with message recovery:</p> <ul> <li>ISO 9796 uses RSA (amongst others) as signature algorithm, which has message recovery properties.</li> <li>The message itself is only readable/recoverable by verifying the signature.</li> <li>In other words: the message is stored/transmitted \"encrypted\" with the private key and can be decrypted using the public key.</li> </ul> <p>links: AC2 TOC - X.509 - Index</p>"},{"location":"themes/Certificate%20Levels/","title":"Certificate Levels","text":"<p>links: AC2 TOC - X.509 - Index</p>"},{"location":"themes/Certificate%20Levels/#user-certificates","title":"User Certificates","text":"<ul> <li>Class 4 / D - No identity check (at most per e-mail address only) purpose: digital signature, authentication, encipherment</li> <li>Class 3 / C - low level identity check purpose: digital signature, authentication, encipherment</li> <li>Class 2 / B - high level identity check of natural person and enterprises, called: advanced (regulated) certificates purpose: digital signature, authentication, (encipherment)</li> <li>Class 1 / A - highest level identity check, for natural person only mandatory for qualified certificates purpose: non-repudiation only (e.g. in Switzerland ZertES and TAV of BAKOM)</li> </ul>"},{"location":"themes/Certificate%20Levels/#server-certificates","title":"Server Certificates","text":"<ul> <li>Domain Validation (DV): Automated issuing, WHOIS check &amp; simple confirmation (e.g. by e-mail, local agent, etc.) \\(\\rightarrow\\) https://letsencrypt.org</li> <li>Organization Validation (OV): Average examination of claimant. Provides higher level of trustworthiness, thanks to better validation of organisation.</li> <li>Extended Validation (EV): Strong identity and authenticity verification based on CAB-Forum guidelines, operated by WebTrust for auditing CA\u2019s to be accredited for EV-Certificate issuance \\(\\rightarrow\\) certificates have an additional subject information and a policy identifier (OID 2.23.140.1.1)</li> </ul>"},{"location":"themes/Certificate%20Levels/#the-certificate-authority-browser-cab-forum","title":"The Certificate Authority Browser (CAB) Forum","text":"<p>The CAB forum is a voluntary group of CA\u2019s and Browser suppliers with the goal to establish and enforce standards for certificate issuance and processing.</p> <p>links: AC2 TOC - X.509 - Index</p>"},{"location":"themes/Certificate%20Standards/","title":"Certificate Standards","text":"<p>links: AC2 TOC - X.509 - Index</p> <ul> <li>X.509 Certificates (for public keys)</li> <li>Attribute Certificates (bind set of descriptive data items to a subject name)</li> <li>PGP Certificates (Pretty Good Privacy. Web of Trust)</li> <li>CV Certificates (Card Verifiable Certificates)</li> </ul> <p>X.509 certificates are not compatible to OpenPGP or CVC.</p>"},{"location":"themes/Certificate%20Standards/#x509","title":"X.509","text":"<p>The X.509 Certificates Authentication Framework designed by CCITT/ITU for the purpose of securing the X.500 Directory included a certificate specification where the format and data type remain important until today.</p> <p>Used in:</p> <ul> <li>The official IETF PKI standard: PKIX (Public Key Infrastructure for X.509)</li> <li>The (older) industrial standard: PKCS (Public Key Cryptography Standards)</li> </ul> <p>X.509 is an ITU standard \u2014 but also:</p> <ul> <li>TLS servers (and sometimes clients) are identified by public key (e.g. mTLS)</li> <li>Public keys are certified by certificate authorities  </li> <li>X.509 certificates are the format used for certificates (defines not how to distribute over network)</li> <li>Any certificate authority can certify keys for any domain (in contrast to DNSSEC, only parent zone can certify a child zone)</li> </ul> <p>Also used by S/MIME</p>"},{"location":"themes/Certificate%20Standards/#pkcs","title":"PKCS","text":"<ul> <li>see PKCS</li> <li>Published by RSA</li> <li>Goal was to promote public-key techniques</li> <li>Not open standards \\(\\rightarrow\\) Industrial standards<ul> <li>Most were moved into PKIX</li> </ul> </li> </ul>"},{"location":"themes/Certificate%20Standards/#x500","title":"X.500","text":"<p>X.500 entries are based on a Distinguished Name (DN), which is part of a global unique namespace. (Hint: LDAP)</p> <p>Hierarchy: </p> <ol> <li>Roots</li> <li>Countries</li> <li>Organisations</li> <li>Organisational units</li> <li>People</li> </ol> <p>Root \\(\\rightarrow\\) USA \\(\\rightarrow\\) Google \\(\\rightarrow\\) Staff \\(\\rightarrow\\) John Doe</p> <pre><code>CN = Thawte Personal Freemail Issuing CA,\nO = Thawte Consulting (Pty) Ltd, C = ZA\n</code></pre>"},{"location":"themes/Certificate%20Standards/#asn1-and-der","title":"ASN.1 and DER","text":"<p>Abstract Syntax Notation One (ASN.1):</p> <ul> <li>Defined by the ITU-T</li> <li>Specifies type and structure of data:<ul> <li>Type of value (integer, boolean, character string, etc.)</li> <li>Structure (containment, order, options)</li> </ul> </li> <li>Does not specify encoding (representation)</li> </ul> <p>Distinguished Encoding Rules (DER):</p> <p>Provides the advantage to have a unique way of encoding each ASN.1 value.</p> <p>Privacy-Enhanced Mail (PEM) Encoding</p> <p>Base64 of DER bytestream with \"begin certificate\" and \"end certificate\" markers.</p> <pre><code>-----BEGIN CERTIFICATE-----\n\n-----END CERTIFICATE-----\n</code></pre>"},{"location":"themes/Certificate%20Standards/#object-identifiers-oids","title":"Object Identifiers (OIDs)","text":"<ul> <li>An Object Identifier (OID) is an identifier used to name an object in a hierarchically-assigned namespace \\(\\rightarrow\\) an OID number should never change!</li> <li>In the security domain, OIDs serve to name almost every object type in X.509 certificates, such as components of Distinguished Names, Algorithms, etc.</li> </ul> <p>Example: oid-info.com - oid 1.2.840.113549.1.1.5</p>"},{"location":"themes/Certificate%20Standards/#certificate-authorities-ca","title":"Certificate Authorities (CA)","text":"<ul> <li>see PKI CA</li> <li>Entities that claim to be trustworthy to verify identities and issuing public key certificates</li> <li>CAs can be organized into a directed graph</li> <li>X.509: Tree depth can be limited for a subtree (see X.509 basicConstraints Extension)</li> <li>X.509: Certificates of CAs signing intermediate-level CAs have the special \"CA\" bit set (see X.509 keyUsage Extension)</li> </ul>"},{"location":"themes/Certificate%20Standards/#self-signed-certificates","title":"Self-signed certificates","text":"<ul> <li>Signer is self  </li> <li>Allowed by TLS  </li> <li>Used to sign CA tree roots</li> </ul> <p>links: AC2 TOC - X.509 - Index</p>"},{"location":"themes/Certificates/","title":"Certificates","text":"<p>links: AC2 TOC - X.509 - Index</p>"},{"location":"themes/Certificates/#definition","title":"Definition","text":"<p>Digital certificates are data structures which bind a public key value to a subject (Identity). The binding is asserted by an issuer.</p> <p>Asymmetric Crypto uses privat/public key pairs where the public key pairs are distributed. So an attacker could just distribute forged public keys. Because of that we need to combine a public key with an identifying information and make this combination tamper resistant. </p> <p>The certificate contains primarily:</p> <ul> <li>Identity and attributes of the subject to be protected.  </li> <li>Identity and attributes of the issuer of the certificate.  </li> <li>Public key of the subject, used for crypto operations.  </li> <li>Signature from an issuer, covering all certificate content. (Tamper resistance)</li> </ul> <p>links: AC2 TOC - X.509 - Index</p>"},{"location":"themes/Complexity%20Classes/","title":"Complexity Classes","text":"<p>links: AC2 TOC - Number-Theoretic Algorithms and Hardness Assumptions - Index</p> <p>The following classes can be applied to time based complexity as well as space based complexity. In practical computing polynomial complexity \\(\\mathcal{O}(n^k)\\) is the limit of what we can calculate. Everything more complex than this is a hard problem.</p>"},{"location":"themes/Complexity%20Classes/#polynomial-p","title":"Polynomial (P)","text":"<p>P is the class that represents the set of all decision problems that can be solved in polynomial time. Meaning a complexity below or equal to \\(\\mathcal{O}(n^k)\\).</p>"},{"location":"themes/Complexity%20Classes/#nondeterministic-polynomial-np","title":"Nondeterministic Polynomial (NP)","text":"<p>NP is the class of problems for which a solution can be verified in polynomial time - that is, efficiently - even though the solution may be hard to find.</p> <p>Examples</p> <ul> <li>Factoring Problem (assumed)<ul> <li>One reason: NP-complete problems can have one solution, but can also have more than one solution, or no solution at all. In contrast, factoring always has exactly one solution.</li> </ul> </li> </ul>"},{"location":"themes/Complexity%20Classes/#np-complete","title":"NP-Complete","text":"<p>The hardest problems in the class NP are called NP-complete; we don't know how to solve these problems in polynomial time. NP's hardest problems are all equally hard. If you can solve any NP-complete problem efficiently, you can solve all of them, as well as all problems in NP.</p> <p>Not all instances of NP-complete problems are actually hard to solve. (Because they are small or have a specific structure). Being NP-complete doesn't mean that all instances of a given problem are hard, but that as the problem size grows, many of them are. </p> <p>Examples</p> <ul> <li>Traveling Salesman Problem (decision version)<ul> <li>Given a length L, the task is to decide whether the graph has a tour of at most L</li> </ul> </li> <li>Knapsack Problem (decision version)<ul> <li>Can a value of at least V be achieved without exceeding the weight W?</li> </ul> </li> <li>Graph Colouring Problem<ul> <li>Can the graph be coloured using X or fewer colours?</li> </ul> </li> <li>Clique Problem</li> <li>Boolean Satisfiability Problem (SAT)</li> </ul>"},{"location":"themes/Complexity%20Classes/#np-hard","title":"NP-Hard","text":"<p>We say that a problem is NP-hard when it's at least as hard as NP-complete problems.  Problems that are NP-hard do not have to be elements of NP; indeed, they may not even be decidable.</p> <p>The primary difference between NP-complete and NP-hard is that NP-complete problems are in NP (i.e., a solution can be verified quickly), while NP-hard problems are not necessarily in NP. All NP-complete problems are NP-hard, but the converse is not necessarily true.</p> <p>Examples (not part of NP-complete)</p> <ul> <li>Traveling Salesman Problem (Optimisation version)</li> <li>Knapsack Problem (Optimisation version)</li> <li>Graph Colouring Problem (Optimisation version)</li> </ul>"},{"location":"themes/Complexity%20Classes/#overview","title":"Overview","text":""},{"location":"themes/Complexity%20Classes/#p-vs-np","title":"P vs. NP","text":"<p>This one is the most famous problem in computer science, and one of the most important outstanding questions in the mathematical sciences.</p> <p>It's clear that P is a subset of NP. The open question is whether or not NP problems have deterministic polynomial time solutions. It is largely believed that they do not. So we assume: \\(P \\neq NP\\).</p> <p>links: AC2 TOC - Number-Theoretic Algorithms and Hardness Assumptions - Index</p>"},{"location":"themes/Complexity%20Notation/","title":"Complexity Notation","text":"<p>links: AC2 TOC - Number-Theoretic Algorithms and Hardness Assumptions - Index</p>"},{"location":"themes/Complexity%20Notation/#different-algorithmic-complexities","title":"Different algorithmic complexities","text":"<p>From fast to slow</p> <ul> <li>\\(\\mathcal{O}(1)\\) - Constant time</li> <li>\\(\\mathcal{O}(\\log n)\\) - Logarithmic time</li> <li>\\(\\mathcal{O}(\\sqrt{n})\\) - Square root time</li> <li>\\(\\mathcal{O}(n)\\) - Linear time</li> <li>\\(\\mathcal{O}(n \\log n)\\) - Linear logarithmic time</li> <li>\\(\\mathcal{O}(n^2)\\) - Quadratic time</li> <li>\\(\\mathcal{O}(n^3)\\) - Cubic time</li> <li>\\(\\mathcal{O}(n^k)\\) - Polynomial time</li> <li>\\(\\mathcal{O}(2^n)\\) - Exponential time</li> <li>\\(\\mathcal{O}(n!)\\) - Factorial time</li> <li>\\(\\mathcal{O}(n^n)\\) - \"Crazy\" exponential time</li> </ul> <p>From the slides: </p>"},{"location":"themes/Complexity%20Notation/#notation","title":"Notation","text":"<p>For some function \\(f(n)\\)</p> <ul> <li>Big O notation: \\(\\mathcal{O}(f(n))\\) - Upper bound. Worst case scenario. (Less or equal)</li> <li>Little o notation: \\(\\mathcal{o}(f(n))\\) - Upper bound. Worst case scenario. (Strictly less)</li> <li>Big Omega notation: \\(\\Omega(f(n))\\) - Lower bound. Best case scenario. (Greater or equal)</li> <li>Little omega notation: \\(\\omega(f(n))\\) - Lower bound. Best case scenario. (Strictly greater)</li> <li>Big Theta notation: \\(\\Theta(f(n))\\) - Equal. Average case scenario.</li> </ul>"},{"location":"themes/Complexity%20Notation/#master-theorem","title":"Master Theorem","text":"<p>To analyse recursive function we need the Master Theorem.</p> <p>Decrease (R1-2) the problem size by \\(k\\):</p> \\[ T(n) =  \\begin{cases}      c &amp; \\text{if } n = d \\\\      q \\times T(n-k) + f(n) &amp; \\text{if } n \\gt d \\\\  \\end{cases} \\] <p>Divide (D1-4) the problem size by \\(r\\):</p> \\[ T(n) =  \\begin{cases}      c &amp; \\text{if } n = d \\\\      q \\times T(n/r) + f(n) &amp; \\text{if } n \\gt d \\\\  \\end{cases} \\] <p></p> <p>links: AC2 TOC - Number-Theoretic Algorithms and Hardness Assumptions - Index</p>"},{"location":"themes/Complexity%20Reduction/","title":"Complexity Reduction","text":"<p>links: AC2 TOC - Number-Theoretic Algorithms and Hardness Assumptions - Index</p> <p>The expression \"P1 \\(\\leftarrow\\) P2\" refers to a reduction proof. This is a concept used to determine the difficulty of problems in relation to each other.</p> <p>The statement \"P1 \\(\\leftarrow\\) P2\" means that problem P1 can be reduced to problem P2 in polynomial time. In other words, if we have a solution for P2, we can use that solution to solve P1 in polynomial time.</p> <p>Reductions are a central concept in the theory of NP-completeness. If a problem P is known to be NP-complete and every other problem Q can be reduced to P in polynomial time (i.e., Q  \\(\\leftarrow\\) P), then Q is also NP-complete.</p> <p>So, we need some problem to which we can reduce to in order to prove NP-completeness. That's where the Cook-Levin theorem comes into play.</p>"},{"location":"themes/Complexity%20Reduction/#cooklevin-theorem","title":"Cook\u2013Levin theorem","text":"<p>The theorem states the following:</p> <p>The Boolean satisfiability problem (also known as SAT) is NP-complete.</p> <p>This was the first problem that was shown to be NP-complete. The proof does not need a reduction so we can use it as a basis for other problems.</p> <p>Boolean satisfiability problem (SAT): This is the problem of determining if there exists an assignment of true/false values to variables that makes a given Boolean expression true.</p> <p>In a bit more detail: It asks to determine if a propositional formula (syntactic formula which is well formed and has a truth value) can be made true by an appropriate assignment (\"solution\") of truth values to its variables. While it is easy to verify whether a given assignment renders the formula true, no essentially faster method to find a satisfying assignment is known than to try all assignments in succession. Cook and Levin proved that each easy-to-verify problem can be solved as fast as SAT, which is hence NP-complete.</p>"},{"location":"themes/Complexity%20Reduction/#how-does-the-proof-work","title":"How does the proof work?","text":"<p>Step 1: SAT is in NP</p> <p>First, we have to show that SAT is in NP. This is fairly straightforward: given a Boolean formula and a truth assignment for its variables, we can check in polynomial time whether the assignment makes the formula true or false. Therefore, SAT is in NP.</p> <p>Step 2: SAT is NP-Hard</p> <p>Next, we have to show that SAT is NP-hard. This is the more complex part of the proof. Essentially, it means we must demonstrate that any problem in NP can be transformed (or \"reduced\") into a SAT problem in polynomial time.</p> <p>Stephen Cook approached this by considering a nondeterministic Turing machine. He then demonstrated how one can construct a Boolean formula that simulates a computation of this machine. This formula is satisfiable if and only if the machine accepts the given input. This transformation can be done in polynomial time, so this part of the proof shows that SAT is as hard as the hardest problems in NP, meaning it's NP-hard.</p> <p>Since SAT is both in NP and NP-hard, it is NP-complete.</p>"},{"location":"themes/Complexity%20Reduction/#visualisation","title":"Visualisation","text":"<p>Visualisation of reductions to prove different NP-complete problems:</p> <p></p> <p>links: AC2 TOC - Number-Theoretic Algorithms and Hardness Assumptions - Index</p>"},{"location":"themes/Computational%20Hardness%20Assumption/","title":"Computational Hardness Assumption","text":"<p>links: AC2 TOC - Number-Theoretic Algorithms and Hardness Assumptions - RSA - Index</p>"},{"location":"themes/Computational%20Hardness%20Assumption/#one-way-functions","title":"One-Way Functions","text":""},{"location":"themes/Computational%20Hardness%20Assumption/#hardness-assumption","title":"Hardness Assumption","text":""},{"location":"themes/Computational%20Hardness%20Assumption/#the-factoring-and-rsa-assumptions","title":"The FACTORING and RSA Assumptions","text":"<p>see RSA</p>"},{"location":"themes/Computational%20Hardness%20Assumption/#discrete-logarithm-assumptions-dl","title":"Discrete Logarithm Assumptions (DL)","text":"<ul> <li>CDH: computational \\(\\rightarrow\\) calculate key</li> <li>DDH: decisional \\(\\rightarrow\\) returns true/false</li> </ul> <p>Suitable Groups for DL, CDH, DDH</p> <p></p> <ul> <li>DL can be solved easily in an additive group using the Algorithm of Euclid.</li> </ul>"},{"location":"themes/Computational%20Hardness%20Assumption/#reductions-among-computational-problems","title":"Reductions Among Computational Problems","text":"<p>While these problems are related in the sense that they all involve operations in cyclic groups and are used in public-key cryptography, they are not completely dependent on each other. For example, even if a fast factoring algorithm were discovered (which would break RSA), the DL problem would still be considered hard unless a fast algorithm for computing discrete logarithms were also discovered. Conversely, a solution to the DL problem wouldn't necessarily provide a solution to the FACTORING or RSA problems.</p> <p>RSA \\(\\propto\\) FACTORING</p> <p></p> <ul> <li>RSA is the stronger assumption (as the simpler problem)</li> </ul> <p>DDH \\(\\propto\\) CDH \\(\\propto\\) DL</p> <p></p> <ul> <li>Solving DL allows to solve CDH</li> <li>Solving CDH allows to solve DDH</li> </ul> <p>links: AC2 TOC - Number-Theoretic Algorithms and Hardness Assumptions - RSA - Index</p>"},{"location":"themes/Computational%20Security/","title":"Computational Security","text":"<p>links: Modern Cryptography MOC - Index</p>"},{"location":"themes/Computational%20Security/#general-definition","title":"General definition","text":"<p>Computational Security definitions take into account computational limits on an attacker, and allow for a small probability that security is violated.</p> <p>Relaxations relative to information-theoretic notions of security</p> <ol> <li>Security is only guaranteed against efficient adversaries that run for some feasible amount of time. If we can make the resources required to break the scheme larger than those available to any realistic attacker, however, then for all practical purposes the scheme is unbreakable.</li> <li>Adversaries can potentially succeed with some very small probability. If we can make this probability sufficiently small, we need not worry about it.</li> </ol>"},{"location":"themes/Computational%20Security/#the-concrete-approach","title":"The Concrete Approach","text":"<p>The security of a cryptographic scheme by explicitly bounding the maximum success probability of a (randomized) adversary running for some specified amount of time (or amount of computational effort).</p> <p>Conclusion</p> <ul> <li>Gives concrete guarantees for security of scheme</li> <li>concrete guarantees are difficult to provide: <ul> <li>an adversary running for 5 years can break a given scheme with probability better than \\(\\varepsilon\\) \\(\\rightarrow\\) what type of computing power does this assume? Do we have dedicated hardware for some algorithms? ...</li> </ul> </li> </ul>"},{"location":"themes/Computational%20Security/#the-asymptotic-approach","title":"The Asymptotic Approach","text":"<p>If we describing schemes abstractly, it is convenient to use the asymptotic approach. This approach, rooted in complexity theory, introduces the security parameter, denoted by \\(n\\).</p> <p>A scheme is secure, if any \\(PTT\\) adversary succeeds in breaking the scheme with at most negligible probability.</p> <p>Viewing the security parameter as the key length, this corresponds to the fact that the time required for an exhaustive-search attack grows exponentially in the length of the key.</p>"},{"location":"themes/Computational%20Security/#defining-computationally-secure-encryption","title":"Defining Computationally Secure Encryption","text":"<p>A private-key encryption scheme consists of three probabilistic polynomial-time algorithms \\((Gen, Enc, Dec)\\) such that:</p> <ol> <li>\\(k \\leftarrow Gen(1^n)\\): the key-generation algorithm takes as input \\(1^n\\) (\\(n\\) is security parameter)</li> <li>\\(c \\leftarrow Enc_k(m)\\): the encryption algorithm takes as input a key \\(k\\) and a plaintext message \\(m\\). \\(Enc\\) may be randomized.</li> <li>\\(m := Dec_k(c)\\): the decryption algorithm takes as input a key \\(k\\) and a ciphertext \\(c\\) and outputs a message or an error (denoted by \\(\\bot\\))</li> </ol>"},{"location":"themes/Computational%20Security/#definitions","title":"Definitions","text":"<ul> <li>\\(PTT\\) stands for Probabilistic polynomial-time</li> <li>Negligible success probability: A negligible function is one that is asymptotically smaller than any inverse polynomial function \\(f(n) &lt; \\frac{1}{p(n)}\\)</li> </ul> <p>links: Modern Cryptography MOC - Index</p>"},{"location":"themes/Computer%20Security%20Dictionary/","title":"Computer Security Dictionary","text":"<p>links: AC1 TOC - Intro - Index</p> <p>Information Security</p> <p>Information security is concerned with the preservation of confidentiality, integrity and availability of information. In addition, properties such as authenticity, accountability, non-repudiation and reliability can also be involved \u2013ISO/IEC 27000:2016</p> <p>Information assets</p> <p>Information has monetary value. Thus we speak about information assets.</p> <p>CIA</p> <ul> <li>Confidentiality</li> <li>Integrity</li> <li>Availability</li> </ul> <p>AAA</p> <ul> <li>Authenticity</li> <li>Accountability</li> <li>Auditability (Non-repudiation)</li> </ul> <p>Risk</p> <p>Risk is value (cost of potential damage) multiplied by the probability of this damage occurring.</p> <p>Vulnerability</p> <p>Inability of a system to withstand the effects of a hostile environment.</p> <p>Threat</p> <p>Possible danger that might exploit a vulnerability.</p> <p>Attack</p> <p>Attempt to expose, alter, disable, destroy, steal or gain unauthorized access to or make unauthorized use of an information asset.</p> <p>Exploit</p> <p>Action that takes advantage of a vulnerability.</p> <p>Information security incident</p> <p>Event that could lead to loss of control over an information asset.</p> <p>Cryptography ^51231c</p> <p>Practice and study of techniques for secure communication in the presence of adversaries.</p> <p></p> <p>Cryptographic primitives</p> <p>Primitives are the building blocks for cryptographic protocols.</p> <p>Keys</p> <p>Keys are short information assets used for certain cryptographic operations.</p> <p>Kerckhoffs\u2019 principle ^8ae895</p> <p>A cryptosystem should be secure even if everything about the system, except the key, is public knowledge.</p> <p>Brute-force</p> <p>A brute-force attack involves trying all the keys (until the one that works is found).</p> <p>Entropy</p> <p>Entropy describes the information content of a key or message. A key with 128 bits of entropy requires \\(2^{128}\\) brute-force attempts.</p> <p>Digital signatures</p> <p>Cryptographic method to add non-repudiation and message integrity features to an information asset.</p> <p>Encryption</p> <p>Encryption is the process of encoding of a message in such a way that only authorized parties can access (\u201cdecrypt\u201d) it.</p> <p>Attacker origins</p> <ul> <li>Insider  </li> <li>Ex-insider (\u201cdisgruntled former employee\u201d) </li> <li>Competitor  </li> <li>Hacktivist  </li> <li>Criminal  </li> <li>State actor  </li> <li>Researcher</li> </ul> <p>Attacker objectives</p> <ul> <li>Fame</li> <li>Stealing information (business secrets, credentials)</li> <li>Modifying information (e.g. bank transactions)</li> <li>Abusing infected systems (e.g. spamming)</li> <li>Attacking other systems (origin obfuscation)</li> <li>Hiding (avoid detection, achieve long-term persistence)</li> <li>Contact command and control (C2) for instructions</li> </ul> <p>Vulnerability origins</p> <ul> <li>Hardware</li> <li>Software</li> <li>Humans</li> <li>Environment</li> </ul> <p>Attack strategies</p> <ul> <li>Large scale</li> <li>Targeted</li> </ul> <p>Defense strategies</p> <ul> <li>Access control (physical, logical)</li> <li>Deterrance (legal, counter-attacks, auditing, accounting)</li> <li>Redundancy</li> <li>Obfuscation</li> <li>Comprehension (simplification, transparency, education) </li> <li>Monkey wrench / havoc</li> <li>Defense-in-depth</li> </ul> <p>Protocols</p> <ul> <li>\u201cA protocol is a series of steps, involving two or more parties, designed to accomplish a task.\u201d</li> <li>Everyone involved must know the steps in advance and agree to follow it.</li> <li>The protocol must be complete and unambiguous.</li> <li>For cryptographic protocols, it should not be possible to do more or learn more than what is specified in the protocol.</li> </ul> <p>Dramatis Personae</p> <ul> <li>Alice, Bob, Carol and Dave</li> <li>Eve \u2013 Eavesdropper</li> <li>Mallory \u2013 Malicious active attacker</li> <li>Trent \u2013 Trusted arbitrator</li> <li>Walter \u2013 Warden</li> <li>Peggy \u2013 Prover</li> <li>Victor \u2013 Verifier</li> </ul> <p>Attack Personae</p> <ul> <li>Eavesdroppers  </li> <li>Passive cheaters  </li> <li>Active cheaters  </li> <li>Real-world adversaries \u2013 Mallory</li> </ul> <p>Efficiency</p> <ul> <li>Number of steps in protocol</li> <li>Size of messages</li> <li>Conflict resolution cost</li> </ul> <p>Statistics</p> <ul> <li>mathematical techniques for drawing general conclusions from data samples </li> <li>means, medians, distributions, samples, significance, bias  </li> <li>resulting aggregates may have meaning, or not  </li> <li>no hard assurances about individual inputs, only probabilities</li> </ul> <p>Machine Learning</p> <ul> <li>Ask computer to figure out which inputs matter!</li> <li>Different techniques:<ul> <li>Supervised learning: given example inputs and desired outputs, derive \u201cgeneral rule\u201d</li> <li>Unsupervised learning: find hidden structure in data  </li> <li>Reinforecment learning: algorithm selects actions, receives feedback based on result(s)  </li> </ul> </li> <li>Shared outcome: data in, statistical predictors out</li> </ul> <p>links: AC1 TOC - Intro - Index</p>"},{"location":"themes/Credit%20Card%20Surveillance/","title":"Credit Card Surveillance","text":"<p>links: AC2 TOC GNU Taler - Index</p>"},{"location":"themes/Credit%20Card%20Surveillance/#issues-with-credit-cards","title":"Issues with Credit Cards","text":"<ul> <li>When you pay by CC, the information includes your name  </li> <li>When you pay in person with CC, your location is also known </li> <li>You often have no alternative payment methods available  </li> <li>You hardly ever can use someone else\u2019s CC  </li> <li>Anonymous prepaid cards are difficult to get and expensive  </li> <li>Payment information is typically stored for at least 6 years</li> </ul>"},{"location":"themes/Credit%20Card%20Surveillance/#3d-secure","title":"3D secure","text":"<p>A nightmare. (Complicated, no privacy, customer is liable, exclusion of vendors)</p>"},{"location":"themes/Credit%20Card%20Surveillance/#issues-with-banks","title":"Issues with Banks","text":"<ul> <li>Global tech companies push oligopolies </li> <li>Privacy and federated finance are at risk</li> <li>Economic sovereignty is in danger</li> </ul>"},{"location":"themes/Credit%20Card%20Surveillance/#examples","title":"Examples","text":"<ul> <li>Bank of International Settlements (CBDC - Central Bank Digital Currency without privacy)</li> <li>Emergency Act Canada (Freeze bank accounts)</li> </ul> <p>links: AC2 TOC GNU Taler - Index</p>"},{"location":"themes/Cryptoanalysis/","title":"Cryptoanalysis","text":"<p>links: AC1 TOC - Security &amp; Cryptography - Index</p> <p>The art or process of\u00a0deciphering\u00a0coded\u00a0messages\u00a0without\u00a0being\u00a0told\u00a0the\u00a0key.</p> <ul> <li>Brute Force Attack</li> <li>Indistinguishability (IND)</li> <li>Non-Malleability (NM)</li> <li>Ciphertext only Attack (CoA)</li> <li>Known Plaintext Attack (KPA)</li> <li>Chosen Plaintext Attack (CPA)</li> <li>Chosen Ciphertext Attack (CCA)</li> </ul> <p>If the cipher holds against this it is IND-CPA secure.</p>"},{"location":"themes/Cryptoanalysis/#cpa","title":"CPA","text":"<ul> <li>see also CPA-Security</li> </ul> <p>CPA means that the attacker is able to obtain the encryption of any message of their choosing. In symmetric key cryptography this models tricking the enemy into using certain words. In asymmetric cryptography the attacker can use the public key to encrypt whatever they want, and this is the simplest form of attack you can imagine.</p> <p>IND-CPA immediately implies some sort of randomised ciphertext: if encryption was deterministic, the attacker would just encrypt the two plaintexts of their choice by themself, then compare those against the challenge received.</p> <p>Textbook RSA is not secure under CPA (due to a lack of randomization), but ElGamal is. AES in ECB mode is not (due to lack of an IV), but in CBC/CTR mode it is.</p>"},{"location":"themes/Cryptoanalysis/#cca","title":"CCA","text":"<ul> <li>see also CCA-Security</li> </ul> <p>CCA\u00a0means the attacker is able to obtain the decryption of any ciphertext of their choosing,\u00a0except\u00a0the challenge. It models the case where tricking an enemy into decrypting a lot of ciphertexts for you will not help you into breaking any others.</p> <p>One consequence of CCA security is that the ciphertext should be tamper-proof (non malleable). If it is not, then the attacker can slightly alter the challenge ciphertext in a predictable way, then try to get the decryption of this altered challenge.</p> <p>RSA and ElGamal are not CCA secure due to their homomorphic properties, but RSA-OAEP is. AES in CTR mode is not CCA secure (flipping a bit in the ciphertext means flipping a bit in the plaintext), but AES in and AEAD mode like GCM is.</p> <p>IND-CCA is a really strong notion of security, and the golden standard these days. There are standard constructions to turn any IND-CPA construction into an IND-CCA construction.</p> <p>links: AC1 TOC - Security &amp; Cryptography - Index</p>"},{"location":"themes/Cryptographic%20Commitment/","title":"Cryptographic Commitment","text":"<p>links: AC1 TOC - Random Oracle &amp; Applications - Index</p>"},{"location":"themes/Cryptographic%20Commitment/#definition","title":"Definition","text":"<p>A commitment scheme allows one party to \"commit\" to a value \\(m\\) by sending a commitment \\(com\\) and then to reveal \\(m\\) (by \"opening\" the commitment) at a later point in time.</p> <ul> <li>Hiding: the commitment \\(com\\) reveals nothing about \\(m\\)</li> <li>Binding: it is infeasible for the committer to output a commitment \\(com\\) that it can later \"open\" as two different messages \\(m, m'\\) (commitment is truly on one value).</li> </ul>"},{"location":"themes/Cryptographic%20Commitment/#properties","title":"Properties","text":"<ul> <li>Perfect hiding: The commitment provides unconditional security, i.e. is completely hidden from any adversary, regardless of the computational resources available to them.</li> <li>Conditional hiding: The commitment is hard to be opened/ revealed if the secret is unknown. The committed value is hidden in such a way that an adversary with limited computational resources cannot determine the value with a probability that is significantly better than random guessing.</li> <li>Perfect binding: The commitment can only be opened/ revealed to a single \\(m\\). The committed value is perfectly secure against any type of change-attack, including those using unbounded computational power. It is impossible to change it without being detected.</li> <li>Conditional binding: The commitment is hard to be changed without being detected. The committed value is bound in such a way that an adversary with limited computational resources cannot change the value without being detected.</li> </ul> <p>Can you achieve perfect hiding and binding at the same time?</p> <p>The reason a scheme can't be both perfectly hiding and perfectly binding is essentially due to an information-theoretic argument. If it's perfectly hiding, an attacker with unbounded computational power could try every possible value until they found one that matched the commitment, thereby breaking the binding. On the other hand, if it's perfectly binding, then it must be possible, in theory, to extract the committed value from the commitment, thereby breaking the hiding property.</p>"},{"location":"themes/Cryptographic%20Commitment/#example","title":"Example","text":"<p>Example of a commitment scheme based on a sponge function:</p> <ul> <li>\\(m\\): message</li> <li>\\(r\\): random bit string</li> <li>\\(c\\): output/ commitment</li> <li>function: \\(c := H(r \\parallel m)\\)</li> </ul> <p></p> <p>links: AC1 TOC - Random Oracle &amp; Applications - Index</p>"},{"location":"themes/Cryptographic%20Hash%20Functions/","title":"Cryptographic Hash Functions","text":"<p>links: AC1 TOC - Random Oracle &amp; Applications - Modern Cryptography MOC - Index</p>"},{"location":"themes/Cryptographic%20Hash%20Functions/#md5","title":"MD5","text":"<ul> <li>applying the Davies-Meyer &amp; Merkle-Damg\u00e5rd Transform construction</li> <li>not secure anymore, a collision can be found under one minute</li> <li>128-bit output length</li> <li>is prone to length-extension attacks</li> </ul>"},{"location":"themes/Cryptographic%20Hash%20Functions/#sha","title":"SHA","text":"<p>Secure Hash Algorithms (SHA) refers to a set of cryptographic hash functions standardized by NIST.</p>"},{"location":"themes/Cryptographic%20Hash%20Functions/#sha-1","title":"SHA-1","text":"<ul> <li>applying the Davies-Meyer &amp; Merkle-Damg\u00e5rd Transform construction</li> <li>160-bit output length</li> <li>collisions was found, not recommended anymore</li> <li>see attack SHAttered</li> <li>is prone to length-extension attacks</li> </ul>"},{"location":"themes/Cryptographic%20Hash%20Functions/#sha-2","title":"SHA-2","text":"<ul> <li>applying the Davies-Meyer &amp; Merkle-Damg\u00e5rd Transform construction</li> <li>hash family with following hash functions: SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, SHA-512/256</li> <li>currently appear to be save and thus recommended when collision-resistant hashing is needed (output length 224 is not recommended anymore)</li> <li>SHA-256 and SHA-512 are prone to length-extension attacks</li> </ul>"},{"location":"themes/Cryptographic%20Hash%20Functions/#sha-3","title":"SHA-3","text":"<ul> <li>SHA-3 Standard defines:<ul> <li>four fixed-length hash functions: SHA3-224, SHA3-256, SHA3-384, SHA3-512</li> <li>two extendable Output Functions (XOFs): SHAKE128 and SHAKE256 (see SHAKE &amp; cSHAKE)</li> </ul> </li> <li>applying the Keccak (Sponge) construction</li> <li>also recommended</li> </ul>"},{"location":"themes/Cryptographic%20Hash%20Functions/#security-strengths-in-bits","title":"Security Strengths in Bits","text":""},{"location":"themes/Cryptographic%20Hash%20Functions/#blake","title":"BLAKE","text":"<p>BLAKE is a cryptographic hash function based on Bernsteins ChaCha stream cipher.</p> <p>There are like in the SHA family several versions of the hash function:</p> <ul> <li>BLAKE: submitted 2008, lost in final round of SHA-3 competition to Keccak</li> <li>BLAKE2: hash function based on BLAKE (2012), BLAKE2b is faster than MD5, SHA-1, SHA-2 &amp; SHA-3</li> <li> <p>BLAKE3: hash function based on BLAKE2 (2020), single algorithm with many desirable features (parallelism, XOF, KDF, PRF and MAC), faster than BLAKE2</p> </li> <li> <p>Users of BLAKE2: Argon2, Wireguard, ...</p> </li> </ul> <p>Source en: Wikpedia</p> <p>links: AC1 TOC - Random Oracle &amp; Applications - Modern Cryptography MOC - Index</p>"},{"location":"themes/Cryptographic%20MACs/","title":"Cryptographic MACs","text":"<p>links: AC1 TOC - Random Oracle &amp; Applications - Modern Cryptography MOC - Index</p>"},{"location":"themes/Cryptographic%20MACs/#mac-based-on-block-cipher","title":"MAC based on block cipher","text":""},{"location":"themes/Cryptographic%20MACs/#cbc-mac","title":"CBC-MAC","text":""},{"location":"themes/Cryptographic%20MACs/#cbc-mac-for-fixed-length-messages","title":"CBC-MAC for fixed-length messages","text":"<p>in compare with CBC mode of operation:</p> <ul> <li>no IV</li> <li>only output of last tag (no intermediate output)</li> </ul> <p>is only secure for \"fixed-length\" messages (see Lenght-Extension Attack)</p> <p></p>"},{"location":"themes/Cryptographic%20MACs/#cbc-mac-for-arbitrary-length-messages","title":"CBC-MAC for arbitrary-length messages","text":"<ul> <li>one solution is to include the length of the message in the first block</li> <li>has been proven secure as long as no two messages that are prefixes of each other are ever used</li> <li>Drawback: requires a number of cryptographic operations (specifically, block-cipher evaluations) linear in the length of the message being authenticated \\(\\rightarrow\\) not efficient</li> </ul>"},{"location":"themes/Cryptographic%20MACs/#mac-based-on-universal-hash-functions","title":"MAC based on universal hash functions","text":""},{"location":"themes/Cryptographic%20MACs/#gmac-galois-message-authentication-code","title":"GMAC (Galois Message Authentication Code)","text":"<ul> <li>GMAC is an specialization of the GCM (Galois/Counter mode) for authentication only</li> <li>uses GHASH, wich is a universal hash family</li> <li>very efficient by using hardware-level instructions (more efficient and secure than CBC-MAC)</li> </ul>"},{"location":"themes/Cryptographic%20MACs/#poly1305","title":"Poly1305","text":"<ul> <li>Universal hash family designed by Bernstein</li> <li>more efficient and secure than CBC-MAC</li> </ul>"},{"location":"themes/Cryptographic%20MACs/#gmac-vs-poly1305","title":"GMAC vs. Poly1305","text":"<p>The main difference between Poly1305-AES and AES-GMAC is the type of arithmetic used by the underlying universal hash family, Poly1305 or GHASH, respectively. (...) Poly1305 is optimized for fast safe software implementations, whereas GHASH is a security risk unless you can guarantee you're using hardware support.</p> <p>Source: Link</p>"},{"location":"themes/Cryptographic%20MACs/#mac-based-on-hash-and-mac","title":"MAC based on Hash-and-MAC","text":""},{"location":"themes/Cryptographic%20MACs/#hmac-hash-based-message-authentication-code","title":"HMAC (Hash-based Message Authentication Code)","text":"<ul> <li>based on the Hash-and-Mac construct</li> <li>Avoids the Length-Extension Attack</li> <li>uses the Merkle-Damg\u00e5rd transform to compress arbitrary-length messages</li> <li>there is an \"inner\" and an \"outer\" hash evaluation with some fixed constants (ipad/opad)</li> <li>Definition: \"HMAC-Hash\"\" (e.g. HMAC-SHA-256, HMAC-SHA3-512)</li> <li>Security: HMAC is secure as long as you choose a secure hash algorithm (e.g. HMAC-SHA3-256)</li> </ul>"},{"location":"themes/Cryptographic%20MACs/#drawback-of-hash-and-mac-constructions","title":"Drawback of Hash-and-MAC Constructions","text":"<p>With Hash-and-MAC (like HMAC) we typically use conjecturally collision-resistant functions like SHA-256, which are orders of magnitude more expensive to compute for conjectured security that we don't even care about in this application (collision resistance).</p> <p>Source: Link</p>"},{"location":"themes/Cryptographic%20MACs/#mac-based-on-sponge-functions","title":"MAC based on Sponge Functions","text":""},{"location":"themes/Cryptographic%20MACs/#kmac-keccak-message-authentication-code","title":"KMAC (Keccak Message Authentication Code)","text":"<ul> <li>KMAC is a PRF and keyed hash function based on Keccak</li> <li>It can be leveraged in KDF</li> <li>two variants KMAC128 and KMAC256, built from cSHAKE128 and cSHAKE256 respectively</li> <li>KMAC can also be used as a XOF, which mimics the behaviour of cSHAKE</li> </ul> <p>links: AC1 TOC - Random Oracle &amp; Applications - Modern Cryptography MOC - Index</p>"},{"location":"themes/Cryptography/","title":"Cryptography","text":"<p>links: AC1 TOC - Security &amp; Cryptography - Index</p> <p>Dictionary definition: the art of\u00a0writing\u00a0or\u00a0solving\u00a0codes.</p> <p>'Crypto' (Hidden) 'Graphia' (Writing)</p> <p>Cryptography is but a tool to maintain security. See also Kerckhoffs\u2019 principle</p> <p>Through cryptography we can maintain PAIN:</p> <ul> <li>Privacy</li> <li>Authenticity</li> <li>Integrity</li> <li>Non-repudiation</li> </ul> <p>With cryptography we can secure an already secure process in an insecure environment. It's not possible to secure an insecure process. </p> <p>links: AC1 TOC - Security &amp; Cryptography - Index</p>"},{"location":"themes/Cut-and-choose%20zero-knowledge%20proof/","title":"Cut-and-choose zero-knowledge proof","text":"<p>links: AC2 TOC GNU Taler - Index</p> <p>The general idea is that the prover prepares several instances of the proof and the verifier \"cuts\" a subset of them to check, while the remaining instances are used to construct the proof. If the prover is cheating, they would have to cheat on all instances to be sure of not being caught, which makes the protocol more robust.</p> <ul> <li>The commitment phase is where some evidence is provided, but not enough to convince a verifier or reveal the secret.</li> <li>The cut-and-choose phase is where the verifier randomly checks some of this evidence, and the prover has no way to know in advance which part will be checked.</li> <li>The proof phase is where the prover demonstrates knowledge related to the unchecked evidence.</li> </ul> <p>A cut-and-choose proof does not guarantee to 100% that you counterpart did not lie. It's just a probability.</p> <p>In Taler for example your money is taken in case you are caught lying. So it's not economical to lie as you will always loose money in the long term.</p> <p>You can find an example of a cut-and-choose algorithm here</p> <p>links: AC2 TOC GNU Taler - Index</p>"},{"location":"themes/DHT/","title":"Distributed Hash Tables (DHTs)","text":"<p>links: AC2 TOC DPKI - Index</p>"},{"location":"themes/DHT/#overview","title":"Overview","text":"<p>DHTs are decentralized, so all nodes form the collective system without any centralized coordination. They provide an easy way to find information in a large collection of data because all keys are in a consistent format, and the entire set of keys can be partitioned in a way that allows fast identification on where the key/value pair resides. The nodes participating in a distributed hash table act as peers to find specific data values, as each node stores the key partitioning scheme so that if it receives a request to access a given key, it can quickly map the key to the node that stores the data. It then sends the request to that node.</p> <p>Nodes can be easily be added or removed without forcing a significant amount of re-balancing of the data in the cluster. Cluster rebalancing, especially for large data sets, can often be a time-consuming task that also impacts performance.</p> <p>DHTs are the foundation of many large-scale peer-to-peer (P2P) networks and are used in applications such as file-sharing systems, content distribution networks and domain name systems.</p> <p>Source: en: Hazelcast.com &amp; en: Medium</p> <ul> <li>Distributed index</li> <li>Trade-off between <code>GET/PUT</code> and <code>JOIN/LEAVE</code> costs<ul> <li><code>GET</code> and <code>PUT</code> operations like a hash table</li> <li><code>JOIN</code> and <code>LEAVE</code> operations (internal)</li> </ul> </li> <li>typically use exact match on cryptographic hash for lookup</li> <li>typically require overlay to establish particular connections</li> </ul>"},{"location":"themes/DHT/#key-properties-of-dht","title":"Key Properties of DHT","text":"<ul> <li>routing table structure<ul> <li>The routing table defines how easy / hard it is to find a route to a given destination / target</li> </ul> </li> <li>lookup procedure<ul> <li>The lookup procedure defines the way a value can be found in a DHT</li> </ul> </li> <li>join operation process<ul> <li>The join operation process defines how a new node is integrated into the DHT</li> </ul> </li> <li>leave operation process<ul> <li>The leave operation is the opposite of the join operation which means it defines how a node can leave the DHT</li> </ul> </li> <li>cost (complexity) for each operation<ul> <li>The cost / complexity give an estimate on how good a specific procedure performs in a specific DHT.</li> </ul> </li> </ul>"},{"location":"themes/DHT/#various-dht","title":"Various DHT","text":""},{"location":"themes/DHT/#the-clique","title":"The Clique","text":"<p>Everyone knows everyone</p> <p></p> <ul> <li>routing table: hash map of all peers \\(\\rightarrow \\mathcal{O}(n)\\)</li> <li>lookup: forward to closest peer in routing table \\(\\rightarrow \\mathcal{O}(1)\\)</li> <li>join: ask initial contact for routing table, copy table, introduce us to all other peers, migrate data we're closest to us \\(\\rightarrow \\mathcal{O}(n)\\)</li> <li>leave: send local data to remaining closest peer, disconnect from all peers to remove us from their routing table \\(\\rightarrow \\mathcal{O}(n)\\)</li> </ul>"},{"location":"themes/DHT/#the-circle","title":"The Circle","text":"<p>Nodes are aligned in a circle and each node is connected with the two nearest neighbours.</p> <p></p> <ul> <li>routing table: left and right neighbour in cyclic identifier space \\(\\rightarrow \\mathcal{O}(1)\\)</li> <li>lookup: forward to closest peer (left or right) \\(\\rightarrow \\mathcal{O}(n)\\) </li> <li>join: lookup own peer identity to find position, transfer data from neighbour for keys we are closer to \\(\\rightarrow \\mathcal{O}(n)\\)</li> <li>leave: ask left and right neighbour connect directly, transfer data to respective neighbour \\(\\rightarrow \\mathcal{O}(1)\\)</li> </ul>"},{"location":"themes/DHT/#content-addressable-network-can","title":"Content Addressable Network (CAN)","text":"<ul> <li>routing table: neighbours in \\(d\\)-dimensional torus space \\(\\rightarrow 2d = \\mathcal{O}(d)\\)</li> <li>lookup: forward to closest peer \\(\\rightarrow \\mathcal{O}(d \\sqrt[d]{n})\\)</li> <li>join: lookup own peer identity to find join position, split quadrant (data areas) with existing peer</li> <li>leave: assign quadrant space to neighbour(s) \\(\\rightarrow \\mathcal{O}(d)\\)</li> </ul>"},{"location":"themes/DHT/#chord","title":"Chord","text":"<ul> <li>routing table: predecessor in circle and at distance \\(2^i\\), plus \\(r\\) successors \\(\\rightarrow \\mathcal{O}(log_2(n))\\)</li> <li>lookup: forward to closest peer \\(\\rightarrow \\mathcal{O}(log_2(n))\\)</li> <li>join: lookup own peer identity to find join position, use neighbour to establish finger table, migrate data form respective neighbour \\(\\rightarrow \\mathcal{O}((log_2(n))^2)\\)</li> <li>leave: join predecessor with successor, migrate data to respective neighbour, periodic stabilization protocol takes care of finger updates \\(\\rightarrow \\mathcal{O}(1)\\)</li> </ul>"},{"location":"themes/DHT/#kademlia","title":"Kademlia","text":"<ul> <li>routing table: \\(2^{160}\\) buckets with \\(k\\) peers at XOR distance \\(2^i\\)</li> <li>lookup: iteratively forward to \\(\\alpha\\) peers from the \"best\" bucket, selected by latency</li> <li>join: lookup own peer identity, populate table with peers form iteration</li> <li>maintenance: when interacting with a peer, add to bucket if not full; if bucket full, check if longest-not-seen peer is live first</li> <li>leave: just drop out</li> </ul> <p>Properties</p> <ul> <li>XOR is a symmetric metric: connections are used in both directions</li> <li>Iterative lookup gives initiator much control</li> <li>Lookup helps with routing table maintenance</li> <li>Bucket size trade-off between routing speed and table size</li> <li>Iterative lookup is a trade off:<ul> <li>good UDP</li> <li>bad with TCP (large number of connections)</li> </ul> </li> </ul> <p>links: AC2 TOC DPKI - Index</p>"},{"location":"themes/DNS%20Recap/","title":"DNS Recap","text":"<p>links: AC2 TOC DPKI - Index</p>"},{"location":"themes/DNS%20Recap/#what","title":"What?","text":"<p>The DNS (Domain Name System) translates human readable domain names like <code>www.bfh.ch</code> to IP addresses like <code>127.0.0.1</code>. The IP addresses can then be routed by routing protocols and finally be resolved to physical MAC address using ARP.</p>"},{"location":"themes/DNS%20Recap/#how","title":"How?","text":"<p>The DNS has a strong hierarchy starting at the root domain <code>'.'</code> , followed by so called TLD (Top Level Domains, like <code>'ch'</code> or <code>'com'</code>). The hierarchy is a tree and each node forms its one namespace. All <code>'ch'</code> domains can be found within the <code>'.ch'</code> namespace. For example the domain of the BFH is located at <code>'.ch.bfh'</code> and forms the namespace for all subdomains of <code>'bfh.ch'</code>. Any node is addressed using his FQDN (Fully Qualified Domain Name). The namespace of the BFH can therefore be resolved by the FQDN <code>'bfh.ch.'</code>. Each namespace forms also a zone. The zones are the domain of the namespace and all its sub-domains. This means that for example the subdomains <code>'ti.bfh.ch'</code> or <code>ahb.bfh.ch</code> are part of the zone <code>'bfh.ch'</code>. </p> <p></p>"},{"location":"themes/DNS%20Recap/#resource-records-rr","title":"Resource Records (RR)","text":"<p>DNS entries follow a specific form specified in the RFC-1035 (which is part of Internet Standard STD 13). They are called resource records and specify following fields per entry</p> <ul> <li>NAME: The human readable domain <code>www.bfh.ch</code></li> <li>TYPE: The type of the RR (RR can be of various types like <code>A</code> for IPV4-addresses, <code>MX</code> for mail exchanges, <code>SOA</code> for zone of authority, <code>AAAA</code> for IPV6-addresses and many more \\(\\rightarrow\\) see section 3.2.2 of RFC-1035)</li> <li>CLASS: Network class of the RR (mostly IN for Internet)</li> <li>TTL: How long shall the RR live in caches.</li> <li>RDLENGTH: Length of the RDATA</li> <li>RDATA: detailed information defining the RR</li> </ul>"},{"location":"themes/DNS%20Recap/#reverse-lookup","title":"Reverse lookup","text":"<p>DNS also supports reverse lookups. This means, that for a given address a human readable domain can be looked up. For this purpose also RR must be created in the DNS config which map addresses to domains. Then you can do a normal lookup.</p>"},{"location":"themes/DSA%20Signature%20Scheme/","title":"DSA Signature Scheme","text":"<p>links: AC2 TOC - Digital Signatures - Index</p> <ul> <li>DSA = Digital Signature Algorithm  </li> <li>ECDSA = Elliptic Curve Digital Signature Algorithm</li> </ul> <p>Exists because of the Schnorr patent.</p>"},{"location":"themes/DSA%20Signature%20Scheme/#dl-based-signature-schemes","title":"DL-Based Signature Schemes","text":"<p>Multiple signature schemes are based on the DL assumption</p> <ul> <li>DSA signature scheme (most widely used in practice)  </li> <li>Schnorr signature scheme </li> <li>ElGamal/Pointcheval\u2013Stern signature scheme (rarely used)</li> </ul> <p>Advantage of DL-based signature schemes:</p> <ul> <li>Shorter keys (EC)</li> <li>Shorter signatures</li> <li>More efficient (less energy)</li> <li>Important for smartcard-based implementations</li> </ul>"},{"location":"themes/DSA%20Signature%20Scheme/#math","title":"Math","text":"<p>Ugly beautiful, involves two hashes, relative primes and multiplicative inverse.</p> <p>Key generation is simple:</p> <p>Let \\((G_q,\\times,\u22121 ,1)\\) be a group of order \\(q\\) and \\(g \\in G_q\\) a generator</p> <ul> <li>\\(sk \\rightarrow randInt(q)\\) where \\(sk \\in \\mathbb{Z}_q\\)</li> <li>\\(pk := g^{sk}\\) where \\(pk \\in G_p\\)</li> </ul>"},{"location":"themes/DSA%20Signature%20Scheme/#properties","title":"Properties","text":"<ul> <li>The DSA and ECDSA signature schemes are EUF-CMA secure under the DL assumption (provided that the hashes have the properties of a random oracle)</li> <li>Security is still unproven as one of the hash functions is not standardized.</li> <li>DSA works also in a subgroups \\(G_q \u2282 Z^\u2217_p\\) of much smaller order \\(q\\), which then leads to much smaller signatures</li> <li>For example, if \\(p\\) is a 3072-bits prime and \\(q\\) is a 256-bits prime, then the signature size is \\(2 \\cdot 256 = 512\\) bits (signature consists of \\(s = (s_1, s_2)\\) where \\(s_1\\) and \\(s_2\\) are 256-bits)<ul> <li>\u0308The combination of 3072/256 bits for \\(p\\) and \\(q\\) corresponds to security strength \\(s = 128\\)</li> <li>Note that 256 bits for \\(q\\) fits well with SHA-256</li> </ul> </li> </ul> <p>links: AC2 TOC - Digital Signatures - Index</p>"},{"location":"themes/Diffie-Hellman/","title":"Diffie-Hellman","text":"<p>links: AC2 TOC - Intro Public Key Encryption - Index</p> <p>The Diffie-Hellman key exchange, invented in 1976 by W. Diffie and M. Hellman (and R. Merkle), was the first practical solution to the key exchange problem.</p>"},{"location":"themes/Diffie-Hellman/#one-way-function","title":"One-Way Function","text":"<p>The Diffie-Hellman key exchange is based on the following one-way function, where \\(p\\) (large prime, usually 2048 or 4096 bit) and \\(g\\) (primitive root modulo \\(p\\), see Modular Arithmetic and Group Theory) are public parameter.</p> <ul> <li>Exponentiation (easy):</li> </ul> \\[y:= f(x) = g^x \\mod p\\] <ul> <li>Discrete logarithm (hard): </li> </ul> \\[x := f^{-1}(y) = \\log_g y \\mod p \\]"},{"location":"themes/Diffie-Hellman/#example","title":"Example","text":"<p>A simple numeric Example:</p> <ul> <li>Let \\(p = 13\\) and \\(g=2\\) </li> <li>Alice...<ul> <li>picks random a \\(\\leftarrow\\) 4  </li> <li>computes \\(A:=2^4 \\mod 13 = 3\\) </li> <li>sends \\(A=3\\) to Bob</li> </ul> </li> <li>Bob...<ul> <li>picks random b \\(\\leftarrow\\) 2  </li> <li>computes \\(B := 2^2 \\mod 13 = 4\\)</li> <li>sends \\(B=4\\) to Alice</li> </ul> </li> <li>Alice computes \\(k := 4^4 \\mod 13 = 9\\)</li> <li>Bob computes \\(k := 3^2 \\mod 13 = 9\\)</li> </ul>"},{"location":"themes/Diffie-Hellman/#passive-attack","title":"Passive Attack","text":"<p>For an eavesdropper to break a Diffie-Hellman key exchange, one of two (supposedly hard) problems must be solved:</p> <ul> <li>Discrete Logarithm (DL): compute \\(a\\) from \\(A=g^a \\mod p\\)</li> <li>Computational Diffie-Hellman (CDH): compute \\(k = g^{ab} \\mod p\\) from \\(A = g^a \\mod p\\) and \\(B = g^b \\mod p\\)</li> </ul> <p>It is an open question whether DL is harder than or equal to CDH. However, it is strongly believed that no algorithm can solve DL (and hence CDH) in polynomial time, but there is no proof.</p> <p>The CDH assumption is stronger than the DL assumption.</p> <ul> <li>\\(a :=\\) DL-Solver(\\(A\\))</li> <li>\\(b :=\\) DL-Solver(\\(B\\))</li> <li>\\(k :=\\) CDH-Solver(\\(A,B\\))</li> </ul>"},{"location":"themes/Diffie-Hellman/#active-attack","title":"Active Attack","text":""},{"location":"themes/Diffie-Hellman/#application-modes","title":"Application Modes","text":"<p>There are 3 application modes for DH:</p> <ul> <li>Ephemeral-ephemeral mode<ul> <li>Both Alice and Bob generate new values for each communication so every time they communicate a new session key \\(k\\) is genereted</li> </ul> </li> <li>Ephemeral-static mode<ul> <li>Only one of the two generates new values for each communication.</li> <li>There will bi also a new session key \\(k\\) for every communication</li> </ul> </li> <li>Static-static mode<ul> <li>Both retain their values over multiple communications</li> <li>They always use the same key \\(k\\) </li> </ul> </li> </ul>"},{"location":"themes/Diffie-Hellman/#in-practice","title":"In Practice","text":"<p>Standardised in:</p> <ul> <li>PKCS#3</li> <li>RFC2631 (IETF)</li> <li>NIST Special Publication 800-56A (Revision 2)</li> </ul> <p>Applications in crypto protocols:</p> <ul> <li>SSH (Secure shell)</li> <li>TLS (Transport Layer Security), formerly known as SSL (Secure Sockets Layer)</li> <li>IPSec (Internet Protocol Security)</li> </ul> <p>links: AC2 TOC - Intro Public Key Encryption - Index</p>"},{"location":"themes/Digital%20Signatures/","title":"Digital Signatures","text":"<p>links: AC2 TOC Digital Signatures - Index</p>"},{"location":"themes/Digital%20Signatures/#basics","title":"Basics","text":"<p>Digital signatures solve the problem of authenticated communication between Alice and Bob</p> <ul> <li>For signing a message, Alice uses her private key </li> <li>For verifying a signed message, Bob uses Alice\u2019s public key</li> </ul> <p>If the verification succeeds, and provided that </p> <ul> <li>only Alice knows her private key</li> <li>Bob uses Alice\u2019s public key  </li> </ul> <p>then Bob knows that the message originates from Alice and has not been modified during transmission. In other words, digital signatures provide sender authenticity, message integrity, and non-repudiation.</p> <p>Note that digital signatures are publicly verifiable, i.e., anyone (not only Bob) can verify that s is a valid signature for \\(m\\).</p>"},{"location":"themes/Digital%20Signatures/#scheme","title":"Scheme","text":"<p>A digital signature scheme consists of a message space \\(M\\) and three (randomised) polynomial-time algorithms:</p> <ul> <li>Key generation: \\((pk, sk) \u2190 keyGen()\\) </li> <li>Signature generation: \\(s \u2190 sign_{sk}(m)\\)</li> <li>Verification: \\(v := verify_{pk}(m, s)\\), where \\(v \u2208 {0, 1}\\)</li> </ul> <p>The set of all valid signatures generated by \\(sign_{sk}(m)\\) is called signature space \\(S\\)</p>"},{"location":"themes/Digital%20Signatures/#applications","title":"Applications","text":"<ul> <li>Web server authentication</li> <li>Secure e-mail  </li> <li>Signed documents  </li> <li>Digital contracts</li> <li>Code signing (software updates, drivers, etc.) </li> <li>Digital certificates  </li> <li>Time-stamping service  </li> <li>Identification schemes</li> </ul>"},{"location":"themes/Digital%20Signatures/#authenticated-private-communication","title":"Authenticated Private Communication?","text":"<p>As we can sign our messages and encrypt data using the counterparts public key we achieved authenticated private communication. But there are two things we need to be aware of in order to not compromise security:</p> <p>Alice wants to send an encrypted message to Bob:</p> <p>First there is a public key exchange in both directions.</p> <p>Man in the Middle Attack</p> <p>A man in the middle attacker can intersect the public key of Bob and send their own public key to Alice. Alice will then encrypt the message with the public key of the attacker and the attacker can decrypt the message with their private key. The attacker can then send the message to Bob.</p> <p>Combination of encrypt and sign</p> <p>If Alice does the following:</p> <ul> <li>\\(c \\leftarrow enc_{pkB}(m)\\)</li> <li>\\(s \\leftarrow sign_{skA}(m)\\)</li> </ul> <p>The message \\(m\\) can be leaked as a signature has different security requirement than a ciphertext. It could be possible to learn \\(m\\) from \\(s\\).</p> <p>See here: Authenticated Encryption Schemes</p>"},{"location":"themes/Digital%20Signatures/#security-and-adversary-models","title":"Security and Adversary Models","text":"<ul> <li>We consider probabilistic polynomial-time (PPT) adversaries</li> <li>Existentially Unforgeability (EUF)<ul> <li>It should not be possible for an attacker, even if they have seen a number of valid message-signature pairs, to forge a valid signature for even a single additional message.</li> </ul> </li> <li>Chosen-Message Attack (CMA)<ul> <li>The adversary can ask a signing oracle to produce valid signatures \\(s\u2032 \u2190 sign_{sk}(m\u2032)\\) for arbitrary messages \\(m\u2032 \\neq m\\).</li> </ul> </li> </ul>"},{"location":"themes/Digital%20Signatures/#euf-cma","title":"EUF-CMA","text":"<ul> <li>EUF-CMA = Existentially unforgeability under chosen-message attack (standard security model for digital signatures)</li> </ul> <p>links: AC2 TOC Digital Signatures - Index</p>"},{"location":"themes/Digital%20Timestamping/","title":"Digital Timestamping","text":"<p>links: AC2 TOC - Centralized public-key infrastructures - Index</p>"},{"location":"themes/Digital%20Timestamping/#digital-timestamping_1","title":"Digital Timestamping","text":"<p>A \"trustworthy time\" is crucial for a PKI.</p> <ul> <li>CAs should issue/revoke certificates based on a trustworthy time. This service is mandatory for accredited CAs issuing advanced or qualify\fed certificates.</li> <li>A trustworthy timestamp should be added every time a user \"digitally signs\" a document to achieve a higher level of legal probative value.</li> </ul> <p>If the content of a document is additionally digitally time-stamped by a trustworthy DTS, it makes time of creation provable in the future.</p> <p></p> <p>links: AC2 TOC - Centralized public-key infrastructures - Index</p>"},{"location":"themes/Distributed%20Computing/","title":"Distributed Computing","text":"<p>links: AC2 TOC - Anonymity - Index</p>"},{"location":"themes/Distributed%20Computing/#the-8-fallacies-of-distributed-computing","title":"The 8 Fallacies of Distributed Computing","text":"<ol> <li>The network is reliable</li> <li>Latency is zero</li> <li>Bandwidth is infinite</li> <li>The network is secure</li> <li>Topology does not change</li> <li>There is one administrator</li> <li>Transport cost is zero</li> <li>The network is homogeneous</li> </ol>"},{"location":"themes/Distributed%20Computing/#limits-on-authentication","title":"Limits on authentication","text":"<p>Boyd's Theorem I</p> <p>\"Suppose that a user has either a confidentiality channel to her, or an authentication channel from her, at some state of the system. Then in the previous state of the system such a channel must also exist. By an inductive argument, such a channel exists at all previous states.\"</p> <p>Example</p> <ul> <li>Now: Alice sends an encrypted message to Bob. The message is confidential because only Bob, who has the decryption key, can read it.</li> <li>Before: According to Boyd's Theorem I, since the message is confidential now, it must have been confidential in the previous moment as well. This could be the moment when Alice was typing the message on her computer. Since no one else has access to her computer, the message is confidential at this time as well.</li> <li>Even Before: Going one step back, even when Alice was thinking about what to write in the message, the information was still confidential because it was only in her mind.</li> </ul> <p>Boyd's Theorem II</p> <p>\"Secure communication between any two users may be established by a sequence of secure key transfers if there is a trusted chain from each one to the other\"</p> <p>Example</p> <p>Consider Alice wants to send a secure message to Bob, but they have never met, and therefore, haven't exchanged any encryption keys. But Alice knows and trusts Charlie, who in turn knows and trusts Bob. Alice can securely give Charlie an encryption key (since she trusts him). Charlie can then pass this key to Bob (since Bob trusts him). Now, Bob has the encryption key, and he can use it to decrypt any messages that Alice sends him. Even though Alice and Bob have never met, they can still communicate securely because of the chain of trust involving Charlie.</p>"},{"location":"themes/Distributed%20Computing/#zfone-authentication-zrtp","title":"Zfone Authentication (ZRTP)","text":"<ol> <li>Diffie-Hellman exchange: This establishes the initial secure communication channel, tying into Boyd's Theorem I.</li> <li>Use of keying material from previous sessions: Even if an attacker is present during one call, they can't affect future calls, which provides continuity of the secure channel across different states.</li> <li>Generation of Short Authentication String (SAS): ZRTP generates a Short Authentication String (SAS), a hash of the DH public keys.</li> <li>Reading the SAS: Alice and Bob read the SAS to each other. They both recognize each other's voices, providing a form of human authentication.</li> </ol> <p>\\(\\rightarrow\\) ZRTP fails standard man-in-the-middle-attack</p>"},{"location":"themes/Distributed%20Computing/#self-stabilisation","title":"Self stabilisation","text":"<p>This is a concept introduced by Dijkstra in 1974. It's a property of a system that guarantees its ability to recover and stabilize itself, regardless of the initial state it starts from.</p> <ol> <li>Convergence: This refers to the system's ability to eventually reach a correct state, no matter what state it started in.</li> <li>Closure: This means that once the system is in a correct state, it will remain in that state, assuming no new faults are introduced.</li> </ol> <p>Self-stabilization enables a distributed algorithm to recover from a transient fault regardless of its nature</p> <p>Example: Spanning-tree Protocol from Networking</p>"},{"location":"themes/Distributed%20Computing/#secure-multipart-computation-smc","title":"Secure Multipart Computation (SMC)","text":"<p>Compute result in distributed manner without revealing what exactly is computed.</p> <ul> <li>Enabling multiple parties to jointly compute a function over their inputs while keeping those inputs private</li> <li>Usually only one learns the result</li> <li>Can be useful e.g. in privacy-preserving medical research studies (compute averages, correlations on encrypted data)</li> </ul> <p>Example</p> <p>Suppose there are three friends, Alice, Bob, and Charlie, and they want to know who has the highest salary, but none of them wants to disclose their individual salaries. Secure multipart computation allows them to compute the function (in this case, finding the maximum salary) without revealing their individual inputs.</p> <ol> <li>Alice, Bob, and Charlie each encrypt their salaries.</li> <li>They then collectively perform computations on these encrypted values. In this process, the encryption ensures that no one can infer the original values.</li> <li>After the computations, the result is decrypted to reveal the maximum salary. Importantly, this result does not allow them to infer individual salaries.</li> </ol> <p>links: AC2 TOC - Anonymity - Index</p>"},{"location":"themes/Double-Padlock-Protocol/","title":"Double-Padlock-Protocol","text":"<p>links: AC1 TOC - Randomness - Index</p> <p>The idealised Kish-Sethuraman (KS) cipher is theoretically known to offer perfect security through a classical information channel. However, realisation of the protocol is hitherto an open problem, as the required mathematical operators have not been identified in the previous literature.</p> <p>Security Assumptions</p> <ul> <li>Users' private keys are kept secret</li> <li>Perfect security</li> </ul> <p>Schematically the protocol would work like this: </p> <p></p>"},{"location":"themes/Double-Padlock-Protocol/#building-it-with-a-one-time-pad","title":"Building it with a One Time Pad","text":"<p>Does not work sadly. We leak information because of the OTP reuse.</p> <p></p> <p>Maybe this could somehow be achieved through quantum physics^^</p> <p>With the Kish\u2010Sethuraman (KS) cipher an attempt was made, by using special operators and communication, to reach absolutely secure classical communication. First the message is bounced back with additional encryption by the Receiver and then the original encryption is removed and the message is resent by the Sender. The mechanical analogy of this operation is using two padlocks; one by the Sender and one by the Receiver. Klappenecker has pointed out that finding an efficient software realisation of the operators is equivalent of proving the\u00a0P \u2260 NP\u00a0problem (see Complexity Classes).</p> <p>links: AC1 TOC - Randomness - Index</p>"},{"location":"themes/EAV-Security/","title":"EAV-Security","text":"<p>links: AC1 TOC - Private Key Encryption - Modern Cryptography MOC - Index</p>"},{"location":"themes/EAV-Security/#general-definition","title":"General definition","text":"<p>EAV-security implies that ciphertexts leak no information about individual bits of the plaintext.</p> <p>A private-key encryption scheme has indistinguishable encryptions in the presence of an eavesdropper, or it is EAV-Secure, iff it is semantically secure in the presence of an eavesdropper.</p> <p>Leaking the plaintext length</p> <p>The default notion of secure encryption does not require the encryption scheme to hide the plaintext length. Sometimes, leaking the plaintext length is problematic: - Simple numeric/text data: Encryption of \"yes/no\" responses would leak the answer exactly - Database searches: the number of records returned can reveal information about what the user was searching for. - Compressed data: if the plaintext is compressed before being encrypted, then information about the plaintext might be revealed (e.g. that the original plaintext has a lot of redundancy)</p> <p>Mitigate or prevent such leakage by padding all messages before encrypting them.</p>"},{"location":"themes/EAV-Security/#semantic-security","title":"Semantic Security","text":"<ul> <li>takes into account that arbitrary \"external\" information about the message may be available to the adversary</li> <li>allows messages of varying lengths</li> <li>assumes the message length is revealed</li> </ul> <p>A semantically secure cryptosystem (RSA, ElGamal) is one where only negligible information about the plaintext can be feasibly extracted from the ciphertext.</p> <p>Perfect secrecy (see Shannons Theorem) means that the ciphertext reveals no information at all about the plaintext, whereas semantic security implies that any information revealed cannot be feasibly extracted.</p>"},{"location":"themes/EAV-Security/#constructing-an-eav-secure-encryption-scheme","title":"Constructing an EAV-Secure Encryption Scheme","text":""},{"location":"themes/EAV-Security/#pseudorandom-generators","title":"Pseudorandom Generators","text":"<p>deterministic algorithm \\(G\\) for transforming a short, uniform string (called seed) into a longer, \"uniform-looking\" (or \"pseudorandom\") output string.</p> <p>Just as indistinguishability is a computational relaxation of perfect secrecy, pseudorandomness is a computational relaxation of true randomness.</p> <p>Formal definition</p> <p>\\(G\\) is a pseudorandom generator if no efficient distinguisher can detect whether it is given a string output by \\(G\\) or a string chosen uniformly at random.</p> <p>Seed</p> <ul> <li>must be chosen uniformly and be kept secret from any adversary if we want \\(G(s)\\) to look random</li> <li>the seed \\(s\\) must at least be large enough so that a brute-force attack running in time \\(2^n\\) is infeasible</li> </ul>"},{"location":"themes/EAV-Security/#proofs-by-reduction","title":"Proofs by Reduction","text":"<p>Our strategy will be to assume that some mathematical problem is hard, or that some low-level cryptographic primitive is secure, and then to prove that the given construction based on that problem/primitive is secure as long as our initial assumption is correct.</p> <p></p>"},{"location":"themes/EAV-Security/#eav-security-from-a-pseudorandom-generator","title":"EAV-Security from a Pseudorandom Generator","text":"<p>Rather than sharing this long, pseudorandom pad, the sender and receiver can instead share a uniform seed that is used to generate the pad when needed.</p> <ul> <li>only for fixed length pad &amp; messages</li> <li>only EAV-Secure</li> </ul> <p></p> <p>links: AC1 TOC - Private Key Encryption - Modern Cryptography MOC - Index</p>"},{"location":"themes/ElGamal/","title":"ElGamal","text":"<p>links: AC2 TOC - RSA and ElGamal Encryption - Index</p>"},{"location":"themes/ElGamal/#elgamal-encryption-scheme","title":"ElGamal Encryption Scheme","text":"<ul> <li>Security is based on the hardness of the DL (Discrete Logarithm) problem.</li> </ul>"},{"location":"themes/ElGamal/#elgamal-key-generation","title":"ElGamal Key Generation","text":"<p>The key generation of ElGamal takes a random secret key \\(sk\\) which is a random number in the range between \\(1\\) and a given prime \\(q\\). The public key is then calculated by exponentiation of the generator \\(g\\) as base with the private key \\(sk\\) as exponent:</p> <p></p> <ul> <li>\\(\\mathbb{Z}_q\\): Additive Group (Number between \\(\\{1...q\\}\\))</li> <li>\\(\\mathbb{G}_q\\): Multiplicative Subgroup (see Group of Integers Modulo a Safe Prime)</li> </ul>"},{"location":"themes/ElGamal/#elgamal-encryption-and-decryption","title":"ElGamal Encryption and Decryption","text":"<p>Encryption and Decryption with ElGamal can be done pretty sweet. For encryption we first calculate some random \\(r\\) in the additive group \\(\\mathbb{Z}_q\\). Then we calculate two return values \\(a\\) and \\(b\\). \\(a\\) is the generator \\(g\\) potentiated with the random \\(r\\) and \\(b\\) is the public key of the receiving party potentiated with random \\(r\\) multiplied with the message \\(m\\). Then \\(a\\) and \\(b\\) are returned.</p> <p>Decryption is done by reverting the calculation using the private key of the receiving party. Therefore \\(a\\) is potentiated with the negative value of the secret key. Then is multiplied with the received ciphertext \\(b\\). This leads to the resolution of all factors until only the plaintext \\(m\\) is left. </p> <p>Important: Each single operation is done inside the publicly known group \\(\\mathbb{G}_q\\), which means each operation is calculated like \\(operation \\!\\! \\mod q\\).</p> <p>Resolution in detail:</p> <ul> <li>\\(pk = g^{sk}\\)</li> <li>\\(a = g^r\\)</li> <li>\\(b = m*pk^r = m*g^{sk*r}\\)</li> <li>\\(m = b*a^{-sk} = b*g^{-(sk*r)} = b*{\\dfrac{1}{g^{sk*r}}} = m * {\\dfrac{g^{sk*r}}{g^{sk*r}}} = m\\)</li> </ul> <p></p> <p>Example</p> <p></p>"},{"location":"themes/ElGamal/#elgamal-properties","title":"ElGamal Properties","text":"<p>Information about Gq subgroup</p> <p>Information about why DDH doesn't hold in \\(\\mathbb{Z}_p^*\\)</p> <p>GPT</p> <p>The Decisional Diffie-Hellman (DDH) assumption is a computational problem in cryptography. Specifically, it's an assumption made about the difficulty of a specific computational task in a cyclic group. The problem is to distinguish between the distributions \\((g^a, g^b, g^{ab})\\) and \\((g^a, g^b, g^c)\\) for random \\(a\\), \\(b\\), and \\(c\\).</p> <p>In the multiplicative group \\(\\mathbb{Z}_p^*\\) (where \\(p\\) is prime), the DDH assumption does not hold. This is because if you have access to a group element, you can easily compute its square root (modulo \\(p\\)). This means you can distinguish between a random group element and a square. Thus, given \\((g^a, g^b, g^{ab})\\) and \\((g^a, g^b, g^c)\\), it's possible to check whether the third element is the product of the first two (modulo \\(p\\)) or not.</p> <p>On the other hand, if we consider a subgroup \\(\\mathbb{G}_q\\) of \\(\\mathbb{Z}_p^*\\), where \\(p = 2q + 1\\) for \\(p\\) and \\(q\\) prime (which makes \\(p\\) a safe prime), and \\(\\mathbb{G}_q\\) is the subgroup of quadratic residues modulo \\(p\\), the DDH assumption is believed to hold. This is because in this subgroup, it's computationally difficult to distinguish between a random element and a square, hence making it difficult to decide whether the third element is the product of the first two or not.</p> <p>To summarize, the DDH problem is easier to solve in the full group \\(\\mathbb{Z}_p^*\\) (thus the DDH assumption does not hold), but is believed to be hard in the specific subgroup \\(\\mathbb{G_q}\\) (thus the DDH assumption is considered to hold). This difference arises due to the mathematical properties of these groups and the specific structure of the DDH problem.</p> <p>links: AC2 TOC - RSA and ElGamal Encryption - Index</p>"},{"location":"themes/Elliptic%20Curves%20in%20Crypto/","title":"Elliptic Curves in Crypto","text":"<p>links: AC2 TOC - Elliptic Curves - Index</p> <p>Writing elliptic curves as additive groups is a convention.</p> <p>\\(xP = \\underbrace{P + P + \u00b7 \u00b7 \u00b7 + P}_{\\text{x times}}\\) instead of \\(P^x\\)</p> <p>A generator \\(G\\) of an elliptic curve of order \\(q\\) can generate all points from \\(G\\) to \\(qG\\).</p> <p>If \\(q\\) is prime all points are generators except for \\(\\mathcal{O}\\).</p>"},{"location":"themes/Elliptic%20Curves%20in%20Crypto/#dl-problem-in-elliptic-curves-ecdl","title":"DL problem in elliptic curves (ECDL)","text":"<p>Finding a value \\(x \\in \\mathbb{Z}_p\\) such that \\(xG = P\\)</p> <p>The fastest general ECDL algorithm is Pollard\u2019s rho algorithm with an expected running time of \\(\\mathcal{O}(\\sqrt{q})\\). This means that a 256 bit prime \\(p\\) gives us 128 bits of security.</p>"},{"location":"themes/Elliptic%20Curves%20in%20Crypto/#elliptic-curve-cryptography-ecc","title":"Elliptic Curve Cryptography (ECC)","text":"<ul> <li>Elliptic curve Diffie-Hellman key exchange (ECDH)  </li> <li>Elliptic curve ElGamal encryption scheme (EC-ElGamal)</li> <li>Elliptic curve DSA Signature Scheme (ECDSA)</li> </ul> <p>We need algorithms to encode and decode messages into curve points. Those exist and are efficient.</p>"},{"location":"themes/Elliptic%20Curves%20in%20Crypto/#elliptic-curves-in-practice","title":"Elliptic Curves in Practice","text":"<p>The generation of \u201cgood\u201d elliptic curves is a cumbersome process. Some parameters \\(a,b \\in \\mathbb{Z}_p\\) are insecure.</p> <p>Use standardised curves but be careful of magic numbers and whom you trust.</p> <ul> <li>Curve25519 (Bernstein)</li> <li>secp256k1 (Bitcoin)</li> <li>P-256, P384 (NIST)</li> <li>Brainpool curves</li> </ul>"},{"location":"themes/Elliptic%20Curves%20in%20Crypto/#advanced-topics","title":"Advanced topics","text":""},{"location":"themes/Elliptic%20Curves%20in%20Crypto/#embedding-degree","title":"Embedding Degree","text":"<ul> <li>Let \\(q\\) be the prime order of some sub-group of \\(\u27e8G\u27e9 \u2286 E(\\mathbb{Z}_p)\\), i.e., \\(q\\) is dividing \\(|E (\\mathbb{Z}_p)|\\)</li> <li>The embedding degree of \\(E(\\mathbb{Z}_p)\\) relative to \\(q\\) is the smallest integer \\(k\\) such that \\(q\\) divides \\(p^k \u2212 1\\)</li> <li>For elliptic curves with small embedding degrees \\(k = 2, 3, 4, 6\\) the Weil pairing and Tate pairing can be computed efficiently</li> </ul> <p>If you have an elliptic curve defined over a finite field, you can consider the group of points on that curve, and that group will have a certain size (the order). You can also look at the finite field itself, and consider larger fields obtained by taking powers of the original field's size. The embedding degree tells you how far you have to go in this process before you get a field in which the order of the group divides the size of the field minus 1.</p> <p>Example</p> <p>Suppose we have an elliptic curve defined over the finite field \\(F_7\\), and let's say this curve's group has order \\(n = 9\\).</p> <p>We want to find the smallest positive integer \\(k\\) such that \\(n\\) divides \\(7^k - 1\\).</p> <p>\\(k=1: 7^1 - 1 = 6\\)</p> <p>\\(k=2: 7^2 - 1 = 48\\)</p> <p>\\(k=3: 7^3 - 1 = 342\\) (divisible by 9)</p> <p>So, the embedding degree of this elliptic curve with respect to the order \\(9\\) is \\(k=3\\).</p>"},{"location":"themes/Elliptic%20Curves%20in%20Crypto/#asymmetric-pairing","title":"(Asymmetric) Pairing","text":"<p>The Weil and Tate pairings are examples of a mapping from two groups \\(\\mathcal{G}_1 = (G_1,+,\u2212,0)\\) and \\(\\mathcal{G}_2 = (G_2,+,\u2212,0)\\) into a target group \\(G_T = (G_T,\u00d7,^{\u22121} ,1)\\): </p> \\[e: G_1 \\times G_2 \\rightarrow G_T\\] <p>Such a mapping is called bilinear map, if the following two properties hold:</p> <ul> <li>Bilinearity: \\(e(xP,yQ)=e(P,Q)^{xy}\\), for all \\((P,Q)\u2208G_1 \\times G_2\\)</li> <li>Non-degeneracy: for all \\(P \u2208 G_1\\) there is a \\(Q \u2208 G_2\\) such that \\(e(P, Q) \\neq 1\\), and vice versa</li> </ul> <p>A bilinear map is called pairing, if \\(e\\) is computable in an efficient manner and hard to invert</p>"},{"location":"themes/Elliptic%20Curves%20in%20Crypto/#symmetric-pairing","title":"Symmetric Pairing","text":"<p>In a symmetric pairing, the two source groups are identical: </p> \\[e : G \\times G \u2192 G_T\\] <ul> <li>If a symmetric pairing exists for a given group \\(G\\), then DDH can be solved efficiently.</li> <li>Therefore, such a group G can not be used in a cryptographic scheme relying on DDH</li> <li>Note that it is unknown how to solve CDH or DL using a pairing</li> </ul>"},{"location":"themes/Elliptic%20Curves%20in%20Crypto/#pairing-based-cryptography","title":"Pairing-Based Cryptography","text":"<ul> <li>Cryptographic schemes can be defined based on the bilinearity of the pairing</li> <li>All known pairings (Weil, Tate, . . . ) are based on elliptic curves with small embedding degrees</li> <li>Can be used for: <ul> <li>Multi-party key exchange, blind signatures, threshold signatures etc.</li> </ul> </li> </ul>"},{"location":"themes/Elliptic%20Curves%20in%20Crypto/#three-party-dh-key-exchange","title":"Three-Party DH Key Exchange","text":"<p>Extending the classical DH key exchange to three (or more) parties requires \\(&gt;1\\) communication rounds.</p> <p>Using pairing-based cryptography, a single communication round is sufficient:</p> <ol> <li>Alice sends \\(A = aP\\) to Bob and Chris </li> <li>Bob sends \\(B = bP\\) to Alice and Chris </li> <li>Chris send \\(C = cP\\) to Alice and Bob </li> <li>All can compute \\(k = e(P, P)^{abc}\\), since</li> </ol> \\[ e(B,C)^a =e(A,C)^b =e(A,B)^c =e(P,P)^{abc} \\]"},{"location":"themes/Elliptic%20Curves%20in%20Crypto/#bls-signature-scheme","title":"BLS Signature Scheme","text":"<p>See more details here.</p> <ul> <li>BLS signatures are deterministic (other than RSA, DSA, etc.)</li> <li>Scheme proven to be EUF-CMA secure under the CDH assumption in the random oracle model</li> <li>Multiple signatures \\(S_1, . . . , S_n\\) can be aggregated into a single short signature \\(S = S_1 + \u00b7 \u00b7 \u00b7 + S_n\\), which can be verified step by step using: \\(e(hash(m_n), PK_n)\\)<ul> <li>(note that aggregated signatures are insecure due to the rogue public-key attack, but there are several defense strategies)</li> </ul> </li> </ul> <p>links: AC2 TOC - Elliptic Curves - Index</p>"},{"location":"themes/Elliptic%20Curves/","title":"Elliptic Curves","text":"<p>links: AC2 TOC - Elliptic Curves - Index</p> <ul> <li>An elliptic curve is a set of points \\((x, y)\\) satisfying the equation \\(y^2 = x^3 + ax + b\\)</li> <li>The variables \\(x\\) and \\(y\\) and the curve parameters \\(a\\) and \\(b\\) take values from a field \\(\\mathcal{F} = (F,+,\u2212,0,\u00d7,^{\u22121} ,1)\\)</li> <li>The special element \\(\\mathcal{O} \\in E_{a,b}(F)\\) is called point of infinity</li> </ul>"},{"location":"themes/Elliptic%20Curves/#curve-point-operations","title":"Curve Point Operations","text":"<p>Elliptic curves have the property that a line intersecting the curve in two points has always a third intersecting point with the curve. Two special cases exist:</p> <ul> <li>\\(P + P\\): Just draw a tangent trough point P</li> <li>\\(P + (-P)\\): Results in a vertical line which is \\(\\mathcal{O}\\)</li> </ul> <p>Through those rules we get an additive group \\(\\mathcal{G} = (E_{a,b}(F),+,-,\\mathcal{O})\\)</p> <p>Inverse of a point:</p> <p>\\(-P \\overset{\\text{def}}{=} \\begin{cases} \\mathcal{O}, &amp; \\text{if } P = \\mathcal{O}, \\\\ (x,-y), &amp; \\text{if } P = (x,y) \\end{cases}\\)</p>"},{"location":"themes/Elliptic%20Curves/#addition-of-curve-points","title":"Addition of Curve Points","text":"<p>All cases:</p> <p>\\(P + Q \\overset{\\text{def}}{=} \\begin{cases} \\mathcal{O}, &amp; \\text{if } P = -Q, \\\\ P, &amp; \\text{if } Q = \\mathcal{O} \\\\ Q, &amp; \\text{if } P = \\mathcal{O} \\\\ -R, &amp; \\text{if } P \\neq -Q \\text{ and } P,Q \\neq \\mathcal{O}\\end{cases}\\)</p> <p>Note that a single addition of two points \\(P \\neq Q\\) requires computing 3 multiplications and 1 multiplicative inverse in \\(F\\)</p>"},{"location":"themes/Elliptic%20Curves/#elliptic-curves-over-mathbbz_p","title":"Elliptic Curves over \\(\\mathbb{Z}_p\\)","text":"<p>If \\(p\\) is prime, then \\((\\mathbb{Z}_p,+,\u2212,0,\u00d7,\u22121 ,1)\\) is a field.</p> <p>As we are in \\(\\mathbb{Z}_p\\) now (modulo) we are always dealing with positive discrete numbers.</p> <p>Hasse\u2019s theorem provides an estimate of the number of points on an elliptic curve over a finite field:</p> <p>\\(|E_{a,b}(\\mathbb{Z}_p)| = p + 1 + \u03b5\\), for \\(|\u03b5| &lt; 2\\sqrt{p}\\), hence \\(q = |E_{a,b}(\\mathbb{Z}_p)| \u2248 p\\)</p> <p>The number of points in the finite field of \\(\\mathbb{Z}_p\\) is around \\(p\\)!</p>"},{"location":"themes/Elliptic%20Curves/#calculation","title":"Calculation","text":"<p>\\(P = (x_1,y_1), Q = (x_2,y_2)\\)</p> <p>\\(m = \\begin{cases} \\frac{y_2-y_1}{x_2-x_1}, &amp; \\text{if } P \\neq Q, \\\\ \\frac{3x^2_1 + a}{2y_1}, &amp; \\text{if } P = Q \\end{cases}\\)</p> <p>\\(P + Q=(x,y)=(m^2 \u2212 x_1 \u2212 x_2, m \\cdot (x_1 \u2212 x)\u2212 y_1)\\)</p> <p>links: AC2 TOC - Elliptic Curves - Index</p>"},{"location":"themes/Entropy/","title":"Entropy","text":"<p>links: AC1 TOC - Randomness - Index</p>"},{"location":"themes/Entropy/#definition","title":"Definition","text":"<p>Entropy is the measure of uncertainty, or disorder in a system.</p> <p>In the context of information theory, entropy is a measure of uncertainty, randomness, or disorder in a set of data. It's used to quantify the amount of information in a message (measurement of information). A message with high entropy can't be compressed well.</p> <p>Entropy itself isn't something you can physically capture or contain, it's a property or characteristic of a system or dataset that you can measure or calculate.</p>"},{"location":"themes/Entropy/#shannon-entropy","title":"Shannon Entropy","text":"<p>Formalised theory of information entropy.</p> <p>\\(\\sum_{i=1}^{n} p_i \\cdot \\log_{2}\\left(\\frac{1}{p_i}\\right)\\)</p> <p>or written differently</p> <p>\\(-\\sum_{i=1}^{n} p_i \\cdot \\log_{2}({p_i})\\)</p>"},{"location":"themes/Entropy/#entropy-sources","title":"Entropy sources","text":"<p>See Sources of Randomness</p> <p>We can combine multiple entropy sources with XOR. Doing this the entropy can only increase (or stay the same). Decrease is not possible. This also means that if we combine different entropy sources, our entropy is at least as strong as the strongest entropy source in the sources pool.</p> <p>Entropy is better when the least amount of trust is required to get it e.g. when we are closest to the source.</p>"},{"location":"themes/Entropy/#entropy-calculation","title":"Entropy calculation","text":"<p>Link to an example</p> <p>links: AC1 TOC - Randomness - Index</p>"},{"location":"themes/Ethics%20and%20Law/","title":"Ethics and Law","text":"<p>links: AC1 TOC - Intro - Index</p> <ul> <li>Why should we do something or not?</li> <li>Is it allowed to do it?</li> <li>Can we explain why something is good or bad?</li> </ul> <p>Questions like those arise when you are working with Crypto / Security. We need Ethics and Laws to answer those questions.</p>"},{"location":"themes/Ethics%20and%20Law/#ethics","title":"Ethics","text":"<ul> <li>Meta-ethics - Nature of moral judgements (universal, relative, nihilist). Why be moral?</li> <li>Normative ethics - Systematical approach to ethical questions</li> <li>Applied ethics - Answers to specific issues</li> </ul> <p>A few examples of normative ethics are mentioned below:</p>"},{"location":"themes/Ethics%20and%20Law/#virtues","title":"Virtues","text":"<p>A quality considered morally good or desirable in a person. Virtue (de: Tugend) ethics were advocated by Aristotle.</p> <ul> <li>Mercy (de: Barmherzigkeit)</li> <li>Discipline (de: Disziplin)</li> <li>Frugality (being economical with money or food) (de: Sparsamkeit)</li> <li>Industriousness (hard working) (de: Fleiss)</li> <li>Truthfulness (de: Ehrlichkeit / Aufrichtigkeit)</li> </ul> <p>Plato's four cardinal virtues:</p> <ul> <li>Wisdom (de: Weisheit)</li> <li>Justice (de: Gerechtigkeit)</li> <li>Fortitude (de: Tapferkeit)</li> <li>Temperance (moderation, restrain) (de: M\u00e4ssigung / Abstinenz)</li> </ul>"},{"location":"themes/Ethics%20and%20Law/#vices","title":"Vices","text":"<p>Immoral\u00a0or\u00a0wicked\u00a0behaviour</p> <ul> <li>Pride (de: Stolz)</li> <li>Jealousy (de: Eifersucht)</li> <li>Wrath (de: Zorn)</li> <li>Sloth (de: Faulheit)</li> <li>Avarice (greed, material gain) (de: Geiz)</li> <li>Gluttony  (excess eating, greed) (de: V\u00f6llerei)</li> <li>Lust (de: Lust)</li> </ul>"},{"location":"themes/Ethics%20and%20Law/#deontology","title":"Deontology","text":"<p>Considering the factors of one\u2019s duties and one\u2019s rights. Deontology holds that the morality of an action should be based on whether that action itself is right or wrong under a series of rules, and debates what the rules should be.</p>"},{"location":"themes/Ethics%20and%20Law/#kants-categorical-imperative","title":"Kant's Categorical Imperative","text":"<p>Act only according to that maxim by which you can also will that it would become a universal law.</p> <p>Act in such a way that you treat humanity, whether in your own person or in the person of any other, never merely as a means to an end, but always at the same time as an end.</p>"},{"location":"themes/Ethics%20and%20Law/#utilitarianism","title":"Utilitarianism","text":"<p>Utilitarianism holds that an action is right if it leads to the most happiness for the greatest number of people.</p>"},{"location":"themes/Ethics%20and%20Law/#law-and-ethics","title":"Law and Ethics","text":"<p>We need to write down laws based on \"our\" ethics. This should be done by a political process. An examples of this is the First Amendment of the United States.</p> <p>Congress shall make no law respecting an establishment of religion, or prohibiting the free exercise thereof; or abridging the freedom of speech, or of the press; or the right of the people peaceably to assemble, and to petition the government for a redress of grievances.</p>"},{"location":"themes/Ethics%20and%20Law/#ethical-case-study","title":"Ethical Case Study","text":"<p>Provide a systematic way to determine an ethical cause of action for a particular ethical problem.</p> <ul> <li>Read and examine the case thoroughly</li> <li>Identify key problems:<ul> <li>Why do the problems exist?  </li> <li>Which virtues and vices are implicated (at the center, or peripherally)? </li> <li>Which laws or rules are implicated (at the center, or peripherally)?  </li> <li>What are the potential consequences (direct, indirect)?</li> </ul> </li> <li>Uncover possible resolutions. Carefully consider the implications of those. </li> <li>Propose an ethical resolution and justify it.  </li> <li>For dilemmas, propose strategies to avoid them in the future.</li> </ul>"},{"location":"themes/Ethics%20and%20Law/#hacker-ethics","title":"Hacker ethics","text":"<p>The hacker ethic refers to the feelings of right and wrong, to the ethical ideas this community of people had \u2014 that knowledge should be shared with other people who can benefit from it, and that important resources should be utilized rather than wasted.\u201d \u2013Richard Stallman</p> <p>Different ethics exist:</p> <ul> <li>Steven Levy</li> <li>CCC (Chaos Computer Club)</li> <li>IEEE (Institute of Electrical and Electronics Engineers)</li> </ul> <p>A few examples:</p> <ul> <li>Sharing</li> <li>Decentralization</li> <li>Beurteile einen Hacker nach dem, was er tut, und nicht nach \u00fcblichen Kriterien wie Aussehen, Alter, Herkunft, Spezies, Geschlecht oder gesellschaftliche Stellung.</li> <li>To reject bribery in all its forms</li> <li>To improve the understanding by individuals and society of the capabilities and societal implications of conventional and emerging technologies, including intelligent systems</li> </ul> <p>links: AC1 TOC - Intro - Index</p>"},{"location":"themes/FACTORING%20%26%20DL%20Algorithms/","title":"FACTORING &amp; DL Algorithms","text":"<p>links: AC2 TOC - Number-Theoretic Algorithms and Hardness Assumptions - Index</p>"},{"location":"themes/FACTORING%20%26%20DL%20Algorithms/#best-known-factoring-and-dl-algorithms","title":"Best Known FACTORING and DL Algorithms","text":""},{"location":"themes/FACTORING%20%26%20DL%20Algorithms/#baby-step-giant-step-algorithm","title":"Baby-Step-Giant-Step Algorithm","text":"<ul> <li>see video en: Youtube</li> </ul>"},{"location":"themes/FACTORING%20%26%20DL%20Algorithms/#recommended-groups-sizes","title":"Recommended Groups Sizes","text":"<ul> <li>For subgroups, the Pollard's Rho algorithm can be better than the index calculus, so a minimum value \\(q\\) must also be defined.</li> <li>Check actual recommendations for key length on Keylenght.com</li> </ul> <p>links: AC2 TOC - Number-Theoretic Algorithms and Hardness Assumptions - Index</p>"},{"location":"themes/Fog%20of%20Trust/","title":"Fog of Trust","text":"<p>links: AC2 TOC DPKI - Index</p>"},{"location":"themes/Fog%20of%20Trust/#problems-of-web-of-trust","title":"Problems of Web of Trust","text":"<ul> <li>publishing who certified whom exposes the social graph</li> <li>Solution: do not publish the graph, use \"secure multi-part computation\" (SMC) protocol for private set intersection cardinality with signatures.<ul> <li>We will only consider paths with one intermediary</li> </ul> </li> </ul> <p>Measuring and comparing private set intersection cardinality means that we are able to calculate how much similarities two sets have. To do this without exposing the social graph (which would leak information about who trusts whom), we can use SMC and sign the result to make it verifiable for the counterpart. This method is used in the straw-man protocol.</p>"},{"location":"themes/Fog%20of%20Trust/#straw-man-protocol","title":"Straw-man protocol","text":"<p>a straw-man proposal is a brainstormed simple draft proposal intended to generate discussion of its disadvantages and to spur the generation of new and better proposal.</p>"},{"location":"themes/Fog%20of%20Trust/#version-1-straw-man-protocol","title":"Version 1: Straw-man protocol","text":"<ul> <li>Alice wants to compute \\(n := |\\mathcal{L_A} \\cap \\mathcal{L_B}|\\), where \\(\\mathcal{L_A}\\) and \\(\\mathcal{L_B}\\) are the sets of trusted public keys of Alice (as verifiers) and Bob (as signers). \\(n\\) describes the number of keys which both trust. If \\(n\\) is high enough, Alice might trust Bob and therefore his list of public keys of signers. If Alice trusts enough verifiers, whose signatures are deemed trustworthy by Bob, Alice might trust the signature ob Bob's trusted signers.</li> <li>suppose each user has a private key \\(c_i\\) and the corresponding public key is \\(C_i := g^{c_i}\\) where \\(g\\) is the generator</li> </ul> <p>Setup</p> <ul> <li>\\(\\mathcal{L_A}\\): set of public keys representing Alice trusted verifiers</li> <li>\\(\\mathcal{L_B}\\): set of public keys representing Bob's signers</li> <li>Alice picks an ephemeral private scalar \\(t_A \\in \\mathbb{F}_p\\), Bob picks \\(t_B \\in \\mathbb{F}_p\\)</li> </ul> <p></p> <ol> <li>Alice sends a set \\(\\mathcal{X}_A\\) which contains the trusted verifiers public keys to the power of the ephemeral private scalar \\(t_A\\) to Bob (blinded trusted verifiers)</li> <li>Bob calculates two sets: <ol> <li>Set \\(\\mathcal{X}_B\\) which contains the trusted signers public keys to the power of the ephemeral private scalar \\(t_B\\) and </li> <li>Set \\(\\mathcal{Y}_B\\) which contains the blinded verifiers of Alice to the power of the ephemeral private scalar \\(t_B\\)</li> <li>Bob then sends \\(\\mathcal{X}_B\\) and \\(\\mathcal{Y}_B\\) to Alice</li> </ol> </li> <li>Alice can now calculate \\(\\mathcal{Y}_A\\) by taking each element of Bob's \\(\\mathcal{X}_B\\) (blinded trusted signers of Bob)</li> <li>Alice can now compare \\(\\mathcal{Y}_A\\) with \\(\\mathcal{Y}_B\\) and count the amount of equal values which gives the value \\(n = |\\mathcal{Y}_A \\cap \\mathcal{Y}_B|\\) she is looking for (linear cost).</li> </ol> <p>Since the trusted verifiers of Alice and the trusted signers of Bob are blinded by their respective ephemeral private scalars \\(t_A\\) and \\(t_B\\) (which leads to some double blinding behaviour), the identities of the verifiers and signers is not leaked and therefore the social graph remains secret.</p> <p>(Because SMC works on homomorphic groups, this works because the values structurally remain the same, due to the properties of the mapping function \\(f\\) between the different groups)</p> <p>Attacks</p> <p></p> <p>This means that if Bob can control two verifiers of Alice's trusted verifiers set, Bob can betray her by manipulating the resulting \\(n\\) for Alice as he suggests by choosing a sub quantity \\(K\\) of the Field \\(\\mathbb{F}_p\\) such that the quantities \\(\\mathcal{X}_B\\) and \\(\\mathcal{Y}_B\\) contain as much trusted signers as he wants make Alice believe are intersecting with her trusted verifiers. Since the blinded trusted verifiers of \\(\\mathcal{X}_A\\) are randomized (hash), Alice cannot find out that Bob is blinding the same verifier \\(k\\)-times.</p>"},{"location":"themes/Fog%20of%20Trust/#version-1-cut-choose","title":"Version 1: Cut &amp; choose","text":"<p>The above described attack can be omitted by implementing a Cut &amp; Choose mechanism as follows:</p> <ul> <li>assume a fixed system security parameter \\(k \\geq 1\\)</li> <li>let Bob use secrets \\(t_{B,i}\\) for \\(i \\in \\{1,...,k\\}\\), and let \\(\\mathcal{X}_{B,i}\\) and \\(\\mathcal{Y}_{B,i}\\) be blinded sets over the different \\(t_{B,i}\\) as in the straw-man version</li> <li>For any list or set \\(Z\\), define \\(Z' := \\{h(x)|x \\in Z\\}\\)</li> </ul> <p></p> <ol> <li>Alice again computes the blinded trusted verifiers Set \\(\\mathcal{X}_A\\) but sorts the set before sending it to Bob</li> <li>Bob responds with \\(k\\) commitments \\(\\mathcal{X'}_{B_i}\\) and \\(\\mathcal{Y'}_{B_i}\\) for \\(i \\in \\{1,...,k\\}\\). </li> <li>Alice now chooses a subset \\(J\\) of all the commitments supplied by Bob and sends the subset of interest to Bob</li> <li>Bob then reveals \\(\\mathcal{X}_{B_j}\\) for \\(j \\in J\\) plus all private ephemeral scalars \\(t_{B_j}, j \\notin J\\) which are not part of the chosen subset \\(J\\).</li> <li>Alice can now verify that Bob is not lying to her: <ol> <li>Alice crosschecks all commitments inside \\(\\mathcal{Y'}_{B_j}\\) for all received private ephemeral scalars \\(t_{B_j}, j \\notin J\\) of Bob</li> <li>Verifies the commitment of all \\(\\mathcal{X}_{B_j}, j \\in J\\) and computes \\(\\mathcal{Y}_{A_j}\\) by taking each element of Bob's trusted signers set to the power of Alice ephemeral private scalar \\(t_A\\) for all \\(j \\in J\\).</li> <li>Alice can now also blind her \\(\\mathcal{Y}_{A_j}\\) to receive \\(\\mathcal{Y'}_{A_j}\\). Since she earlier received \\(\\mathcal{Y'}_{B_i}\\) and knows the subset \\(J\\) (since she chose it earlier), she can now calculate \\(n = |\\mathcal{Y'}_{A_j} \\cap \\mathcal{Y'}_{B_j}|\\) for each $j \\in J. Each received \\(n\\) should be equal to the others. If this is the case Alice can be sure, that Bob didn't fool her into trusting untrustworthy signers.</li> </ol> </li> </ol> <p>Verification</p> <p>(for explanation check points 5 to X above)</p> <p></p>"},{"location":"themes/Fog%20of%20Trust/#version-2-private-set-intersection-with-subscriber-signatures","title":"Version 2: Private Set Intersection with Subscriber Signatures","text":"<ul> <li>Naturally, signers are willing to sign that Bob's key is Bob's key</li> <li>We still want the identities of the signer to be private!</li> <li>BLS signatures are compatible with our blinding \\(\\rightarrow\\) integrate them with our cut &amp; choose version of the protocol</li> <li>Costs are linear in set size, unlike prior work this needs no CA</li> </ul> <p>links: AC2 TOC DPKI - Index</p>"},{"location":"themes/GNS/","title":"GNU Name System (GNS)","text":"<p>links: AC2 TOC DPKI - Index</p>"},{"location":"themes/GNS/#overview","title":"Overview","text":"<p>Properties</p> <ul> <li>interoperable with DNS</li> <li>decentralized name system with secure memorable names</li> <li>delegation used to achieve transitivity (using zones of other users)</li> <li>also supports globally unique, secure identifiers (\".PUBLIC-KEY\")</li> <li>achieves query and response privacy</li> <li>censorship-resistant</li> <li>reliable revocation using flooding with proof-of-work</li> <li>provides alternative public key infrastructure<ul> <li>Trust paths explicit, trust agility</li> <li>Simplified key exchange compared to Web of Trust</li> </ul> </li> </ul> <p></p>"},{"location":"themes/GNS/#general","title":"General","text":"<p>The GNU Name System GNS is specified in a RFC</p> <p>We can see that other than in DNS there is no centralized server which manages records. Each GNS client is part of a P2P network which maintains a DHT containing address information. In addition to the DHT also an individual zone database is kept, which stores information for address resolution. Each zone consists of a public/private ECDSA key pair. The public key also uniquely identifies the zone it defines.</p>"},{"location":"themes/GNS/#publishing-records","title":"Publishing Records","text":"<p>To publish records, a RRBLOCK is written to the DHT by using the <code>PUT(key, value)</code> primitive such a DHT has. The <code>key</code> is derived from the zone key <code>zk</code> as follows: </p> <pre><code>PRK_h := HKDF-Extract (\"key-derivation\", zk)\nh := HKDF-Expand (PRK_h, label | \"gns\", 512 / 8)\nd_h := h * d mod L\nzk_h := h mod L * zk\nq := SHA512 (zk_h) \n</code></pre> <p>The <code>value</code> is a <code>RRBLOCK</code> which contains information about the entry. Each <code>RRBLOCK</code> starts with the signature of the block. Only the <code>PUBLIC-KEY</code> does not belong to the signature. The <code>PUBLIC-KEY</code> follows the signature. This <code>PUBLIC-KEY</code> can be used to verify the data block. After the <code>PUBLIC-KEY</code>, <code>SIZE</code>, <code>PURPOSE</code> and <code>EXPIRATION</code> follow. They define the size of the <code>BDATA</code> block, the purpose is always set to <code>15</code> (network byte order \\(\\rightarrow\\) Big Endian \\(\\rightarrow\\) MSB) and the expiration defines when the <code>RRBLOCK</code> should be removed from the DHT. Then follows the <code>BDATA</code> block which contains the actual information about the resource record. The <code>BDATA</code> block is encrypted using a key <code>K</code> and an <code>IV</code> which are derived as follows:</p> <pre><code>PRK_k := HKDF-Extract (\"gns-aes-ctx-key\", zk)\nPRK_iv := HKDF-Extract (\"gns-aes-ctx-iv\", zk)\nK := HKDF-Expand (PRK_k, label, 512 / 8);\nIV := HKDF-Expand (PRK_iv, label, 256 / 8)\n</code></pre> <p>where <code>zk</code> is the zone key. (RFC-5869 which specifies HKDF)</p>"},{"location":"themes/GNS/#name-resolution","title":"Name Resolution","text":"<p>The resolution of names must start with a given starting zone indicated by a <code>zk</code> public key. The resolution then recursively iterates over the to be resolved domain from right to left token by token. For each token the DHT store-key <code>q</code> is derived as described above. With the derived <code>q</code> we can load entries from the DHT and recursively resolve the target. We can decrypt the encrypted <code>BDATA</code> by deriving keys as explained above. The name resolution can handle <code>GNS2DNS</code> records which allow interoperability with DNS.</p>"},{"location":"themes/GNS/#how-do-we-gain-trust-agility-with-gns","title":"How do we gain Trust agility with GNS?","text":"<p>Since we manage our local zone database and our lookups will start there, we can choose which paths we take to resolve an address. Maybe I will trust Cynthia more than Bob to resolve a certain domain. So I can start my lookup in the DHT with Cynthia's zone to resolve an address. But if for some reason I think Bob is more trustworthy now, I can simply update my local zone database and do my lookups over Bob's zone instead of Cynthia's. </p>"},{"location":"themes/GNS/#delegation","title":"Delegation","text":"<ul> <li>Bob creates a local zone with his public key and some records (e.g. www)</li> <li>Alice learns Bob's public key and creates delegation to this zone under label bob</li> <li>Alice can reach Bob's webserver via \"www.bob.gnu\"</li> </ul>"},{"location":"themes/GNS/#name-resolution_1","title":"Name Resolution","text":""},{"location":"themes/GNS/#cryptography","title":"Cryptography","text":""},{"location":"themes/GNS/#cryptographic-identifiers","title":"Cryptographic identifiers","text":"<ul> <li>Zone are identified by a public key</li> <li>\"alice.bob.PUBLIC-KEY\" is perfectly legal in GNS \\(\\rightarrow\\) Globally unique identifiers</li> </ul>"},{"location":"themes/GNS/#summary","title":"Summary","text":"<p>Privacy Summary</p> <p></p> <p>Key management summary</p> <p></p> <p>Conclusion</p> <ul> <li>DNS - globalist</li> <li>DNSSEC - authoritarian</li> <li>Namecoin - libertarian (US)</li> <li>RAINS - nationalist</li> <li>GNS - anarchist</li> </ul> <p>links: AC2 TOC DPKI - Index</p>"},{"location":"themes/GNU%20Taler%20Bank%20Integration/","title":"GNU Taler Bank Integration","text":"<p>links: AC2 TOC GNU Taler - Index</p> <p>...as a bank</p> <ol> <li>Create an escrow bank account for the exchange with EBICS access    </li> <li>Provision offline signing machine (or account during testing)</li> <li>Provision two PostgreSQL databases (for LibEuFin Nexus and exchange)</li> <li>Provision user-facing exchange service and secmod processes</li> <li>Provision LibEuFin Nexus (connected to escrow account and providing an internal API to the exchange)</li> <li> <p>Test using the \u201ctaler-wallet-cli\u201c</p> </li> <li> <p>LibEuFin Nexus: Free software tooling for European FinTech</p> </li> <li>EBICS: Electronic Banking Internet Communication Standard</li> </ol> <p>The Taler exchange needs to communicate with the core banking system ...</p> <ul> <li>to query for transactions into the exchange\u2019s escrow account</li> <li>to initiate payments of aggregated Taler deposits to merchants</li> </ul> <p>links: AC2 TOC GNU Taler - Index</p>"},{"location":"themes/GNU%20Taler%20Details/","title":"GNU Taler Details","text":"<p>links: AC2 TOC GNU Taler - Index</p>"},{"location":"themes/GNU%20Taler%20Details/#withdrawing-coins","title":"Withdrawing coins","text":""},{"location":"themes/GNU%20Taler%20Details/#payment","title":"Payment","text":""},{"location":"themes/GNU%20Taler%20Details/#double-spending-problem","title":"Double Spending Problem","text":"<p>A lot of logic is needed to ensure double spending does not happen. (Multiple keys, key rotation etc.)</p> <p>Also, the exchange needs a database to detect double spending.</p>"},{"location":"themes/GNU%20Taler%20Details/#giving-change","title":"Giving change","text":"<p>It would be inefficient to pay EUR 100 with 1 cent coins! </p> <ul> <li>Denomination key represents value of a coin.  </li> <li>Exchange may offer various denominations for coins. </li> <li>Wallet may not have exact change!</li> <li>Usability requires ability to pay given sufficient total funds. </li> </ul> <p>Key goals:</p> <ul> <li>maintain unlinkability</li> <li>maintain taxability of transactions    </li> </ul> <p>Method:</p> <ul> <li>Contract can specify to only pay partial value of a coin.</li> <li>Exchange allows wallet to obtain unlinkable change for remaining coin value.</li> </ul>"},{"location":"themes/GNU%20Taler%20Details/#refresh-protocol","title":"Refresh protocol","text":"<p>Cut-and-choose zero-knowledge proof is needed here.</p> <ul> <li>Customer asks exchange to convert old coin to new coin</li> <li>Protocol ensures new coins can be recovered from old coin<ul> <li>New coins are owned by the same entity!</li> </ul> </li> </ul> <p>Thus, the refresh protocol allows:  </p> <ul> <li>To give unlinkable change.  </li> <li>To give refunds to an anonymous customer.  </li> <li>To expire old keys and migrate coins to new ones. </li> <li>To handle protocol aborts.</li> </ul> <p>links: AC2 TOC GNU Taler - Index</p>"},{"location":"themes/GNU%20Taler%20Key%20Management/","title":"GNU Taler Key Management","text":"<p>links: AC2 TOC GNU Taler - Index</p> <p>Taler has many types of keys:</p> <ul> <li>Coin keys  </li> <li>Denomination keys  </li> <li>Online message signing keys </li> <li>Offline key signing keys</li> <li>Merchant keys  </li> <li>Auditor key  </li> <li>Security module keys </li> <li>Transfer keys </li> <li>Wallet keys  </li> <li>TLS keys</li> <li>DNSSEC keys</li> </ul>"},{"location":"themes/GNU%20Taler%20Key%20Management/#offline-keys","title":"Offline Keys","text":"<p>Both exchange and auditor use offline keys.</p> <ul> <li>Those keys must be backed up and remain highly confidential!</li> <li>We recommend that computers that have ever had access to those keys to NEVER again go online.</li> </ul>"},{"location":"themes/GNU%20Taler%20Key%20Management/#online-keys","title":"Online Keys","text":"<p>The exchange needs RSA and EdDSA keys to be available for online signing. The public keys are certified using Taler\u2019s public key infrastructure (which uses offline-only keys).</p> <p></p> <p>Compartmentalise where possible. Different processes are used that have limited access to the keys. Minimal permissions given everywhere.</p> <p>links: AC2 TOC GNU Taler - Index</p>"},{"location":"themes/GNU%20Taler%20Overview/","title":"GNU Taler Overview","text":"<p>links: AC2 TOC GNU Taler - Index</p> <p>Digital cash, made socially responsible.</p>"},{"location":"themes/GNU%20Taler%20Overview/#definition","title":"Definition","text":"<p>Taler is</p> <ul> <li>a Free/Libre software payment system infrastructure project</li> <li>... with a surrounding software ecosystem</li> <li>... and a company (Taler Systems S.A.) and community that wants to deploy it as widely as possible.</li> </ul> <p>However, Taler is </p> <ul> <li>not a currency </li> <li>not a long-term store of value  </li> <li>not a network or instance of a system  </li> <li>not decentralized  </li> <li>not based on proof-of-work or proof-of-stake  </li> <li>not a speculative asset / \u201cget-rich-quick scheme\u201d</li> </ul>"},{"location":"themes/GNU%20Taler%20Overview/#design-goals","title":"Design goals","text":"<p>GNU Taler must ...</p> <ol> <li>... be implemented as free software.</li> <li>... protect the privacy of buyers.</li> <li>... must enable the state to tax income and crack down on illegal business activities.</li> <li>... prevent payment fraud.</li> <li>... only disclose the minimal amount of information necessary.</li> <li>... be usable.</li> <li>... be efficient.</li> <li>... avoid single points of failure.</li> <li>... foster competition.</li> </ol>"},{"location":"themes/GNU%20Taler%20Overview/#vision","title":"Vision","text":"<ul> <li>Be paid to read advertising, starting with spam </li> <li>Give welfare without intermediaries taking huge cuts </li> <li>Forster regional trade via regional currencies  </li> <li>Eliminate corruption by making all income visible  </li> <li>Stop the mining by making crypto-currencies useless for anything but crime</li> </ul>"},{"location":"themes/GNU%20Taler%20Overview/#regulatory-features-for-central-banks","title":"Regulatory Features for Central Banks","text":"<ul> <li>Central bank issues digital coins equivalent to issuing cash</li> <li>Architecture with consumer accounts at commercial banks</li> <li>Withdrawal limits and denomination expiration</li> <li>Income transparency and possibility to set fees</li> <li>Revocation protocols and loss limitations</li> <li>Privacy by cryptographic design not organisational compliance</li> </ul>"},{"location":"themes/GNU%20Taler%20Overview/#cbdc-central-bank-digital-currency","title":"CBDC (Central Bank Digital Currency)","text":"<ul> <li>Taler replicates physical cash rather than bank deposits</li> <li>Taler has unique design principles and regulatory features that align with CBDC requirements</li> <li>ECB (Euro) survey has identified privacy as a primary requirement of end users</li> </ul> <p>Online vs. Offline CBDC:</p> <ol> <li>Online-first</li> <li>Limited offline mode (counterparty risk)</li> <li>Physical cash for emergencies</li> </ol>"},{"location":"themes/GNU%20Taler%20Overview/#taxability","title":"Taxability","text":"<p>We say Taler is taxable because:  </p> <ul> <li>Merchant\u2019s income is visible from deposits. </li> <li>Hash of contract is part of deposit data.  </li> <li>State can trace income and enforce taxation.</li> </ul>"},{"location":"themes/GNU%20Taler%20Overview/#architecture","title":"Architecture","text":"<p>Taler consists of different components:</p> <ul> <li>Exchange (Core)</li> <li>Merchant</li> <li>Wallet</li> </ul> <p></p> <p>Integrated into our banking system:</p> <p></p> <p>links: AC2 TOC GNU Taler - Index</p>"},{"location":"themes/GNU%20Taler%20and%20Blockchains/","title":"GNU Taler and Blockchains","text":"<p>links: AC2 TOC GNU Taler - Index</p>"},{"location":"themes/GNU%20Taler%20and%20Blockchains/#depolymerization","title":"Depolymerization","text":"<ul> <li>De - Undo something</li> <li>poly - \"many\"</li> <li>mer - \"part\"</li> <li>ization - act, process, or result of doing something</li> </ul> <p>Polymer \\(\\rightarrow\\) PET / Plastic</p> <p></p>"},{"location":"themes/GNU%20Taler%20and%20Blockchains/#challenges","title":"Challenges","text":"<p>Taler Metadata</p> <ul> <li>Metadata are required to link a wallet to credits and allow merchant to link deposits to debits</li> <li>Putting metadata in blockchain transactions can be tricky </li> </ul> <p>Blockchain based cryptocurrencies</p> <ul> <li>Blockchain transactions lack finality (fork)</li> <li>Transactions can be stuck for a long time (mempool)</li> </ul>"},{"location":"themes/GNU%20Taler%20and%20Blockchains/#architecture","title":"Architecture","text":"<p>DLT: Distributed Ledger</p> <p></p> <p>links: AC2 TOC GNU Taler - Index</p>"},{"location":"themes/GNUnet/","title":"GNUnet","text":"<p>links: AC2 TOC DPKI - Index</p>"},{"location":"themes/GNUnet/#internet-design-goals-david-clark-1998","title":"Internet Design Goals, David Clark, 1998","text":"<ol> <li>Internet communication must continue despite loss of networks or gateways.</li> <li>The Internet must support multiple types of communications service.</li> <li>The Internet architecture must accommodate a variety of networks.</li> <li>The Internet architecture must permit distributed management of its resources.</li> <li>The Internet architecture must be cost effective.</li> <li>The Internet architecture must permit host attachment with a low level of effort.</li> <li>The resources used in the internet architecture must be accountable.</li> </ol>"},{"location":"themes/GNUnet/#collateral-damage","title":"Collateral Damage","text":"<ul> <li>HACIENDA by JTRIG: port scans entire countries using nmap (randomly scans every ip identified in that country)</li> <li>ORB: CSECs Operational Relay Box, 2-3 times/year 1 day focused effort to acquire as many new ORBs as possible in as many non 5-Eyes countries as possible</li> <li>RAMPART-A by NSA: global mass surveillance, gain access to high-capacity international fiber-optic cables, collect data on the host countries citizens</li> <li> <p>TREASUREMAP by NSA: capability for building a near real-time, interactive map of the global internet</p> </li> <li> <p>You should care!</p> </li> <li>No privacy \\(\\rightarrow\\) no free press \\(\\rightarrow\\) No liberal democracy</li> <li>Administrators have power, power attracts mexican drug cartels \\(\\rightarrow\\) Goal: the cartel has nothing to gain from abduction your family and will not bother with it. The public system design must be clear that you are not able to assist, also under these circumstances.</li> </ul>"},{"location":"themes/GNUnet/#gnunet-design-goals","title":"GNUnet Design Goals","text":"<ol> <li>GNUnet must be implemented as free software.</li> <li>The GNUnet must only disclose the minimal amount of information necessary.</li> <li>The GNUnet must be decentralised and survive Byzantine failures in any position in the network.</li> <li>The GNUnet must make it explicit to the user which entities must be trustworthy when establishing secured communications.</li> <li>The GNUnet must use compartmentalization to protect sensitive information.</li> <li>The GNUnet must be open and permit new peers to join.</li> <li>The GNUnet must be self-organizing and not depend on administrators.</li> <li>The GNUnet must support a diverse range of applications and devices.</li> <li>The GNUnet architecture must be cost effective.</li> <li>The GNUnet must provide incentives for peers to contribute more resources than they consume.</li> </ol> <p>links: AC2 TOC DPKI - Index</p>"},{"location":"themes/Generating%20%28Random%29%20Primes/","title":"Generating (Random) Primes","text":"<p>links: AC2 TOC - Number-Theoretic Algorithms and Hardness Assumptions - Index</p>"},{"location":"themes/Generating%20%28Random%29%20Primes/#generating-random-k-bit-primes","title":"Generating Random k-Bit Primes","text":"<ul> <li>First number can't be 0 because it has to be at least \\(2^{k-1}\\) and last bit is 1 to avoid even numbers</li> </ul>"},{"location":"themes/Generating%20%28Random%29%20Primes/#testing-primality-naive-approach","title":"Testing Primality (Naive Approach)","text":""},{"location":"themes/Generating%20%28Random%29%20Primes/#testing-primality-probabilistic-approach","title":"Testing Primality (Probabilistic Approach)","text":"<p>Instead of completely testing all possibilities and making sure that a number is prime, a function \\(isComposite()\\) is used to decide that \\(n\\) is likely prime. Users can decide themselves how sure they want to be if \\(n\\) is prime by running the algorithm multiple times.</p>"},{"location":"themes/Generating%20%28Random%29%20Primes/#fermat","title":"Fermat","text":"<p>This check is not enough because Carmichael Numbers would return false even though they aren't prime (should return true). Miller-Rabin algorithm solves this.</p>"},{"location":"themes/Generating%20%28Random%29%20Primes/#miller-rabin","title":"Miller-Rabin","text":"<ul> <li>the Miller-Rabin primality test is most widely used in practice</li> <li>the failure probability of a single test is \\(\\alpha \\leq 0.25\\)</li> </ul> <p>Example</p> <p>Suppose we have an odd integer \\(n &gt; 3\\) that we want to test for primality, and we've chosen a random integer a in the range \\([2, n-2]\\).</p> <ol> <li>Write \\(n-1\\) as \\(2^r * d\\), where \\(d\\) is an odd number (\\(r\\) must be as large as possible).</li> <li>Compute \\(x = a^d \\mod n\\) using fast exponentiation.</li> <li>If \\(x\\) equals \\(1\\) or \\(n-1\\), then n passes the test for base \\(a\\).</li> <li>Otherwise, square \\(x\\) repeatedly mod \\(n\\) up to \\(r-1\\) times. If, in any of these squarings, we get \\(n-1\\), then \\(n\\) passes the test for base \\(a\\).</li> <li>If we haven't found \\(1\\) or \\(n-1\\) by this point, then \\(n\\) is composite, and we say that \\(a\\) is a witness to the compositeness of \\(n\\).</li> </ol> <p>Let's consider an example. Suppose we want to check whether \\(n = 221\\) is prime, and we choose \\(a = 174\\).</p> <ol> <li>We can write \\(220\\) as \\(2^2 * 55\\), so \\(r = 2\\) and \\(d = 55\\).</li> <li>Compute \\(x = 174^55 \\mod 221\\), which equals \\(47\\).</li> <li>Since \\(x\\) is not \\(1\\) or \\(220\\), we square \\(x\\) to get \\(47^2 \\mod 221 = 220\\).</li> <li>At this point, we've found \\(220\\) (which is \\(n-1\\)), so \\(221\\) passes the test for base \\(174\\). Either \\(221\\) is prime or \\(174\\) is a strong liar for \\(221\\)</li> </ol> <p>We do the same for \\(a = 137\\)</p> <ol> <li>Compute \\(x = 137^{55} \\mod 221\\), which equals \\(188\\).</li> <li>Since \\(x\\) is not \\(1\\) or \\(220\\), we square \\(x\\) to get \\(188^2 \\mod 221 = 205\\).</li> <li>We squared \\(x\\) once (\\(r-1\\)) and have not reached \\(x = 1\\) or \\(x = 220\\) hence \\(137\\) is a witness that \\(221\\) is not prime</li> </ol> <p>links: AC2 TOC - Number-Theoretic Algorithms and Hardness Assumptions - Index</p>"},{"location":"themes/Generating%20Random%20Group%20Elements%20and%20Generators/","title":"Generating Random Group Elements and Generators","text":"<p>links: AC2 TOC - Number-Theoretic Algorithms and Hardness Assumptions - Index</p>"},{"location":"themes/Generating%20Random%20Group%20Elements%20and%20Generators/#generating-random-bit-strings","title":"Generating Random Bit Strings","text":"<p>\\(randBits(k)\\) generates a random bit string of length k picked uniformly at random from the set \\(\\{0, 1\\}^k\\) (set of all strings of length \\(k\\) which can be formed from 0 and 1)</p> <p>We write \\(r \\leftarrow randBits(k)\\) to denote the integer \\(r= \\displaystyle\\sum_{i=0}^{k-1}(r_i * 2^i \\in\\{0,...,2^k-1\\})\\)</p>"},{"location":"themes/Generating%20Random%20Group%20Elements%20and%20Generators/#generating-random-elements-of-z_n","title":"Generating Random Elements of \\(Z_n\\)","text":"<ul> <li>\\(Z_n\\) = additive group of integers modulo n</li> <li>\\(randBits(k) \\mod n\\) is not a proper solution because this would cause some numbers to be more likely to appear than others. </li> </ul>"},{"location":"themes/Generating%20Random%20Group%20Elements%20and%20Generators/#generating-random-elements-of-z_ub-setminus-z_lb","title":"Generating Random Elements of \\(Z_{ub} \\setminus Z_{lb}\\)","text":""},{"location":"themes/Generating%20Random%20Group%20Elements%20and%20Generators/#generating-random-elements-of-z_n_1","title":"Generating Random Elements of \\(Z_n^*\\)","text":"<ul> <li>\\(Z_n^*\\) = multiplicative group of integers modulo n and set of numbers coprime with n</li> <li>\\(r\\) can only be part of \\(Z_n^*\\) if it is coprime to \\(n\\) (\\(gcd(r,n) = 1\\)). Every element of the group needs to have a multiplicative inverse \\(b \\in Z_n^*\\) such that \\((a*b) \\mod n = 1\\). Being coprime to \\(n\\) guarantees that the number \\(r\\) has a multiplicative inverse modulo \\(n\\).</li> </ul>"},{"location":"themes/Generating%20Random%20Group%20Elements%20and%20Generators/#generating-random-elements-of-g_q-subset-z_p","title":"Generating Random Elements of \\(G_q \\subset Z_p^*\\)","text":"<ul> <li>\\(p\\) is a safe prime if \\(p = 2q + 1\\) where \\(q\\) is also prime</li> </ul> <p>Quadratic residue</p> <p>A quadratic residue modulo p is a number that can be represented as a perfect square mod p. For example, if \\(p = 7\\), the quadratic residues are the remainders when the squares of the numbers \\(\\{1, 2, ..., 6\\}\\) are divided by \\(7\\).</p> <ol> <li>\\(1^2 \\mod 7 = 1\\)</li> <li>\\(2^2 \\mod 7 = 4\\)</li> <li>\\(3^2 \\mod 7 = 2\\)</li> <li>\\(4^2 \\mod 7 = 2\\)</li> <li>\\(5^2 \\mod 7 = 4\\)</li> <li>\\(6^2 \\mod 7 = 1\\)</li> </ol> <p>So, the quadratic residues modulo \\(7\\) are \\(\\{1, 2, 4\\}\\).</p>"},{"location":"themes/Generating%20Random%20Group%20Elements%20and%20Generators/#generating-random-group-elements","title":"Generating Random Group Elements","text":"<ul> <li>Given \\(g \\in G\\) and \\(q = |G|\\), \\(g\\) is a generator of \\(G\\) if for every element \\(h\\) in \\(G\\), there exists an integer \\(i\\) such that \\(g^i = h\\) (\"modulo\" the operation of the group).</li> <li>avoid exponential function \\(\\rightarrow\\) expensive</li> </ul>"},{"location":"themes/Generating%20Random%20Group%20Elements%20and%20Generators/#testing-for-generator","title":"Testing for Generator","text":"<p>Algorithm is not part of the exam</p> <p>In a cyclic group \\(G\\) of order \\(q\\), an element \\(g\\) is a generator if and only if it can generate every other element in the group via repeated application of the group operation. In the case of a multiplicative group, this means for every element \\(h\\) in \\(G\\), there is an integer \\(i\\) such that \\(g^i = h\\).</p> <p>The order of an element \\(g\\) in \\(G\\), denoted \\(ord(g)\\), is the smallest positive integer \\(i\\) such that \\(g^i\\) equals the identity element of the group (usually denoted 1 in a multiplicative group). According to Lagrange's theorem from group theory, the order of any element divides the order of the group. Therefore, if \\(g\\) is a generator of \\(G\\), then \\(ord(g) = |G| = q\\).</p> <p>To test whether \\(g\\) is a generator, we can use the factorization of \\(q\\). The prime factorization of \\(q\\) is represented as \\(q = \\displaystyle\\prod_{i=1}^{k} p_i^{e_i}\\), where \\(p_i\\) are the distinct prime factors of \\(q\\) and \\(e_i\\) are their corresponding exponents.</p> <p>Here's the reasoning: if \\(g\\) is a generator of \\(G\\), then \\(g^q\\) should be equal to the identity element of \\(G\\). However, that's not enough to ensure \\(g\\) is a generator because, as per Lagrange's theorem, \\(g^i\\) could equal the identity for any \\(i\\) that divides \\(q\\). Therefore, we need to check whether \\(g^{(q/p_i)}\\) equals the identity for any prime factor \\(p_i\\) of \\(q\\). If it does, then \\(g\\) is not a generator because its order is a divisor of \\(q\\), not \\(q\\) itself. If \\(g^{(q/p_i)}\\) is not the identity for all prime factors \\(p_i\\) of \\(q\\), then \\(g\\) is a generator of \\(G\\).</p> <p>In summary, knowing the prime factorization of \\(q\\) is necessary to efficiently test whether a given element is a generator of a cyclic group \\(G\\) of order \\(q\\).</p> <p>links: AC2 TOC - Number-Theoretic Algorithms and Hardness Assumptions - Index</p>"},{"location":"themes/GnuPG/","title":"GnuPG","text":"<p>links: AC2 TOC DPKI - Index</p>"},{"location":"themes/GnuPG/#pgp-pretty-good-privacy","title":"PGP (Pretty Good Privacy)","text":"<ul> <li>can be used to encrypt and digitally sign files and e-mails</li> <li>Data is at rest or transmitted unidirectionally \\(\\rightarrow\\) no secure channel!</li> <li>PGP certificates are public key certificates with one or more identity labels tied to it</li> </ul>"},{"location":"themes/GnuPG/#gnupg-gpg-gnu-privacy-guard","title":"GnuPG (GPG, GNU Privacy Guard)","text":"<ul> <li>free version of PGP, with library (libgcrypt)</li> <li>provides common cryptographic primitives &amp; implementation of OpenPGP</li> <li>used for: secure e-mail, encrypt files, sign files</li> </ul>"},{"location":"themes/GnuPG/#pgp-certificate","title":"PGP Certificate","text":"<ul> <li>PGP Version</li> <li>Holder's public key: RSA or DSA</li> <li>Holder information: identity information (name, user ID, ...)</li> <li>Holder digital signature: \"self-signature\", signature using the private key</li> <li>Validity period: start and expiration date</li> <li>Preferred symmetric encryption algorithm: e.g. CAST, IDEA, Triple-DES, AES, ...</li> </ul> <p>PGP Certification: one certificate may be signed by multiple entities (persons)</p>"},{"location":"themes/GnuPG/#key-validity","title":"Key validity","text":""},{"location":"themes/GnuPG/#pgp-private-keyring","title":"PGP Private Keyring","text":"<ul> <li>stores private/public key pairs:<ul> <li>timestamp</li> <li>key ID (indexed)</li> <li>public key</li> <li>encrypted private key (with passphrase)</li> <li>user ID (indexed)</li> </ul> </li> </ul>"},{"location":"themes/GnuPG/#pgp-public-keyring","title":"PGP Public Keyring","text":"<ul> <li>stores public key pairs, certificate and trust status:<ul> <li>timestamp</li> <li>key ID (indexed)</li> <li>public key</li> <li>user ID (indexed)</li> <li>owner trust:<ul> <li>unknown user</li> <li>usually not trusted to sign</li> <li>usually trusted to sign</li> <li>always trusted to sign</li> <li>ultimately trusted (own key in private keyring)</li> </ul> </li> <li>signature(s)</li> <li>signature trust(s): copy of owner trust of the signer</li> <li>validity of public key</li> </ul> </li> </ul>"},{"location":"themes/GnuPG/#key-validity-calculation","title":"Key validity calculation","text":"<ul> <li>if at least one signature trust is ultimate, then the validity of the key is 1 (complete)</li> <li>otherwise, a weighted sum of the signature trust values is computed (always trusted signature have more weight as usually trusted)</li> </ul> <p>links: AC2 TOC DPKI - Index</p>"},{"location":"themes/Group%20Theory/","title":"Group Theory","text":"<p>links: AC2 TOC - Modular Arithmetic and Group Theory - Index</p>"},{"location":"themes/Group%20Theory/#group-definition","title":"Group definition","text":"<p>A group \\(G\\) is defined as follows: \\(G\\) = (\\(G\\), \\(\\circ\\), \\(inv\\), \\(e\\)) where</p> <ul> <li>binary operation \\(\\circ : G \\times G \\rightarrow G\\)</li> <li>unary operation \\(inv : G \\rightarrow G\\) </li> <li>identity element \\(e \\in G\\)</li> </ul> <p>All satisfying:</p> <ul> <li>Associativity: \\(x \\circ (y\\circ z) = (x\\circ y) \\circ z\\) where \\(\\forall x,y,z \\in G\\)</li> <li>Identity: \\(e \\circ x = x \\circ e = x\\) where \\(\\forall x \\in G\\)</li> <li>Inverse: \\(x\\circ inv(x) = inv(x) \\circ x = e\\) where \\(\\forall x \\in G\\)</li> </ul> <p>A group \\(G\\) is called commutative (or abelian) if \\(x\\circ y = y \\circ x\\) where \\(\\forall x,y \\in G\\)</p> <p>The order \\(ord(G)\\) of the group \\(G\\) is the number of elements of \\(G\\):</p> \\[ord(G) = |G| \\]"},{"location":"themes/Group%20Theory/#group-examples","title":"Group Examples","text":"<ul> <li>Integers (\\(\\mathbb{Z}\\), \\(+\\), \\(-\\), \\(0\\))</li> <li>Rational numbers: (\\(\\mathbb{Q}\\), \\(+\\), \\(-\\), 0)</li> <li>Non-zero rational numbers: (\\(\\mathbb{Q} \\backslash \\{ 0 \\}\\), \\(\\times\\), \\(^{-1}\\), \\(1\\))</li> </ul>"},{"location":"themes/Group%20Theory/#relevant-groups-in-cryptography","title":"Relevant Groups in Cryptography","text":"<ul> <li>Additive Group of Integers modulo \\(n\\): (\\(\\mathbb{Z}_n\\) , \\(+_n\\) , \\(-_n\\) , \\(0\\))<ul> <li>\\(\\mathbb{Z}_n\\) is used to refer to the corresponding additive group (\\(\\mathbb{Z}_n\\) , \\(+_n\\) , \\(-_n\\) , \\(0\\))</li> <li>inverse element: \\(-_n a = n - a\\) for all \\(a \\in \\mathbb{Z}_n \\backslash \\{0\\}\\) and \\(-_n 0 = 0\\)</li> <li>\\(\\mathbb{Z}_1\\) = {\\(0\\)}</li> <li>\\(\\mathbb{Z}_{11}\\) = {\\(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\\)}</li> </ul> </li> </ul> <ul> <li>Multiplicative Group of Integers modulo \\(n\\): (\\(\\mathbb{Z}^*_n\\) , \\(\\times _n\\) , \\(^{-1}\\) , \\(1\\) )<ul> <li>for \\(n \\gt 1\\), let \\(\\mathbb{Z}_n^* = \\{a \\in \\mathbb{Z}_n \\backslash \\{0\\} : gcd(a,n) = 1\\}\\)</li> <li>\\(\\mathbb{Z}^*_n\\) is used to refer to the corresponding multiplicative group (\\(\\mathbb{Z}^*_n\\) , \\(\\times _n\\) , \\(^{-1}\\) , \\(1\\) ) with order \\(|\\mathbb{Z}_n^*| = \\phi (n)\\)</li> <li>Many cryptographic schemes are based on such groups<ul> <li>\\(\\mathbb{Z}^*_p\\) where p is a prime is used in e.g Diffie-Hellman</li> <li>\\(\\mathbb{Z}^*_n\\) where \\(n=pq\\) is used in e.g RSA</li> </ul> </li> <li>\\(\\mathbb{Z}^*_2\\) = {\\(1\\)}</li> <li>\\(\\mathbb{Z}^*_{11}\\) = {\\(1, 2, 3, 4, 5, 6, 7, 8, 9, 10\\)} \\(\\rightarrow\\) candiate for DH (\\(p=11\\))</li> <li>\\(\\mathbb{Z}^*_{15}\\) = {\\(1, 2, 4, 7, 8, 11, 13, 14\\)} \\(\\rightarrow\\) candidate for RSA (\\(15 = 3 * 5\\))</li> </ul> </li> </ul> <ul> <li>Elliptic curve: (\\(E_{a,b}(\\mathbb{Z}_p)\\), \\(+\\), \\(-\\), \\(\\mathcal{O}\\))</li> </ul>"},{"location":"themes/Group%20Theory/#order-of-a-group-element","title":"Order of a Group element","text":"<ul> <li>\\(ord(x)\\) is the smallest \\(k&gt;0\\) such that \\(x^k=1\\)</li> <li>\\(ord(x)\\) divides the group order \\(ord(\\mathcal{G}\\)) = |\\(G\\)| for every \\(x \\in G\\)</li> <li>Example for \\(\\mathbb{Z}^*_{15}\\):</li> </ul> <ul> <li>e.g. \\(ord(2) \\rightarrow 2^4 \\mod 15 = 1\\)</li> </ul>"},{"location":"themes/Group%20Theory/#order-of-a-group","title":"Order of a Group","text":"<p>If a group \\(G\\) is finite then the order of the group equals the number of its elements:</p> \\[ord(G) = |G| = o_G, o_G \\neq \\infty\\]"},{"location":"themes/Group%20Theory/#generators","title":"Generators","text":"<p>Note: arithmetic \"primitive root modulo n\" is equivalent to a generator in group theory!</p> <ul> <li>An element is called generator of \\(\\mathcal{G}\\), if \\(ord(g)\\) = \\(ord(\\mathcal{G}\\))<ul> <li>\\(\\langle g \\rangle\\) = {\\(g,g^2,...,g^{|G|}\\)} = \\(G\\)</li> </ul> </li> <li>\\(G\\) is a cyclic group, if at least one \\(g \\in G\\) is a generator</li> <li>Example: \\(2\\) is a generator but \\(3\\) is not a generator of \\(\\mathbb{Z}^*_{11}\\)</li> </ul> <p></p>"},{"location":"themes/Group%20Theory/#subgroups","title":"Subgroups","text":"<ul> <li>\\(H\\subseteq G\\) forms a subgroup of (\\(G\\), \\(\\circ\\), \\(inv\\), \\(e\\)), if (\\(H\\), \\(\\circ\\), \\(inv\\), \\(e\\)) satisfies all properties of a group</li> <li>Every group (\\(G\\), \\(\\circ\\), \\(inv\\), \\(e\\)) has two trivial subgroups {\\(e\\)} and \\(G\\)</li> <li>Lagrange's Theorem: If  \\(H\\subseteq G\\) forms a subgroup, then \\(|H|\\) divides \\(|G|\\)</li> <li>Examples:<ul> <li>Subgroups of (\\(\\mathbb{Z}_{12}\\) , \\(+_n\\) , \\(-_n\\) , 0)<ul> <li>{\\(0\\)}, {\\(0, 6\\)}, {\\(0, 4, 8\\)}, {\\(0, 2, 4, 6, 8, 10\\)}, \\(\\mathbb{Z}_{12}\\)</li> </ul> </li> <li>Subgroups of (\\(\\mathbb{Z}^*_{15}\\) , \\(\\times _n\\) , \\(^{-1}\\) , 1 )<ul> <li>{\\(1\\)}, {\\(1, 4\\)}, {\\(1, 14\\)}, {\\(1, 4, 7, 13\\)}, \\(\\mathbb{Z}^*_{15}\\)</li> </ul> </li> </ul> </li> </ul>"},{"location":"themes/Group%20Theory/#generators-of-subgroups","title":"Generators of Subgroups","text":"<ul> <li>Every Set \\(\\langle h \\rangle\\) = {\\(h,h^2,...,h^{|G|}\\}\\in G\\) generated by some \\(h \\in G\\) forms a subgroup of (\\(G\\), \\(\\times\\), \\(^{-1}\\), \\(1\\))</li> <li>Examples: \\(\\mathbb{Z}_{11}^*\\) = {\\(1, 2, ... , 10\\)}<ul> <li>\\(\\langle 1 \\rangle = \\{ 1 \\}\\)</li> <li>\\(\\langle 10 \\rangle = \\{ 1, 10 \\}\\)</li> <li>\\(\\langle 3 \\rangle = \\langle 4 \\rangle = \\langle 5 \\rangle = \\langle 9 \\rangle = \\{ 1,3,4,5,9 \\}\\)</li> </ul> </li> <li>Every  \\(g \\in \\mathbb{Z}_p^* \\backslash \\{ 1, p-1 \\}\\) is either a generator for \\(\\mathbb{G}_q\\) (if \\(g^q = 1\\)) or for \\(\\mathbb{Z}_p^*\\) (if \\(g^q \\neq 1\\))</li> </ul>"},{"location":"themes/Group%20Theory/#group-of-integers-modulo-a-safe-prime","title":"Group of Integers Modulo a Safe Prime","text":"<ul> <li>For a safe prime \\(p = 2q+1\\) we get \\(|\\mathbb{Z}^*_{p}| = 2q\\)</li> <li>Therefore, in regard of Lagrange's theorem, we know that \\(\\mathbb{Z}^*_{p}\\) has exactly \\(4\\) subgroups of order \\(1\\), \\(2\\), \\(q\\) and \\(2q\\)</li> <li>Cryptographic schemes e.g ElGamal are based on such a subgroup \\(\\mathbb{G}_q \\subset \\mathbb{Z}^*_{p}\\) of prime order \\(q\\)</li> <li>Example: \\(p=11\\), \\(q=5\\)<ul> <li>\\(\\mathbb{G}_{1}\\) = {\\(1\\)}</li> <li>\\(\\mathbb{G}_{2}\\) = {\\(1, 10\\)}</li> <li>\\(\\mathbb{G}_{5}\\) = {\\(1, 3, 4, 5, 9\\)}</li> <li>\\(\\mathbb{G}_{10}\\) = {\\(1, 2, 3, 4, 5, 6, 7, 8, 9, 10\\)} = \\(\\mathbb{Z}^*_{11}\\)</li> </ul> </li> </ul>"},{"location":"themes/Group%20Theory/#homomorphisms","title":"Homomorphisms","text":"<p>Two groups \\((G, \\circ)\\) and \\((H, \\bullet)\\) are homomorphic if there exists a function \\(f: G \\rightarrow H\\) for which all \\(a, b \\in G\\):</p> \\[ f(a \\ \\circ \\ b) = f(a) \\bullet f(b) \\] <p>where the left side indicates that \\(a,b\\) was calculated within the group \\(G\\) using \\(G\\)'s operation \\(\\circ\\) and the right side was calculated on the respective images of \\(a,b\\) using the operation \\(\\bullet\\) of the group \\(H\\). The idea is that if you can calculate a value in \\(G\\) you can get the correct image in \\(H\\) using the function \\(f\\). This allows to compute values in one group without knowing the original values in the other group, but still receive the correct result (this technique is used in homomorphic encryption schemes or multiparty computation like ElGamal or Secure Multiparty Computation)</p> <p>Fun fact: if the relation \\(f\\) is bijective, the groups are even isomorphic. Isomorphisms are groups which are structurally identical. This means you can do calculation in one group and transform the result into the other groups respective value (using \\(f\\)), then calculate some stuff in this group and map this result back into the original group (using the inverse \\(f^{-1} \\rightarrow\\) since \\(f\\) is bijective, \\(f^{-1}\\) will always exist) and you will still have the correct result (so cool).</p> <p>links: AC2 TOC - Modular Arithmetic and Group Theory - Index</p>"},{"location":"themes/Group%2C%20Ring%20and%20Field/","title":"Group, Ring and Field","text":"<p>links: AC2 TOC - Elliptic Curves - Index</p> <p>Three fundamental concepts in abstract algebra, each with its own set of properties and characteristics. They are hierarchical, in that:</p> <ul> <li>every field is a ring, </li> <li>every ring is a group (under addition)</li> </ul> <p>The reverse is not necessarily true. </p> <p>Fields have the most structure and groups the least.</p>"},{"location":"themes/Group%2C%20Ring%20and%20Field/#group","title":"Group","text":"<p>See Group Theory</p> <p>A group is a set, \\(G\\), together with an operation \\(\\circ\\) (often interpreted as addition or multiplication) that combines any two elements \\(a, b \\in G\\) to form another element denoted \\(a \\circ b \\in G\\). A group must satisfy four properties:</p> <ul> <li>Closure: For all \\(a, b\\) in \\(G\\), the result of the operation, \\(a \\circ b\\), is also in \\(G\\)</li> <li>Associativity: For all \\(a, b\\) and \\(c\\) in \\(G\\), \\((a \\circ b) \\circ c\\) equals \\(a \\circ (b \\circ c)\\)</li> <li>Identity: There exists an element \\(e\\) in \\(G\\) such that for every element \\(a\\) in \\(G\\), the equations \\(e \\circ a\\) and \\(a \\circ e\\) return \\(a\\)</li> <li>Invertibility: For each element \\(a\\) in \\(G\\), there exists an element \\(b\\) in \\(G\\) such that \\(a \\circ b = b \\circ a = e\\), where \\(e\\) is the identity element</li> </ul>"},{"location":"themes/Group%2C%20Ring%20and%20Field/#ring","title":"Ring","text":"<p>A ring is a set equipped with two binary operations, usually referred to as addition and multiplication, that generalizes the arithmetic operations on integers. It's an additive group, but with extra structure. A ring satisfies the properties of a group under addition and has two additional properties related to the second operation (multiplication):</p> <ul> <li>Multiplicative associativity: For all \\(a\\), \\(b\\) and \\(c\\) in the ring, \\((a \\times b) \\times c\\) equals \\(a \\times (b \\times c)\\)</li> <li>Distributivity: For all \\(a\\), \\(b\\), and \\(c\\) in the ring, \\(a \\times (b+c) = a \\times b + a \\times c\\) and \\((b+c) \\times a = b \\times a + c \\times a\\)</li> </ul>"},{"location":"themes/Group%2C%20Ring%20and%20Field/#field","title":"Field","text":"<p>See Elliptic Curves</p> <p>A field is a ring where both operations are commutative (the order in which the operations are performed does not change the result), there's a multiplicative identity (other than the additive identity), and every non-zero element has a multiplicative inverse. It satisfies all the properties of a ring, but with additional restrictions:</p> <ul> <li>Multiplicative Identity: There is an element, usually denoted as \\(1\\) (and different from the additive identity \\(0\\)), such that for every element \\(a\\) in the field, \\(1 \\times a = a \\times 1 = a\\)</li> <li>Multiplicative Inverse: For each non-zero element \\(a\\) in the field, there exists an element \\(b\\) in the field such that \\(a \\times b = b \\times a = 1\\), where \\(1\\) is the multiplicative identity</li> <li>Commutativity: For all \\(a\\) and \\(b\\) in the field, \\(a \\times b = b \\times a\\) (for multiplication), and \\(a+b = b+a\\) (for addition)</li> </ul> <p>links: AC2 TOC - Elliptic Curves - Index</p>"},{"location":"themes/Hacking/","title":"Hacking","text":"<p>links: AC1 TOC - Intro - Index</p>"},{"location":"themes/Hacking/#technical-vulnerabilities","title":"Technical vulnerabilities","text":"<p>Most important class are software bugs.</p> <ul> <li>Misconfigured firewalls  </li> <li>Hardware bugs  </li> <li>Automatically executed software from CD/USB stick on old W32 systems</li> <li>etc. A comprehensive list of current most spread vulnerabilities can be found in the OWASP Top 10</li> </ul>"},{"location":"themes/Hacking/#typical-bugs","title":"Typical Bugs","text":"<p>Common bugs include problems in the parsing or rendering logic, or scripting functionality supported by the document format in combination with an interpreter that is insufficiently sandboxed.</p>"},{"location":"themes/Hacking/#date-and-code","title":"Date and Code","text":"<p>The central goal for an attack is to turn data into code. Memory of a process contains data and code!</p> <ul> <li>Code may interpret data</li> <li>Code may jump to the data</li> <li>Pass to other program that parses and runs input (shell)</li> </ul>"},{"location":"themes/Hacking/#sql-injection","title":"SQL Injection","text":"<p>Without prepared statements SQL Injection is possible. If a query uses a variable that can be defined by the user things can go very wrong: </p> <p>Example input: <code>Robert\u2019); DROP TABLE students;--</code></p>"},{"location":"themes/Hacking/#vulnerability-timeline","title":"Vulnerability timeline","text":""},{"location":"themes/Hacking/#hacking-process-rice","title":"Hacking Process (RICE)","text":"<ol> <li>Reconnaissance</li> <li>Infection</li> <li>Command and Control</li> <li>Exfiltration</li> </ol> <p>links: AC1 TOC - Intro - Index</p>"},{"location":"themes/Hash%20Functions/","title":"Hash Functions","text":"<p>links: AC1 TOC - Random Oracle &amp; Applications - Modern Cryptography MOC - Index</p> <p>Hash functions are simply functions that take inputs of some length and compress them into short, fixed-length outputs.</p> <p>Hash functions can be viewed as lying between the worlds of private- and public-key cryptography, because they have important applications in both settings.</p> <p>Cryptographic Hash Functions</p> <ul> <li>a hash function with a fixed output length</li> <li>has to be deterministic</li> <li>Collision resistant (which implies pre-image- and second-image resistance)</li> <li>hash must therefore be a one-way function</li> </ul>"},{"location":"themes/Hash%20Functions/#collision-resistance","title":"Collision Resistance","text":"<ul> <li>a function \\(H\\) is collision resistant if it is infeasible for any probabilistic polynomial-time algorithm to find a collision in \\(H\\).</li> <li>The domain of a hash function is normally larger than their range \\(\\rightarrow\\) in this case collisions must exist, but such collisions should be hard to find.</li> </ul>"},{"location":"themes/Hash%20Functions/#keyed-hash-functions","title":"Keyed hash functions","text":"<ul> <li>Keyed hash functions: \\(H\\) takes as input a key \\(s\\) and a string \\(x\\) and outputs a string \\(\\rightarrow\\) the key is generally not kept secret!</li> <li>Cryptographic hash functions used in practice are generally unkeyed and have a fixed output length</li> </ul>"},{"location":"themes/Hash%20Functions/#weaker-notions-of-security","title":"Weaker Notions of Security","text":""},{"location":"themes/Hash%20Functions/#second-preimage-resistance","title":"Second-preimage resistance","text":"<p>We have \\(x\\) and cannot find a \\(x'\\) which results to the same Hash \\(y\\) for both \\(x\\) and \\(x'\\): </p> \\[H(x) = H(x'), x \\neq x'\\]"},{"location":"themes/Hash%20Functions/#preimage-resistance","title":"Preimage resistance","text":"<p>\\(H\\) is one-way, if we have a hash \\(y\\) (\\(y = H(x)\\) is known, \\(x\\) is unknown) we cannot go back to find a \\(x'\\) to compute \\(y\\): </p> \\[H^{-1}(H(x)) = x, \\textrm{let } H^{-1} \\textrm{ be the inverse of } H\\]"},{"location":"themes/Hash%20Functions/#overview-of-security-notions","title":"Overview of Security Notions","text":"<p>Collision resistance implies second-preimage resistance, but does not guarantee preimage resistance \\(\\rightarrow\\) A second-preimage attack implies a collision attack.</p>"},{"location":"themes/Hash%20Functions/#compress-functions","title":"Compress Functions","text":""},{"location":"themes/Hash%20Functions/#merkle-damgard-transform","title":"Merkle-Damg\u00e5rd Transform","text":"<ul> <li>maps inputs of arbitrary length to outputs of length \\(n\\)</li> </ul>"},{"location":"themes/Hash%20Functions/#davies-meyer","title":"Davies-Meyer","text":"<ul> <li>Davies-Meyer is a compress function from a block cipher</li> <li>\\(F\\) is a strong pseudorandom permutation</li> </ul>"},{"location":"themes/Hash%20Functions/#attacks-on-hash-functions","title":"Attacks on Hash Functions","text":"<ul> <li>in symmetric-key using a \\(n\\)-bit secret key is vulnerable to a brute-force attack in which an attacker enumerates all \\(2^n\\) possible keys</li> <li>for a hash function \\(H\\) to be collision resistant against attackers running in time \\(2^n\\) it is required that \\(H\\) has output at least \\(2n\\) bits long</li> </ul>"},{"location":"themes/Hash%20Functions/#birthday-attacks","title":"Birthday attacks","text":"<ul> <li>if \\(q\\) people are in a room, what is the probability that some two of them share a birthday? \\(\\rightarrow\\) matching birthdays correspond to collisions</li> <li>if \\(H\\) has an output length of \\(l\\), \\(q = \\Theta(2^{l/2}) \\rightarrow\\) yields a collision with probability roughly \\(1/2\\) </li> </ul>"},{"location":"themes/Hash%20Functions/#rho-method","title":"Rho Method","text":"<ul> <li>algorithm for finding collisions</li> <li>unlike the birthday attack, requires only a small amount of memory</li> <li>Method: start with a random value \\(x\\), calculate \\(H_1(x)\\), then compute \\(H_2(H_1)\\), then \\(H_3(H_2)\\), ...</li> <li>Aim: find a cycle/ collision in the evaluation</li> </ul>"},{"location":"themes/Hash%20Functions/#universal-hash-function","title":"Universal Hash Function","text":"<p>Universal hashes can be extremely cheap to evaluate - much cheaper than block ciphers, pseudorandom functions, and especially collision-resistant hashes. (...) Universal hashing gives us strong guarantees with extremely cheap options</p> <ul> <li>selecting a hash function at random from a family of hash functions with a certain mathematical property</li> <li>Example of universal hash families: GHASH (used in GMAC) or Poly1305</li> </ul> <p>Source: Link</p> <p>links: AC1 TOC - Random Oracle &amp; Applications - Modern Cryptography MOC - Index</p>"},{"location":"themes/Hash-and-Mac/","title":"Hash-and-Mac","text":"<p>links: AC1 TOC - Random Oracle &amp; Applications - Modern Cryptography MOC - Index</p>"},{"location":"themes/Hash-and-Mac/#general-construction","title":"General Construction","text":"<ul> <li>use a fixed-length MAC for \\(l(n)\\)-bit messages and a collision-resistant hash function with \\(l(n)\\)-bit output length</li> <li>Then we can authenticate an arbitrary-length message \\(m\\) by using the MAC to authenticate the hash of \\(m\\)</li> <li>This is secure because the MAC ensures that the attacker cannot authenticate any new hash value, while collision resistance ensures that the attacker will be unable to find any new message that hashes to a previously used hash value</li> </ul> <p>Formal description</p> <ul> <li>\\(Mac\\):  takes as input the keys \\(k\\) and \\(s\\) and a message \\(m\\), outputs \\(t \\leftarrow Mac_k(H^s(m))\\)</li> <li>\\(Vrfy\\): takes as input the keys \\(k\\) and \\(s\\), a message \\(m\\) and a tag \\(t\\), output 1 iff \\(Vrfy_k(H^s(m), t) \\stackrel{?}{=} 1\\)</li> </ul> <p>Drawbacks</p> <ul> <li>see Drawback of Hash-and-MAC Constructions</li> </ul>"},{"location":"themes/Hash-and-Mac/#hmac","title":"HMAC","text":"<ul> <li>see HMAC</li> </ul>"},{"location":"themes/Hash-and-Mac/#attacks","title":"Attacks","text":""},{"location":"themes/Hash-and-Mac/#length-extension-attack","title":"Length-Extension Attack","text":"<ul> <li>see article on Github</li> </ul> <p>The length-extension attack allows an attacker to extend the length of a given hash value, without knowing the original message or the secret key. This is a problematic when using the hash as MAC with construction \\(H(secret \\parallel message)\\). By appending additional data to the hash output and calculating a new MAC, the attacker can generate valid MACs for extended messages, potentially leading to unauthorized access or forgery (without knowing the secret).</p> <p>links: AC1 TOC - Random Oracle &amp; Applications - Modern Cryptography MOC - Index</p>"},{"location":"themes/IMF%20Framework/","title":"The IMF Framework","text":"<p>links: Index</p> <p>IMF stands for \"Index and Maps of Content, and other fluid Frameworks\".</p>"},{"location":"themes/IMF%20Framework/#why-imf","title":"Why IMF?","text":"<p>Equipping your library with an Index, Maps, and other fluid Frameworks enhances your working experience. It is robust, flexible, and able to match your changing needs.</p>"},{"location":"themes/IMF%20Framework/#what-is-imf","title":"What is IMF","text":"<ol> <li>The Index - This can act as your homebase to ground you, and as a launching pad into your note library.</li> <li>Maps of Content (MOCs) - These are like having curated worktables with all your relevant index cards placed on them. They are the mitochondria of a digital library. Once you use them, you'll be able to overcome the overwhelm that arises from having notes scattered everywhere.</li> <li>Other Fluid Frameworks -  Adding structure to your notes has gotten a bad rap lately. But if you know how to keep your structures fluid, you'll get the best of both worlds: order and chaos; excellent note retrieval and the serendipity of discovery.</li> </ol>"},{"location":"themes/IMF%20Framework/#structure","title":"Structure","text":"<p>Map of Content = MOC - Use these to structure your digital library</p> <p>Table of Contents = TOC - Use these to structure more specific, near-final projects in a single, linear way</p>"},{"location":"themes/IMF%20Framework/#moc","title":"MOC","text":"<ul> <li>MOCs are \u201coverlays\u201d that add relevant information but that don't affect the base content. </li> <li>MOCs are not hierarchical like a table of contents. They are heterarchial. Meaning, you can have multiple maps organizing the same info in different ways to fit whatever persepective the note is for.</li> </ul> <p>links: Index</p>"},{"location":"themes/Intro%20Public%20Key%20Cryptography/","title":"Intro Public Key Cryptography","text":"<p>links: AC2 TOC - Intro Public Key Encryption - Index</p>"},{"location":"themes/Intro%20Public%20Key%20Cryptography/#limitation-of-symmetric-key-encryption","title":"Limitation of Symmetric-Key Encryption","text":"<p>For a full intro to symmetric-key encryption visit Private Key Encryption.</p>"},{"location":"themes/Intro%20Public%20Key%20Cryptography/#key-distribution-problem","title":"Key Distribution Problem","text":"<p>One of the biggest problems with symmetric key encryption is the key distribution problem. There are only a few possible secure channels such as</p> <ul> <li>Personal contact</li> <li>Trusted postal service (e.g. sealed or registered letters)</li> <li>Codebook (like in World War II)</li> <li>Courier (like the \"red phone\" between Moscow and Washington during the Cold War)</li> </ul> <p>In general, secure channels are expensive and inefficient.</p>"},{"location":"themes/Intro%20Public%20Key%20Cryptography/#key-management-problem","title":"Key Management Problem","text":"<p>In addition to the key distribution problem, there is also the key management problem.</p> <p>In symmetric key encryption, pairwise communication between \\(N\\) parties requires the following number of different keys:</p> \\[keys(N) = \\frac{N(N-1)}{2}\\] <p>Examples: \\(keys(6) = \\frac{6\\cdot 5}{2}\\), \\(keys(1000) \\approx 500000\\)</p> <p>Each of the \\(N\\) parties needs to store \\(N-1\\) keys, and the keys should be renewed periodically.</p>"},{"location":"themes/Intro%20Public%20Key%20Cryptography/#non-repudiation","title":"Non-Repudiation","text":"<ul> <li>In any communication based on symmetric key encryption, the key is known to at least two parties.</li> <li>After sending the ciphertext \\(c\\) to Bob, Alice could deny being the author of \\(m\\) because Bob could have created it himself.</li> <li>Using only symmetric key cryptography (encryption, MAC), non-repudiation can't be archived.</li> <li>Non-repudiation is essential for digital contracts.</li> </ul> <p>links: AC2 TOC - Intro Public Key Encryption - Index</p>"},{"location":"themes/Introduction%20to%20Modern%20Cryptography/","title":"Introduction to Modern Cryptography","text":"<p>links: Modern Cryptography MOC - Index</p>"},{"location":"themes/Introduction%20to%20Modern%20Cryptography/#cryptography-and-classical-cryptography","title":"Cryptography and Classical Cryptography","text":"<p>Heuristic approach to Science</p> <p>Cryptography has gone from a heuristic set of techniques for ensuring secret communication for a few to a science for all.</p> <p>Principles of Modern Cryptography</p> <ul> <li>cryptography was historically more of an art than a science, based on their perceived complexity or cleverness</li> <li>in modern cryptography, the ultimate goal being to give a rigorous proof that a given construction is secure -&gt; based on formal definitions and hardness assumptions about the algorithmic hardness of certain mathematical problem</li> </ul>"},{"location":"themes/Introduction%20to%20Modern%20Cryptography/#setting-of-private-key-encryption","title":"Setting of Private-Key Encryption","text":"<ul> <li>Security of encryption scheme relies on a secret, a key (also named shared-/ secret-key) \\(\\rightarrow\\) private-key encryption</li> <li>Symmetric-key setting: use the same key for encryption &amp; decryption</li> </ul> <p>The goal of encryption is to keep the plaintext hidden from an eavesdropper who can monitor the communication channel and observe the ciphertext.</p>"},{"location":"themes/Introduction%20to%20Modern%20Cryptography/#keys-and-kerckhoffs-principle","title":"Keys and Kerckhoffs' principle","text":"<p>The cipher method must not be required to be secret, and it must be able to fall into the hands of the enemy without inconvenience.</p> <p>Security rely solely on secrecy of the key</p>"},{"location":"themes/Introduction%20to%20Modern%20Cryptography/#historical-ciphers","title":"Historical Ciphers","text":"<ul> <li>Caesar's cipher: shifting the letters of the alphabet 3 places forward</li> <li>Shift cipher: a keyed variant of Caesar's cipher, the key \\(k\\) is a number between 0 and 25, encryption is done by shift letters by \\(k\\) places</li> </ul> <p>\\(\\rightarrow\\) use brute-force (or exhaustive-search) attack</p> <ul> <li>mono-alphabetic substitution cipher: substitute the whole alphabet using a map, the key-space is now \\(26!\\)</li> </ul> <p>\\(\\rightarrow\\) use frequency distribution attack</p> <ul> <li>Vigen\u00e8re (poly-alphabetic shift) cipher: the key is a string of letters to \"smooth out\" the frequency distribution</li> </ul> <p>\\(\\rightarrow\\) can be broken with enough obtained ciphertexts (and/or if the key is short or the length of the key is known)</p>"},{"location":"themes/Introduction%20to%20Modern%20Cryptography/#security-goals","title":"Security goals","text":"<ul> <li>Ciphertext-only attack (COA): adversary just observes a ciphertext (or multiple) to determine information about the plaintext</li> <li>Known-plaintext attack (KPA): the adversary is able to learn one or more plaintext/ciphertext pairs generated using some key -&gt; determine information about some other ciphertext (using the same key)</li> <li>Chosen-plaintext attack (CPA): the adversary can obtain plaintext/ciphertext pairs for plaintexts of its choice</li> <li>Chosen-ciphertext attack (CCA): the adversary can decrypt ciphertexts of its choice</li> </ul>"},{"location":"themes/Introduction%20to%20Modern%20Cryptography/#definitions","title":"Definitions","text":"<ul> <li>Encryption scheme correctness: \\(Dec_k(Enc_k(m)) = m\\)</li> <li>Key space: set of all possible keys: \\(K\\)<ul> <li>The key-space must be sufficient large to make an brute-force attack infeasible</li> </ul> </li> </ul> <p>links: Modern Cryptography MOC - Index</p>"},{"location":"themes/Keccak/","title":"Keccak","text":"<p>links: AC1 TOC - Private Key Encryption - Index</p>"},{"location":"themes/Keccak/#sponge-construction","title":"Sponge Construction","text":"<p>The sponge construction is a quite novel approach to design cryptographic ciphers. One can think of a sponge which absorbs water when put into water and releases the water when squeezed. This concept is used in the sponge construction. In the first phase the ciphers absorbs information (takes input). In the second phase one can squeeze out output (generates output).</p> <p></p>"},{"location":"themes/Keccak/#algorithms-building-blocks","title":"Algorithms / Building Blocks","text":""},{"location":"themes/Keccak/#constants","title":"Constants","text":"<p>The sponge construction possesses four constants which define the sizing of an implementation:</p> <ul> <li>\\(r\\) defines the number of bits which are absorbed per absorb cycle.</li> <li>\\(c\\) defines the number of 'shuffle'-bits.</li> <li>\\(l\\) defines the sum \\(r + c\\) and represents the size of the sponges internal state.</li> <li>\\(v\\) defines the number of bits which are squeezed per squeeze cycle.</li> </ul>"},{"location":"themes/Keccak/#unkeyed-random-permutation","title":"Unkeyed, random Permutation","text":"<p>The most important internal is an unkeyed, random permutation. This permutation is fixed and doesn't change (can be hardcoded and be public, see Kerckhoffs' principle).</p>"},{"location":"themes/Keccak/#padding","title":"Padding","text":"<p>If the input to be hashed does not have the minimal length of \\(r\\) bits, the input must be padded.</p>"},{"location":"themes/Keccak/#absorb","title":"Absorb","text":"<p>In the absorbing phase, the sponge construction consumes (absorbs) input and updates the internal state of the construction. This happens by applying \\(r\\) sized chunks from input to the first \\(r\\) bits of the internal state.</p>"},{"location":"themes/Keccak/#squeeze","title":"Squeeze","text":"<p>In the squeeze phase, we can take out \\(v\\) bits from the current state before the permutation \\(P\\) is executed again.</p>"},{"location":"themes/Keccak/#case-study","title":"Case-Study","text":""},{"location":"themes/Keccak/#scenario","title":"Scenario","text":"<p>Suppose we have following configuration (the permutation does not fulfill the requirements of a real implementation):</p> <ul> <li>\\(r = 4\\)</li> <li>\\(c = 4\\)</li> <li>\\(l = r + c =  4 + 4 = 8\\)</li> <li>\\(v = 3\\)</li> <li>\\(P(x) =  {x} \\lor {0000 0000}\\)</li> </ul> <p>Now we want to create a hash of length 12 bit and are given binary \\(input = 1001 0010\\) (146).</p>"},{"location":"themes/Keccak/#initialization","title":"Initialization","text":"<p>Initially, the sponge construction is initialized to zero. This means the initial state is just a bit-string consisting of only zeros. One can seed the sponge construction by doing an absorbing phase prior to the normal absorbing phase. </p>"},{"location":"themes/Keccak/#absorbing-phase","title":"Absorbing Phase","text":"<p>First cut the input in parts of length \\(r\\). If the last block is to short apply a the padding. In our scenario this is not necessary because \\({len(input) \\over r} = {8 \\over 4} = 2\\) and therefore fits perfect without rest:</p> <ol> <li>absorb first \\(r\\) bits (LSB): \\(m_1 = 0010\\) </li> <li>update state by XOR \\(m_1\\) and first \\(r\\) bits of the state: \\(0010 \\lor 0000 = 0010\\)</li> <li>apply \\(P(state)\\)  = \\(0010 0000 \\lor 00000000\\) = \\(0010 0000\\)</li> <li>absorb second \\(r\\) bits (LSB): \\(m_2 = 1001\\)</li> <li>update state by XOR \\(m_2\\) and first \\(r\\) bits of the state: \\(1001 \\lor 0010 = 1011\\)</li> <li>apply \\(P(state) = 10110000 \\lor 00000000 = 10110000\\)</li> </ol> <p>At the end of the absorbing phase the sponge construction has \\(state = 10110000\\)</p>"},{"location":"themes/Keccak/#squeezing-phase","title":"Squeezing Phase","text":"<p>Now that the absorbing phase is finished, we can squeeze  until we got enough bits for our needs. We want 12 bits. In our scenario we squeeze 3 bits per squeeze cycle. This means we must squeeze 4 times to gather 12 bits:</p> <ol> <li>squeeze: take first \\(v\\) bits (MSB) of current state: \\(o_1 = 1011\\)</li> <li>apply \\(P(state) = 10110000 \\lor 00000000 = 10110000\\) </li> <li>squeeze: take first \\(v\\) bits (MSB) of current state: \\(o_2 = 1011\\) </li> <li>apply \\(P(state) = 10110000 \\lor 00000000 = 10110000\\)</li> <li>squeeze: take first \\(v\\) bits (MSB) of current state: \\(o_3 = 1011\\) </li> <li>apply \\(P(state) = 10110000 \\lor 00000000 = 10110000\\)</li> <li>squeeze: take first \\(v\\) bits (MSB) of current state: \\(o_4 = 1011\\) </li> <li>apply \\(P(state) = 10110000 \\lor 00000000 = 10110000\\)</li> </ol> <p>Appending the results of the squeeze cycles to one another results in \\(1011 1011 1011 1011\\) which represents the result.</p>"},{"location":"themes/Keccak/#building-ciphers-with-keccak","title":"Building Ciphers with Keccak","text":"<ul> <li>Generating a OneTimePad for the required message length. This gives us as a possibility to build a Stream Cipher. We just continue to squeeze more bits out of the XOF (extendable output function) if needed.</li> <li>Keccak can also be used for a Block Cipher Ascon-128 is such a cipher.<ol> <li>Absorb-Phase: Add the key and a counter</li> <li>Squeeze-Phase: Take out the length of one block</li> </ol> </li> </ul> <p>links: AC1 TOC - Private Key Encryption - Index</p>"},{"location":"themes/Key%20Derivation%20Function%20%28KDF%29/","title":"Key Derivation Function","text":"<p>links: AC1 TOC - Random Oracle &amp; Applications - Index</p>"},{"location":"themes/Key%20Derivation%20Function%20%28KDF%29/#high-to-high-entropy","title":"High to High Entropy","text":"<p>KDF (key derivation functions) derive a key from a KDK (key derivation key). This means that a KDF creates a key based on another key. A KDF assumes that the KDK which is supplied as input already possesses high entropy and therefore the KDF must not mess with this and just delegates to underlying PRF (pseudo random functions). For this purpose, KDF leverage PRF. The NIST recommends to use HMAC or KMAC as underlying PRF. KDF which take high entropy as input can also be termed as key expansion. Key expansion is a subpart of a functioning KDF. You could also define a KDF which take  low entropy and generate a high entropy output from this. For low-high entropy scenarios read about Password Based Key Derivation Function (PBKDF).</p> <p>NIST Recommendations on KDF: NIST SP 800-108r1 </p>"},{"location":"themes/Key%20Derivation%20Function%20%28KDF%29/#kdf-using-hmac-hkdf","title":"KDF using HMAC (HKDF)","text":"<p>HKDF is a simple KDF based on the HMAC. The main approach of HKDF follows the \"extract-then-expand\" paradigm, where the KDF logically consists of two modules.</p> <ol> <li>HKDF-Extract: takes \"input key material\" (IKM) such as a shared secret of DH, optional a salt and generates a PRK (pseudorandom key). The output is the HMAC with the \"salt\" as the key and the \"IKM\" as the message.</li> <li>HKDF-Expand: Takes the PRK, some \"info\" and a length and generates output of the length. This module act as a pseudorandom function keyed on PRK.</li> </ol>"},{"location":"themes/Key%20Derivation%20Function%20%28KDF%29/#kdf-using-kmac","title":"KDF using KMAC","text":"<p>KMAC (Keccak based Message Authentication Code) is based on the Keccak sponge construction and therefore can output an arbitrary length of output bits.</p> <p>The NIST defines a KMAC based KDF as follows:</p> <pre><code>Input: KDK, Context, L, and Label\n\nProcess:\n    1. If L &gt; 2^1040 \u2212 1, output an error indicator and stop (i.e., skip step 2).\n    2. DERIVED KEY = KMAC#(KDK, Context, L, Label).\n\nOutput: DERIVED KEY (or an error indicator)\n</code></pre> <p>Where the error condition \\(L &gt; 2^{1040-1}\\) is a limitation by KMAC (Section 6.2 of the NIST document).</p>"},{"location":"themes/Key%20Derivation%20Function%20%28KDF%29/#parameters","title":"Parameters","text":"<ul> <li>KDK: The key derivation key of which a key shall be derived</li> <li>Context: Context information for the derived key</li> <li>L: The desired length of the derived key</li> <li>Label: \"Label can be an encoding of</li> </ul> <p>the characters \u201cKDF\u201d or \u201cKDF4X\u201d in 8-bit ASCII\" (quote of the NIST document)</p>"},{"location":"themes/Key%20Derivation%20Function%20%28KDF%29/#limitations","title":"Limitations","text":"<p>The recommended implementation of the KDF by the NIST assume, that the final length of the derived key is always known (the assumption makes sense, since the key length directly influence the security level). But in theory it would also be possible to create variable length derived keys by using XOF KMAC which would allow this.</p> <p>links: AC1 TOC - Random Oracle &amp; Applications - Index</p>"},{"location":"themes/Key%20Establishment/","title":"Key Establishment","text":"<p>links: AC1 TOC - From Symmetric Encryption to Secure Channels - Index</p>"},{"location":"themes/Key%20Establishment/#goals","title":"Goals","text":"<ul> <li>Key secrecy: Session keys must not be known by anyone else than Alice, Bob (and maybe some trusted third party). Mallory must not learn anything about session keys.</li> <li>Authenticity: One party can be assured about the identity of the other party it shares the session key with. That is, Alice knows that she has session key with Bob.</li> <li>Freshness of keys: Mallory must not be able to replay old session keys.</li> </ul>"},{"location":"themes/Key%20Establishment/#protocols","title":"Protocols","text":"<p>Key establishment is realized by using protocols whereby a shared secret becomes available to two or more parties, for subsequent cryptographic use.</p> <p>Key establishment protocols result in shared secrets which are typically called (or used to derive) session keys. Ideally, a session key is an ephemeral secret, i.e., one whose use is restricted to a short time period such as a single telecommunications connection (or session), after which all trace of it is eliminated.</p> <p>Motivation for ephemeral keys includes the following:</p> <ol> <li>To limit available ciphertext (under a fixed key) for cryptanalytic attack</li> <li>To limit exposure, with respect to both time period and quantity of data, in the event of (session) key compromise</li> <li>To avoid long-term storage of a large number of distinct secret keys by creating keys only when actually required</li> <li>To create independence across communications sessions or applications.</li> </ol>"},{"location":"themes/Key%20Establishment/#methods","title":"Methods","text":"<ul> <li>Key agreement (e.g. DH): Parties jointly generate a secret key. This option is almost always the best solution</li> <li>Key Transport: One party generates and distributes a secret key. This is needed in situations on unidirectional communication (online one party is only at a time or only one party can send and the other can only receive)</li> </ul>"},{"location":"themes/Key%20Establishment/#private-channels-authentic-and-confidential-channel","title":"Private channels (authentic and confidential channel)","text":"<p>Symmetric key distribution is impossible without private channels. A private channel to exchange a key could be a USB stick given directly to the other party or a pre-installed key on a company laptop. Private channels are complicated, inefficient and expensive.</p> <p>The goal is to reduce the number of private channels required to exchange keys. Ideally an initial private channel is used today to exchange a secret key that might be used at a later time to establish a secure channel over an insecure link.</p>"},{"location":"themes/Key%20Establishment/#broken-key-establishment-protocols","title":"Broken key establishment protocols","text":""},{"location":"themes/Key%20Establishment/#neumann-stubblebine","title":"Neumann-Stubblebine","text":"<p>Attacker learns \\(N_a / R_A\\)  from step 1 and \\(E(K_{bt}, A, N_a, T_b) / E_B(A, R_A, T_B)\\) from step 2. Bob does not check if the Nonce is the same as the established key. To solve this problem the protocol has to ensure that the Nonce (\\(N_a / R_A\\)) can't be confused with a key (\\(K_{ab} / E_K\\)).</p> <p>Source: Link</p>"},{"location":"themes/Key%20Establishment/#key-establishment-protocols","title":"Key establishment protocols","text":""},{"location":"themes/Key%20Establishment/#denning-sacco","title":"Denning-Sacco","text":"<p>Bob can impersonate Alice and send something to Carol with Alices key. It is not defined from who the key is and what it is used for.</p>"},{"location":"themes/Key%20Establishment/#wide-mouth-frog-protocol","title":"Wide-Mouth Frog protocol","text":"<ul> <li>The protocol requires a synchronized clocks to achieve freshness</li> <li>Bob has to trust Alice to correctly generate a key</li> </ul>"},{"location":"themes/Key%20Establishment/#needham-schroeder-protocol","title":"Needham-Schroeder protocol","text":"<ul> <li>Protocol introduced nonces and removed timestamps</li> <li>Keys are generated by TTP so Bob doesn't have to trust Alice with key generation</li> <li>Vulnerable to known session key attacks. The last 3 steps can be replayed by an attacker if he gets an old session key. Bob can't verify if the key is fresh</li> </ul>"},{"location":"themes/Key%20Establishment/#kerberos","title":"Kerberos","text":"<ul> <li>Used in Windows since Windows 2000 for authentication, key establishment and authorization</li> <li>Similar to Needham-Schroeder but removes known session key attacks using synchronized clocks. Authentication fails if clocks are not synced.</li> </ul>"},{"location":"themes/Key%20Establishment/#otway-rees-protocol","title":"Otway-Rees protocol","text":"<ul> <li>G\u00fcrgens and Peralta describe an attack which they name an arity attack. In this attack the intruder intercepts the second message and replies to B using the two ciphertexts from message 2 in message 3. In the absence of any check to prevent it, M (or perhaps M,A,B) becomes the session key between A and B and is known to the intruder.</li> <li>Cole describes both the G\u00fcrgens and Peralta arity attack and another attack in his book Hackers Beware. In this the intruder intercepts the first message, removes the plaintext A,B and uses that as message 4 omitting messages 2 and 3. This leaves A communicating with the intruder using M (or M,A,B) as the session key.</li> </ul>"},{"location":"themes/Key%20Establishment/#station-to-station-key-agreement-protocol-sts","title":"Station to station key agreement protocol (STS)","text":"<ul> <li>Basically DH but \\(y_A\\) and \\(y_B\\) are signed making it secure against man in the middle attacks. Exchange of authenticated signing keys is done using certificates</li> <li>STS is the basis of the practically important Internet Key Exchange protocol (IKE)</li> <li>The bottom line is: one cannot establish authenticated keys without bootstrapping the system using an \u201cexterior authentication mechanism\u201d (e.g., without first establishing public key certificates for Alice and Bob).</li> </ul> <p>Source: Link</p>"},{"location":"themes/Key%20Establishment/#lessons-learned","title":"Lessons learned","text":"<ul> <li>Do not try to be too clever, over-optimization is often the cause for vulnerabilities</li> <li>Which optimizations you can do (and which optimization actually matter) depends on your assumptions (adversary model, system capabilities)</li> <li>Which protocol to use depends on your performance goals and communications capabilities (all-to-all communication, trusted party, latency, bandwidth and computational constraints)</li> </ul> <p>links: AC1 TOC - From Symmetric Encryption to Secure Channels - Index</p>"},{"location":"themes/Key%20Management/","title":"Key Management","text":"<p>links: AC1 TOC - Secret sharing - Index</p>"},{"location":"themes/Key%20Management/#pse","title":"PSE","text":"<p>The Personal Security Environment (PSE) is used in information security to describe the part of a storage medium in which the secret keys are stored.</p> <p>There are 2 different types of PSE: \"software based\" or \"hardware based\".</p>"},{"location":"themes/Key%20Management/#software-based","title":"Software Based","text":"<p>PKCS#12 is the most widely used format for software PSEs. It is described as follows:</p> <ul> <li>File container format used to store and transport private keys</li> <li>Content (data) is protected with a private key, e.g. a password.</li> <li>The security of PKCS#12 is based solely on the strength of the password.</li> </ul>"},{"location":"themes/Key%20Management/#hardware-based","title":"Hardware Based","text":"<p>There are several hardware crypto tokens/cards on the market (e.g. Yubikey, Smartcards). They all have the following characteristics:</p> <ul> <li>Ability to be a secure container for secret data.</li> <li>A platform for the execution of cryptographic algorithms</li> <li>\"Black box\" from the outside, some operations can only be used through a very restrictive hardware and software interface. Enforcement of specific security policies.</li> <li>Access to sensitive data (i.e. private keys) is made physically \"impossible\" from the outside.</li> </ul>"},{"location":"themes/Key%20Management/#yubikey","title":"Yubikey","text":"<ul> <li>Provides Smart Card functionality based on the Personal Identity Verification (PIV) interface specified in NIST SP 800-73</li> <li>Performs sign/ decrypt operations using the private key stored on the token via a common interface such as PKCS#11</li> <li>Supports RSA 2048 or ECC 256/384 key sizes</li> <li>\"Universal Smartcard Minidriver\" provides smart functionality and certificate/ PIN management capabilities.</li> <li>Some \"special\" Yubikeys have obtained FIPS 140-2 security level certification.</li> </ul>"},{"location":"themes/Key%20Management/#hardware-security-modules-hsm","title":"Hardware Security Modules (HSM)","text":"<p>HSMs are specialized security hardware devices with the following characteristics Common functionality:</p> <ul> <li>Key pair generation</li> <li>Random number generator</li> <li>Digital signing</li> <li>Secure storage and use of key material</li> <li>Key archiving</li> <li>Acceleration for cryptographic schemes</li> </ul> <p>They are designed to protect keys from:</p> <ul> <li>Mechanical attacks</li> <li>Temperature attacks</li> <li>Voltage manipulation</li> <li>Chemical attacks</li> </ul> <p>links: AC1 TOC - Secret sharing - Index</p>"},{"location":"themes/Key%20Revocation/","title":"Key Revocation","text":"<p>links: AC1 TOC - Blockchain - Public Key Infrastructure - Index</p>"},{"location":"themes/Key%20Revocation/#what-is-key-revocation","title":"What is key revocation?","text":"<p>The process of invalidation a cryptographic key pair. It's used when a key is compromised or no longer required.</p>"},{"location":"themes/Key%20Revocation/#certificate-revocation-lists-x509","title":"Certificate Revocation Lists (X.509)","text":"<p>CRL is a list of certs which have been revoked by the issuing CA before their scheduled expiration date.</p>"},{"location":"themes/Key%20Revocation/#online-certificate-status-protocol-ocsp","title":"Online Certificate Status Protocol (OCSP)","text":"<p>Protocol used to obtain the revocation status of a cert. Instead of having to parsing a list of revoked certs itself, a client sends a query to an OCSP responder and receives information about a single cert.</p>"},{"location":"themes/Key%20Revocation/#ocsp-stapling-tls","title":"OCSP Stapling (TLS)","text":"<p>The server itself periodically retrieves OCSP response for its own cert and \"staples\" it to the TLS handshake which means the client doesn't have to contact the OCSP himself.</p> <p>Publish Revocation in blockchain</p> <p>Revocations could be published on the blockchain. Similar to CRL but decentralised, don't have to trust CA.</p>"},{"location":"themes/Key%20Revocation/#controlled-flooding","title":"Controlled flooding","text":"<p>Revocations (signed with private key) can be flooded through a network. It's controlled in that each message is only re broadcasted a certain number of times to prevent endless loops. Efficient set reconciliation (Bloom Filters &amp; Set Unification) is used to compare the sets of revoked certs when nodes first connect to make sure they both have the same state. Proof of work is used to limit DoS-potential. POW can be calculated ahead of time and stored offline to have them read in case they are needed. </p> <p>links: AC1 TOC - Blockchain - Public Key Infrastructure - Index</p>"},{"location":"themes/Key%20escrow%20and%20recovery/","title":"Key escrow and recovery","text":"<p>links: AC1 TOC - Secret sharing - Index</p> <p>This chapter documents key escrow and recovery using the GNU project Anastasis as an example.</p> <ul> <li>Key escrow: The key is shared among multiple parties. Each party receives a portion of the key.</li> <li>Key recovery: The key is reassembled using the pieces from the escrow parties.</li> </ul>"},{"location":"themes/Key%20escrow%20and%20recovery/#anastasis","title":"Anastasis","text":"<p>The upload and restore process, along with related images, can be found on the Anastasis Project website. Below is a brief description of the process in words.</p>"},{"location":"themes/Key%20escrow%20and%20recovery/#upload-process","title":"Upload Process","text":"<ol> <li>Split recovery information</li> <li>Identify the user by his attributes. Argon2 is used to derive an identifier from the user's attributes \\(\\rightarrow\\) unique id wich didn't change over time</li> <li>Use the HMAC Key Derivation Function (HKDF) to derive key material from the user ID. This results in 2 keys, \\(K1\\) and \\(K2\\).</li> <li>Split the information in multiple parts</li> <li>Encrypt the recovery information splits with \\(K1\\)</li> <li>Add some kind of truth about the user to the splits. E.g. an answer to a security question, phone number, email address</li> <li>Encrypt the truth with \\(K2\\)</li> <li>Store the data on different providers</li> </ol>"},{"location":"themes/Key%20escrow%20and%20recovery/#recovery-process","title":"Recovery Process","text":"<ol> <li>Identify the user by his attributes. Argon2 is used to derive an identifier from the user's attributes.</li> <li>Use the HMAC Key Derivation Function (HKDF) to derive key material from the user ID. This results in 2 keys, \\(K1\\) and \\(K2\\).</li> <li>Send \\(K2\\) to the providers, who can then decrypt the \"truth\" information.</li> <li>Provider uses the truth information to authenticate the user.</li> <li>The user receives the recovery information pieces from the providers.</li> <li>User decrypts the parts using K1</li> <li>User successfully recovered his information</li> </ol>"},{"location":"themes/Key%20escrow%20and%20recovery/#simplifications","title":"Simplifications","text":"<p>The processes from above and the images on the website have made some simplifications and left some information:</p> <ul> <li>More flexible splitting than 4/4</li> <li>There is a recovery document that stores used policies and providers.</li> <li>There is a distinction between the core secret and the master secret.</li> <li>Payment processing is omitted</li> <li>Provider salts the received information</li> <li>Anti-DoS prevention in the protocol</li> <li>There is versioning</li> <li>There are limitations of liability</li> </ul> <p>links: AC1 TOC - Secret sharing - Index</p>"},{"location":"themes/MAC/","title":"MAC","text":"<p>links: AC1 TOC - Random Oracle &amp; Applications - Modern Cryptography MOC - Index</p>"},{"location":"themes/MAC/#secrecy-vs-integrity","title":"Secrecy vs. Integrity","text":"<ul> <li>Secrecy: encryption can be used to prevent a passive eavesdropper from learning anything about messages sent over an open channel.</li> <li>Integrity: Guarantee message integrity (or message authentication) against an active adversary who can inject messages on the channel or modify messages in transit.</li> </ul>"},{"location":"themes/MAC/#encryption-vs-message-authentication","title":"Encryption vs. Message Authentication","text":"<p>Encryption does not (in general) provide any integrity! Ciphertexts in this case are very easy to manipulate: flipping any bit in the ciphertext results in the same bit being flipped in the message that is recovered upon decryption. In fact, the same attack applies to the OneTimePad encryption scheme, showing that even perfect secrecy is not sufficient to ensure the most basic level of message integrity.</p>"},{"location":"themes/MAC/#message-authentication-codes-macs","title":"Message Authentication Codes (MACs)","text":"<p>Prevent an adversary from modifying a message sent by one party to another, or from injecting a new message, without the receiver detecting that the message did not originate from the intended party \\(\\rightarrow\\) both parties share a common secret.</p> <p>There are two canonical application scenarios for MACs:</p> <ol> <li>ensuring integrity for two parties communicating with each other</li> <li>one user communicating \"with himself\" over time (e.g. web cookies or a user protecting the contents of his hard drive)</li> </ol>"},{"location":"themes/MAC/#formal-definition","title":"Formal definition","text":"<p>A message authentication code (or MAC) consists of three probabilistic polynomial-time algorithms (\\(Gen, Mac, Vrfy\\)) such that:</p> <ol> <li>\\(Gen\\): takes as input \\(1^n\\) and outputs a key \\(k\\) with \\(|k| \\geq n\\)</li> <li>\\(Mac\\): takes as input a key \\(k\\) and a message \\(m \\in \\{0, 1\\}^*\\), and outputs a tag \\(t\\). Since this algorithm may be randomized, we write this as \\(t \\leftarrow Mac_k(m)\\).</li> <li>\\(Vrfy\\): takes as input a key \\(k\\), a message \\(m\\) and a tag \\(t\\). It outputs a bit \\(b = 1\\) meaning valid and \\(b = 0\\) meaning invalid. Is deterministic, so we write \\(b := Vrfy_k(m,t)\\)</li> </ol>"},{"location":"themes/MAC/#security-of-macs","title":"Security of MACs","text":"<p>A secure MAC is said to be existentially unforgeable under an adaptive chosen-message attack. \"Existentially unforgeable\" refers to the fact that the adversary is unable to forge a valid tag on any message; this should hold even if the attacker can carry out an \"adaptive chosen-message attack\" by which it is able to obtain tags on arbitrary messages chosen adaptively during its attack.</p>"},{"location":"themes/MAC/#replay-attacks","title":"Replay attacks","text":"<p>The above definition offer no protection against replay attacks in which an attacker simply re-sends a previously authenticated message along with its valid tag. A example would be a authenticated transfer of $1000 from Alice to Bob wich can be repeated. A MAC by itself cannot protect against such attacks since verification is stateless. To prevent replay attacks, we can use sequence numbers or time-stamps.</p>"},{"location":"themes/MAC/#strong-unforgeability","title":"Strong unforgeability","text":"<p>It may be possible for an adversary to generate a different valid tag on some previously authenticated message. In standard applications of MACs, this is not a concern. Nevertheless, in some settings it is useful to consider a stronger definition of security for MACs. This definition is called a strongly secure MAC.</p>"},{"location":"themes/MAC/#mac-verification","title":"MAC verification","text":"<p>MAC verification should use time-independent string comparison that always compares all bytes</p>"},{"location":"themes/MAC/#constructing-secure-macs-with-pseudorandom-function","title":"Constructing Secure MACs with pseudorandom function","text":""},{"location":"themes/MAC/#a-fixed-length-mac","title":"A Fixed Length MAC","text":"<ul> <li>Let \\(F\\) be a (length preserving) pseudorandom function. Define a fixed-length MAC for messages of length \\(n\\) as follows:<ul> <li>\\(Mac\\): input a key \\(k\\) and message \\(m\\), output the tag \\(t := F_k(m)\\)</li> <li>\\(Vrfy\\): input a key \\(k\\), a message \\(m\\) and a tag \\(t\\), output 1 iff \\(t \\stackrel{?}{=} F_k(m)\\)</li> </ul> </li> </ul>"},{"location":"themes/MAC/#domain-extension-for-macs","title":"Domain Extension for MACs","text":"<ul> <li>how MAC handling arbitrary-length messages from any fixed-length :</li> </ul> <p>links: AC1 TOC - Random Oracle &amp; Applications - Modern Cryptography MOC - Index</p>"},{"location":"themes/MIME/","title":"MIME","text":"<p>links: AC2 TOC - Secure messaging and channels - Index</p>"},{"location":"themes/MIME/#mime_1","title":"MIME","text":"<p>Multipurpose Internet Mail Extensions (MIME) are extensions of the internet standard RFC 822 (replaced by RFC 5322 in 2008) which defines the format of E-Mails.</p> <p>Problems of RFC 822</p> <ul> <li>Messages can only contain ASCII which means that binary files have to be converted (UUencode)</li> <li>Same problem for simple text since, for example, german text contains letters which are not part of 7-bit ASCII</li> <li>MTA (mail transport agent) may do strange things with messages:<ul> <li>reject messages over a certain size</li> <li>delete, add, reorder CR and LF characters</li> <li>truncate or wrap lines longer than 76 characters</li> <li>remove trailing white space (tabs and spaces)</li> <li>pad lines in a message to the same length</li> <li>convert tab characters into multiple spaces</li> </ul> </li> </ul> <p>Encoding</p> <p>Several encoding schemes can be used to encode arbitrary bytes (0-255) into 7-bit ASCII (Quoted-Printable, Base64 etc.). The used encoding is specified in the MIME Header. Content formats and transfer encodings in the header protect the content from alteration by the mail transfer system.</p> <pre><code>Content-Type: image/gif\nContent-Transfer-Encoding: base64\n</code></pre> <p>MIME Header Fields</p> <ul> <li> <p>Mandatory fields</p> <ul> <li>MIME-Version</li> <li>Content-Type</li> <li>Content-Transfer-Encoding</li> </ul> </li> <li> <p>Optional fields</p> <ul> <li>Content-ID</li> <li>Content-Description</li> </ul> </li> </ul> <p>Content types</p> <p>Tells recipient UA (User Agent) about appropriate way to deal with content (how to represent it to the user)</p> <p>Top-level media types:</p> <ul> <li>discrete types: text, image, audio, video, application</li> <li>composite types<ul> <li>message (used for forwarding emails)</li> <li>multipart (multiple different parts each with its own MIME types)</li> </ul> </li> </ul> <p>Example Multipart Message</p> <p></p> <p>MIME uses inbound signaling which is generally a bad idea because this allows injection attacks. It would be better to use content length</p> <p>Quoted-Printable</p> <p></p>"},{"location":"themes/MIME/#smime","title":"S/MIME","text":"<p>GPT: S/MIME (Secure/Multipurpose Internet Mail Extensions) is a standard for public key encryption and signing of MIME (Multipurpose Internet Mail Extensions) data, primarily used for securing email communications. While MIME is used to support text in character sets other than ASCII, non-text attachments, multi-part message bodies, and header information, S/MIME takes it a step further by providing additional security features:</p> <ol> <li>Encryption: S/MIME allows for the encryption of messages, ensuring that only the intended recipient can read the message content. This is done by using the recipient's public key to encrypt the message.</li> <li>Digital Signatures: S/MIME supports the creation of digital signatures, providing a way to verify the authenticity of the sender and the integrity of the message. This is done by hashing the message content and encrypting the hash with the sender's private key.</li> </ol> <p>S/MIME uses PKCS#7/CMS structures to encapsulate the signed or encrypted MIME data, allowing for nested structures when both signing and encrypting are needed. The recipient can then use the corresponding keys to decrypt the message and verify the signature</p> <p>PKCS#7 has no type to do both sign and encrypt, so nesting is used (usually first sign, then encrypt \\(\\rightarrow\\) normally we do encryption first, then sign!)</p> <p>In summary, while MIME extends the capabilities of basic email to handle different types of content, S/MIME further enhances email communication by adding encryption and digital signatures to ensure confidentiality, authenticity, and integrity.</p> <p>Content-types</p> <ul> <li>S/MIME is the standard to include PKCS#7 objects as MIME \"attachments\"</li> <li>there are following Content-types<ul> <li>Multipart/Signed (original message is signed but not enveloped \\(\\rightarrow\\) some parts can be encrypted/signed, some not)</li> <li>Application/PKCS7-Signature (signed but not enveloped)</li> <li>Application/PKCS7-MIME (entire message is encrypted or signed)</li> </ul> </li> <li>content-transfer-encoding is base64</li> </ul> <p>Signed and enveloped data can be nested in any order!</p> <p>S/MIME Processing</p> <p></p> <p>S/MIME Enveloped Data</p> <p></p> <p>S/MIME Signed Data</p> <p></p> <p>S/MIME Multipart/Signed Data</p> <p></p> <p>Efail Direct exfiltration attack</p> <ul> <li>Exploits vulnerabilities in the OpenPGP and S/MIME standards to reveal the plaintext of encrypted emails</li> <li>Abuses active content of HTML emails, for example externally loaded images or styles, to exfiltrate plaintext through requested URLs.</li> <li>Attacker first needs access to the encrypted emails, modifies it and sends this modified encrypted email to the victim.</li> <li>\ufeff\ufeffThe victim's email client decrypts the email and loads external content, thus exfiltrating the plaintext to the attacker.</li> </ul> <p></p> <p>links: AC2 TOC - Secure messaging and channels - Index</p>"},{"location":"themes/Mass%20Surveillance/","title":"Mass Surveillance","text":"<p>links: AC1 TOC - Intro - Index</p> <p>Five eyes</p> <p>The Five Eyes (FVEY) is an intelligence alliance comprising Australia, Canada, New Zealand, the United Kingdom, and the United States.</p> <p>Building Blocks</p> <ul> <li>Travel Patterns</li> <li>Behaviour Analytics</li> </ul> <p>A lot of math is used to identify targets. Who is innocent and who is not. The US kills based on metadata but they only have percentages if somebody is a valid target for them. Even if they are 99.82% certain the collateral damage is enormous. (343,800 innocent citizens for Pakistan for example) </p> <p>Conclusion</p> <ul> <li>Computers have no sense of ethics.  </li> <li>Physical reality (including code) beats human law.<ul> <li>\\(\\rightarrow\\) We need to be careful about which technology we adopt.</li> </ul> </li> </ul> <p>links: AC1 TOC - Intro - Index</p>"},{"location":"themes/Modular%20Arithmetic/","title":"Modular Arithmetic","text":"<p>links: AC2 TOC - Modular Arithmetic and Group Theory - Index</p>"},{"location":"themes/Modular%20Arithmetic/#fundamental-theorem-of-arithmetic","title":"Fundamental Theorem of Arithmetic","text":"<p>Every integer \\(n \\gt 1\\) is either a prime number itself or a product of prime numbers.</p>"},{"location":"themes/Modular%20Arithmetic/#greatest-common-divisor","title":"Greatest Common Divisor","text":"<p>The GCD of two positive integers \\(a\\) and \\(b\\), is the largest positive integer \\(d=\\gcd(a,b)\\) that divides both \\(a\\) and \\(b\\).</p>"},{"location":"themes/Modular%20Arithmetic/#co-prime","title":"Co-prime","text":"<ul> <li>Two integers \\(a\\) and \\(b\\) are relatively prime (or co-prime), if \\(gcd(a,b) = 1\\).</li> <li>Two numbers can be co-prime even if only one or both of them are prime!</li> </ul>"},{"location":"themes/Modular%20Arithmetic/#eulers-totient-function-phi","title":"Euler's Totient Function \\(\\phi\\)","text":"<p>This is a function that counts the number of positive integers up to a given number \\(n\\) that are co-prime to \\(n\\). For example, \\(\\phi(9)=6\\), because there are six numbers (1,2,4,5,7,8) that are less than 9 and co-prime to 9.</p>"},{"location":"themes/Modular%20Arithmetic/#modulo-operator","title":"Modulo Operator","text":"<p>The modulo operator (sometimes written as %): \\(r=a\\mod n\\) denotes the remainder \\(r\\) \\(\\in\\) {\\(0,...,n-1\\)} of \\(a\\) divided by \\(n\\) \\(a = qn + r\\) for \\(q\\) \\(\\in\\) \\(\\mathbb{Z}\\)</p>"},{"location":"themes/Modular%20Arithmetic/#arithmetic","title":"Arithmetic","text":"<p>Addition modulo \\(n\\) and multiplication modulo \\(n\\) are defined by:</p> <p>\\(a \\;+_n \\; b =(a+b)\\mod{n} = ((a \\mod n) + (b \\mod n))\\mod n\\)</p> <p>\\(a \\;\\times_n \\; b =(a\\cdot b)\\mod{n} = ((a \\mod n) \\cdot (b \\mod n))\\mod n\\)</p> <p>Most of the times modular addition and multiplication are only written using the standard arithmetic operators \\(+\\) and \\(\\cdot\\)</p>"},{"location":"themes/Modular%20Arithmetic/#fermats-little-theorem","title":"Fermat's (Little) Theorem","text":"<p>Let \\(p\\) be a prime number and \\(a \\in \\{ 1,....,p-1\\}\\) then </p> \\[a^{p-1}\\equiv 1 \\quad (mod\\; p)\\]"},{"location":"themes/Modular%20Arithmetic/#eulers-theorem","title":"Euler's Theorem","text":"<p>If \\(\\gcd (a,n) =1\\) for positive integers \\(a\\) and \\(n\\) then</p> \\[a^{\\phi(n)}\\equiv 1 \\;(mod \\; n)\\]"},{"location":"themes/Modular%20Arithmetic/#primitive-root-modulo-n","title":"Primitive Root Modulo \\(n\\)","text":"<p>A \"primitive root modulo \\(n\\)\" is a number \\(g\\) such that for any integer \\(a\\) that's co-prime with n, there exists an integer k such that \\(g^k \\equiv a \\;(mod \\; n)\\).</p> <p>Examples:</p> <ul> <li>2 is a primitive root modulo 5<ul> <li>\\(2^4 \\mod 5 = 1\\),  \\(2^1 \\mod 5 = 2\\), \\(2^3 \\mod 5 = 3\\), \\(2^2 \\mod 5 = 4\\) </li> </ul> </li> <li>4 is not primitive root modulo 5<ul> <li>\\(4^1 \\mod 5 = 1\\), \\(4^2 \\mod 5 = 1\\), \\(4^3 \\mod 5 = 4\\) </li> </ul> </li> </ul>"},{"location":"themes/Modular%20Arithmetic/#multiplicative-inverse-modulo-n","title":"Multiplicative Inverse Modulo n","text":"<p>The multiplicative inverse of \\(a\\) modulo \\(n\\) is an integer \\(a^{-1}\\) such that</p> \\[ a\\cdot a^{-1} \\equiv 1 \\; (mod \\;n) \\] <p>The multiplicative inverse of a modulo n exists iff \\(gcd(a, n) = 1\\)</p> <p>links: AC2 TOC - Modular Arithmetic and Group Theory - Index</p>"},{"location":"themes/Modular%20Exponentiation/","title":"Modular Exponentiation","text":"<p>links: AC2 TOC - Number-Theoretic Algorithms and Hardness Assumptions - Index</p>"},{"location":"themes/Modular%20Exponentiation/#modular-exponentiation_1","title":"Modular Exponentiation","text":""},{"location":"themes/Modular%20Exponentiation/#square-and-multiply-algorithm","title":"Square-and-Multiply Algorithm","text":"<p>links: AC2 TOC - Number-Theoretic Algorithms and Hardness Assumptions - Index</p>"},{"location":"themes/Multiplicative%20Inverse/","title":"Multiplicative Inverse","text":"<p>links: AC2 TOC - Number-Theoretic Algorithms and Hardness Assumptions - Index</p>"},{"location":"themes/Multiplicative%20Inverse/#multiplicate-inverse-in-z_n","title":"Multiplicate Inverse in \\(Z_n^*\\)","text":"<ul> <li>works only if \\(gcd(a,b) = 1\\)!</li> </ul> <p>links: AC2 TOC - Number-Theoretic Algorithms and Hardness Assumptions - Index</p>"},{"location":"themes/Naming%20Systems/","title":"Naming Systems","text":"<p>links: AC1 TOC - Blockchain - Index</p>"},{"location":"themes/Naming%20Systems/#security-goals-for-name-systems","title":"Security Goals for Name Systems","text":"<ul> <li>Query Origin Anonymity: protect identity of user initiating a query \\(\\rightarrow\\) some anonymity by Recursive Resolver (IP is not sent with request)</li> <li>Data Origin Authentication and Integrity Protection: protect data during transit \\(\\rightarrow\\) DNSSEC</li> <li>Zone Confidentiality: protecting sensitive information in the zone from unauthorized access \\(\\rightarrow\\) DNS: yes, DNSSEC: no</li> <li>Query and Response Privacy: protect privacy of query and response (e.g. eavesdropper) \\(\\rightarrow\\) DNS: no</li> <li>Traffic amplification resistance: preventing attacks that involve causing a small query to generate a large amount of traffic</li> <li>Availability: preventing denial-of-service attacks</li> </ul>"},{"location":"themes/Naming%20Systems/#cryptography-in-dns","title":"Cryptography in DNS","text":"<ul> <li>DNSSEC: Domain Name System Security Extensions, adds digital signatures to DNS, protects against spoofing attacks, provides integrity and authenticity but no confidentiality (no encrypted queries)</li> <li>DNSCurve: uses elliptic curves to provide confidentiality, authentication and integrity, not widely used</li> <li>DNS-over-TLS: providing confidentiality, Client and Server has to support it</li> <li>DNS-over-HTTPS: DNS queries over HTTP-Protocol</li> <li>RAINS: New protocol designed by ETH Z\u00fcrich</li> </ul>"},{"location":"themes/Naming%20Systems/#ethereum-name-system","title":"Ethereum Name System","text":"<ul> <li>Name Registration: Users can register a domain name (like 'yourname.eth') on the ENS by interacting with the ENS smart contract on the Ethereum blockchain. This usually involves sending a transaction with a bid for the name. The highest bidder gets to own the name. Note that the process for initial registration and auction can vary.</li> <li>Resolution: Once a name is registered, it can be used to resolve to various types of resources, not just Ethereum addresses. This is done by setting up a resolver contract for the name, which can return resources like Ethereum addresses, IPFS hashes for decentralized websites, and more. A user or a App can query the ENS contract to resolve a name into its associated resources.</li> <li>Ownership and Transfers: The owner of an ENS name (i.e. the account that won the initial auction) has full control over the name and can transfer it to another Ethereum address at any time.</li> <li>Renewals: Unlike traditional DNS, ENS names are not owned permanently. They need to be renewed regularly (currently every year), which involves sending a transaction and paying a renewal fee.</li> </ul>"},{"location":"themes/Naming%20Systems/#case-studies","title":"Case Studies","text":""},{"location":"themes/Naming%20Systems/#case-study-doh","title":"Case study DOH","text":"<p>\u201cThe IETF is standardizing DNS over HTTPS (DOH), where all DNS queries are sent over the HTTPS protocol to some well-known HTTPS server (such as Google\u2019s 8.8.8.8 or Cloudflare\u2019s 1.1.1.1). This will prevent local governments from manipulating DNS traffic and improve the user\u2019s privacy with respect to their ISPs and governments. However, Google or Cloudflare will see the DNS queries and replies of the users, and they must be expected to have weak privacy policies and are subject to US law which includes secret rules and court orders. The NSA has a history of snooping on (MORECOWBELL) and manipulating (QUANTUMDNS) DNS traffic.\u201d</p>"},{"location":"themes/Naming%20Systems/#virtues","title":"Virtues","text":"<ul> <li>Confidentiality and privacy: Queries are encrypted, ISPs and governements can't see or change the DNS traffic</li> <li>Censorship Resistance: Censorship efforts can be bypassed which can be helpful in regions with stringent internet restrictions</li> </ul>"},{"location":"themes/Naming%20Systems/#vices","title":"Vices","text":"<ul> <li>Centralisation and Trust: Users have to trust large providers because they can see the queries which might cause privacy risks</li> <li>Legal issues: Governments can force google to give up certain information in certain legal cases</li> <li>Transparency: There is no transparency and users can't be sure that google isn't sharing their information with governments</li> </ul>"},{"location":"themes/Naming%20Systems/#case-study-rains","title":"Case study RAINS","text":"<p>\u201cThe ETH Zurich is developing a new name system called RAINS with a new trust anchor operated by the regional Internet service provides, aka the local Isolation Service Domain (ISD). RAINS does not change the privacy of DNS (provides can continue to monitor traffic, all zone data becomes public) and allows the local authorities to block Web sites to improve public safety and enforce local laws (see also: \u201dGl\u00fccksspielgesetz in Switzerland\u201d). At the same time, foreign censorship efforts are less likely to be effective (unless they foreign government forces the DNS authority to alter the authoritative records).\u201d</p> <p>General infos</p> <ul> <li>Feels a bit like splitting up the internet and each country is in power of their own part of the internet.</li> <li>Every entry in RAINS is signed, ensuring the integrity and authenticity of the data.</li> <li>RAINS uses an object-oriented approach, where each entry has an object type (like IP address, email, etc.) and a set of attributes. This allows RAINS to be more flexible and scalable than DNS, able to accommodate a wider variety of services.</li> <li>Queries in RAINS can be done over secure channels, preventing eavesdropping.</li> <li>In DNS, each record has a Time To Live (TTL), which specifies how long the record should be cached. RAINS replaces this with explicit validity periods, which specify a start and end time for the validity of each record. This can make caching more efficient and reduce unnecessary network traffic.</li> <li>To ensure resilience and availability, RAINS supports sharding and replication of its name servers. This means that the data stored in RAINS can be distributed across multiple servers, reducing the impact of any single server going down.</li> </ul>"},{"location":"themes/Naming%20Systems/#virtues_1","title":"Virtues","text":"<ul> <li>Availability: RAINS aims to decentralize trust by allowing for multiple trust anchors, compared to DNS's single root of trust. This could promote resilience and reduce single points of failure.</li> <li>Censorship Resistance against adversaries abroad: With the decentralized trust model, RAINS could potentially limit the global reach of censorship attempts by a single entity.</li> <li>end-to-end integrity: Entries are signed to ensure data integrity and authenticity. This enhances the reliability of the system and builds user trust. Queries in RAINS can also be done over secure channels, preventing eavesdropping.</li> </ul>"},{"location":"themes/Naming%20Systems/#vices_1","title":"Vices","text":"<ul> <li>Compartmentalisation: By allowing ISPs or individual countries to serve as trust anchors, RAINS may inadvertently enable fragmentation of the internet, with each country or region potentially controlling and shaping access to information.</li> <li>Censorship Resistance at home: If each ISP or country is given control over its portion of the name system, this could enable regional censorship, where a country or an ISP could decide what to block.</li> <li>Privacy: ISPs can already monitor your IP internet traffic. With RAINS they can also monitor your DNS requests. </li> </ul>"},{"location":"themes/Naming%20Systems/#case-study-namecoin","title":"Case study Namecoin","text":"<p>\u201cNamecoin establishes a new name system on the blockchain (where thus zone data is also public), but where public authorities cannot block information. Queries are performed against a local copy of the blockchain and thus also private. There is no WHOIS, so the owner of a name can also be anonymous. However, Namecoin uses much more bandwidth and energy as blockchain payments are used for registration and name resolution. Names are registered on a first-come, first-served basis. Trademarks, copyrights anti-fraud or anti- terrorism judgements cannot be used to force owners of names to relinquish names.\u201d</p>"},{"location":"themes/Naming%20Systems/#virtues_2","title":"Virtues","text":"<ul> <li>Censorship resistance: It is a decentralized naming system which means no authority can clock access to information</li> <li>Privacy and anonymity: There is no WHOIS service so the owner of a name remains anonymous. It's private because queries are performed against a local copy of the ledger.</li> <li>end-to-end integrity: Since entries are on the blockchain they are (almost) immutable</li> </ul>"},{"location":"themes/Naming%20Systems/#vices_2","title":"Vices","text":"<ul> <li>Energy consumption: Blockchains use a lot of energy</li> <li>Absence of Legal Enforcement: First-come, first-served could lead to problems with trademarks and copyrights since a given name can't be forcefully changed.</li> <li>Potential for abuse: Websites promoting illegal activities can be freely registered on namecoin</li> <li>Scalability and adoption challenges: It's a new technology and potentially complex which makes it difficult to adopt</li> </ul> <p>links: AC1 TOC - Blockchain - Index</p>"},{"location":"themes/OneTimePad/","title":"OneTimePad","text":"<p>links: AC1 TOC - Security &amp; Cryptography - Modern Cryptography MOC - Index</p>"},{"location":"themes/OneTimePad/#general-definition","title":"General definition","text":"<ul> <li>the key is as long as the message (and also the ciphertext has the same length)</li> <li>the OneTimePad is only secure if used once (with a given key)</li> <li>It provides perfect secrecy</li> </ul> <p>\\(K := M := C := \\{0, 1\\}^L\\)</p>"},{"location":"themes/OneTimePad/#using-onetimepad-twice","title":"Using OneTimePad twice","text":"<p>Adversary can learn the \\(XOR\\) of the two messages (where they differ) if a OneTimePad (key) is used twice: \\(c \\oplus c' = (m \\oplus k)\\oplus (m' \\oplus k) = m \\oplus m'\\)</p>"},{"location":"themes/OneTimePad/#limitations-of-perfect-secrecy","title":"Limitations of Perfect Secrecy","text":"<ul> <li>Any perfectly secret encryption scheme must have a key space that is at least as large as the message space: \\(|K|\\geq|M|\\)</li> <li>The OneTimePad is not protected against integrity (e.g. is vulnerable to Non-Malleability) </li> </ul>"},{"location":"themes/OneTimePad/#definitions","title":"Definitions","text":"<ul> <li>XOR (bitwise exclusive-or): \\(a \\oplus b\\)</li> </ul> XOR 0 1 0 0 1 1 1 0 <p>links: AC1 TOC - Security &amp; Cryptography - Modern Cryptography MOC - Index</p>"},{"location":"themes/PKCS/","title":"PKCS","text":"<p>links: Password Based Key Derivation Function (PBKDF) - Index</p> <p>Public Key Cryptography Standards (PKCS) is a group of public key cryptography standards published by RSA Security LC.</p> <p>Some Important Standards (not complete):</p> <ul> <li>PKCS #1: RSA Cryptography Standard (RSA)</li> <li>PKCS #3: Diffie-Hellman Key Agreement Standard (DH)</li> <li>PKCS #5: Password-based Encryption Standard (PBKDF2)</li> <li>PKCS #7: Cryptographic Message Standard (sign/ encrypt messages under a PKI) </li> <li>PKCS #10: Certification Request Standard (PKI)</li> <li>PKCS #13: Elliptic-curve cryptography Standard (Elliptic Curves)</li> <li>PKCS #14: Pseudo-random Number Generation (PRNG)</li> </ul> <p>links: Password Based Key Derivation Function (PBKDF) - Index</p>"},{"location":"themes/Password%20Based%20Key%20Derivation%20Function%20%28PBKDF%29/","title":"Password Based Key Derivation Function (PBKDF)","text":"<p>links: AC1 TOC - Random Oracle &amp; Applications - Index</p>"},{"location":"themes/Password%20Based%20Key%20Derivation%20Function%20%28PBKDF%29/#low-to-high-entropy","title":"Low to High Entropy","text":"<p>A PBKDF (password based key derivation functions) derive a key from an input. This means that a PBKDF creates a key based on some information supplied as input. Other than in pure KDF, PBKDF do not need high entropy as input but can also create high entropy output from low entropy. This is especially useful, if you have to for example store passwords or similar.</p>"},{"location":"themes/Password%20Based%20Key%20Derivation%20Function%20%28PBKDF%29/#pbkdf-using-argon2","title":"PBKDF using Argon2","text":"<p>Argon2 is the winner of the 2015 completed password hashing competition. Argon2 is the de facto standard when it comes to hashing passwords. Argon2 is equivalent to a PBKDF and therefore can be used everywhere a low-high entropy scenario comes into play. Argon2 leverages Blake2b as PRNG.</p>"},{"location":"themes/Password%20Based%20Key%20Derivation%20Function%20%28PBKDF%29/#parameters","title":"Parameters","text":"<p>Argon2 can be parameterized by adjusting time-, memory-, and parallel-complexity. This allows fine tuning Argon2 for certain use-cases and make it harder to crack passwords by configuring the three parameter with higher values.</p>"},{"location":"themes/Password%20Based%20Key%20Derivation%20Function%20%28PBKDF%29/#pbkdf1-pbkdf2","title":"PBKDF1 &amp; PBKDF2","text":"<p>Password-Based Key Derivation Function 1 &amp; 2 are key derivation functions. PBKDF2 is part of PKCS#5 series and supersedes PBKDF1, which could only produce derived keys up to 160 bits long.</p> <p>The PBKDF2 key derivation function has five input parameters:</p> <ol> <li>the PRF (e.g. a keyed HMAC)</li> <li>\\(Password\\): master password from which a derived key is generated</li> <li>\\(Salt\\): to reduce ability to use precomputed hashes (rainbow tables)</li> <li>\\(c\\): number of iterations</li> <li>\\(dkLen\\): desired bit-length of the derived key</li> <li>\\(DK\\): the generated derived key</li> </ol> <p>\\(DK = PBKDF2(PRF, Password, Salt, c, dkLen)\\)</p>"},{"location":"themes/Password%20Based%20Key%20Derivation%20Function%20%28PBKDF%29/#scrypt","title":"scrypt","text":"<p>scrypt (Pronounced \"ess crypt\") is a PBKDF created by Colin Percival. The scrypt function is designed to hinder such attempts by raising the resource demands of the algorithm. Specifically, the algorithm is designed to use a large amount of memory compared to other password-based KDFs,\u00a0making the size and the cost of a hardware implementation much more expensive, and therefore limiting the amount of parallelism an attacker can use, for a given amount of financial resources.</p> <p>Source: en: Wikipedia</p> <p>links: AC1 TOC - Random Oracle &amp; Applications - Index</p>"},{"location":"themes/Payto/","title":"Payto","text":"<p>links: AC2 TOC GNU Taler - Index</p>"},{"location":"themes/Payto/#rfc-8905-payto-uniform-identifiers-for-payments-and-accounts","title":"RFC 8905: payto: Uniform Identifiers for Payments and Accounts","text":"<p>Like <code>mailto:</code>, but for bank accounts instead of email accounts!</p> <pre><code>payto://&lt;PAYMENT-METHOD&gt;/&lt;ACCOUNT-NR&gt;\n    ?subject=InvoiceNr42\n    &amp;amount=EUR:12.50\n</code></pre> <p>Payment methods (such as IBAN, ACH, Bitcoin) are registered with IANA and allow extra options</p> <p>links: AC2 TOC GNU Taler - Index</p>"},{"location":"themes/Perfectly%20Secret%20Encryption/","title":"Perfectly Secret Encryption","text":"<p>links: Modern Cryptography MOC - Index</p>"},{"location":"themes/Perfectly%20Secret%20Encryption/#perfect-secrecy","title":"Perfect secrecy","text":"<p>For a scheme to be perfectly secret, observing this ciphertext should have no effect on the adversary's knowledge regarding the actual message that was sent.</p> <p>The ciphertext reveals nothing about the underlying plaintext</p>"},{"location":"themes/Perfectly%20Secret%20Encryption/#perfect-indistinguishability","title":"Perfect indistinguishability","text":"<p>An encryption scheme is perfectly indistinguishable if no adversary can succeed with probability better than \\(1/2\\) (in the indistinguishability experiment)</p>"},{"location":"themes/Perfectly%20Secret%20Encryption/#definitions","title":"Definitions","text":"<ul> <li>An Encryption scheme is formally defined with \\(\\Pi = (Gen, Enc, Dec)\\)</li> <li>Encryption algorithm is probabilistic (encryption might output a different ciphertext when run multiple times): \\(c \\leftarrow Enc_k(m)\\)</li> <li>Decryption algorithm is deterministic: \\(m := Dec_k(c)\\)</li> </ul> <p>links: Modern Cryptography MOC - Index</p>"},{"location":"themes/Physical%20Unclonable%20Function%20%28PUF%29/","title":"Physical Unclonable Function","text":"<p>links: AC1 TOC - Randomness - Index</p>"},{"location":"themes/Physical%20Unclonable%20Function%20%28PUF%29/#defintion","title":"Defintion","text":"<p>A Physical Unclonable Function (PUF) is a physical entity that is embodied in a physical structure and is easy to evaluate but hard to predict. It is a type of hardware that provides a unique identifier for devices and relies on the inherent uniqueness in physical microstructures to provide a set of unique and unpredictable responses to challenges. Because of their physical nature, PUFs are extremely difficult to clone, even with physical access to the device.</p>"},{"location":"themes/Physical%20Unclonable%20Function%20%28PUF%29/#usage-challenge-response","title":"Usage (Challenge Response)","text":"<p>PUFs are commonly used in authentication and key generation schemes. The primary way PUFs are used is through a challenge-response mechanism.</p> <p>In a typical scenario, a verifier sends a challenge (a random number or signal) to the PUF device. The PUF device then responds with a unique response that is determined by both the challenge and the unique physical characteristics of the PUF. Because the physical characteristics of the PUF can't be precisely duplicated, the responses from two different PUFs to the same challenge will also be different.</p>"},{"location":"themes/Physical%20Unclonable%20Function%20%28PUF%29/#in-the-context-of-security","title":"In the context of Security","text":"<ol> <li>Authentication: PUFs can be used to authenticate devices in a network by using the unique challenge-response pairs.</li> <li>Key Generation: PUFs can also generate unique cryptographic keys, providing secure key storage.</li> <li>Anti-Tampering: Because PUFs rely on physical characteristics that can't be exactly duplicated or predicted, they provide a level of security against physical tampering and cloning.</li> </ol>"},{"location":"themes/Physical%20Unclonable%20Function%20%28PUF%29/#unique-properties","title":"Unique properties","text":""},{"location":"themes/Physical%20Unclonable%20Function%20%28PUF%29/#compared-to-symmetric-key-cryptography","title":"Compared to symmetric key cryptography","text":"<p>In symmetric key cryptography, both the sender and receiver share a secret key. This key needs to be stored somewhere, and if an attacker can get ahold of it, they can decrypt any messages encrypted with that key.</p> <p>On the other hand, with PUFs, there's no need to store a secret key. Instead, the unique physical properties of the PUF itself are used to generate the keys. This makes it much harder for an attacker to gain access to the keys, even if they have physical access to the device.</p>"},{"location":"themes/Physical%20Unclonable%20Function%20%28PUF%29/#security-assumptions","title":"Security assumptions","text":"<p>The main security assumption behind PUFs is the difficulty of physically cloning the PUF. Even minor variations in the manufacturing process result in different physical properties, leading to different responses to the same challenge. As a result, PUFs are considered secure as long as this physical unclonability holds.</p>"},{"location":"themes/Physical%20Unclonable%20Function%20%28PUF%29/#pros-cons","title":"Pros &amp; Cons","text":"<p>Cons</p> <ul> <li>Wear and Tear </li> </ul> <p>Pros</p> <ul> <li>Denial of Service is not possible. No network needed.</li> <li>Cloning is not possible if the security assumption holds.</li> </ul>"},{"location":"themes/Physical%20Unclonable%20Function%20%28PUF%29/#example-protocol","title":"Example Protocol","text":"<p>A simple security protocol using a PUF might look like this:</p> <ol> <li>The verifier sends a challenge to the device with the PUF.</li> <li>The device uses the PUF to generate a response to the challenge.</li> <li>The device sends the response back to the verifier.</li> <li>The verifier checks the response against a database of known challenge-response pairs for that PUF.</li> <li>If the response matches the known response for that challenge, the device is authenticated. If not, the authentication fails.</li> </ol> <p>Note that the verifier must have a way to securely store and retrieve the known challenge-response pairs. This could be done, for example, by storing them in a secure database during an initial enrollment phase.</p> <p>links: AC1 TOC - Randomness - Index</p>"},{"location":"themes/Prime%20Numbers/","title":"Prime Numbers","text":"<p>links: AC2 TOC - Modular Arithmetic and Group Theory - Index</p>"},{"location":"themes/Prime%20Numbers/#definition","title":"Definition","text":"<ul> <li>A prime number is a positive integer \\(p \\gt 1\\) that has no positive divisors other than \\(1\\) and \\(p\\)</li> <li>Examples: \\(2, 3, 5, 7, 11, 13, 17, 19\\)</li> <li>Greatest known prime: \\(2^{82589933} -1\\) (found in 2019)</li> <li>Euclid's theorem (300 BC) says that there are an infinite number of prime numbers.</li> </ul> <p>Prime counting function: \\(\\pi(n)\\) is the number of primes smaller or equal to \\(n\\). For example \\(\\pi(13)=6\\)</p> <p>Prime number theorem: \\(\\pi(n) \\approx \\frac{n}{\\ln n}\\)</p> <p>In other words, when \\(n\\) is large, then the probability that \\(n\\) is prime is approximately:</p> \\[ \\frac{1}{\\ln n} = \\frac{\\log e}{\\log n}= \\frac{1.44}{\\log n}\\approx \\frac{1}{\\log n} \\] <p>To find a prime number of 2048 bit, we need about 2048 attempts.</p>"},{"location":"themes/Prime%20Numbers/#safe-prime","title":"Safe prime","text":"<p>A prime \\(p\\) is called safe prime, if \\(q = \\frac{p-1}{2}\\) is also prime. So \\(p = 2q+1\\).</p> <p>Examples: \\(5, 7, 11, 23, 47, 59, 83, ...\\)</p> <p>links: AC2 TOC - Modular Arithmetic and Group Theory - Index</p>"},{"location":"themes/Private%20Key%20Encryption/","title":"Private Key Encryption","text":"<p>links: AC1 TOC - Private Key Encryption - Index</p>"},{"location":"themes/Private%20Key%20Encryption/#private-key-encryption-scheme","title":"Private-Key Encryption Scheme","text":"<p>Every private key encryption scheme / cipher consists of three different algorithms:</p> <pre><code>k = Gen(n):\n    Gen(n) generates a key k given the security parameter n\n\nc = Enc(k,m):\n    Enc(k,m) encrypts a message m given with a given key k, which outputs a \n    ciphertext c\n\nm = Dec(k,c):\n    Dec(k,c) decrypts a ciphertext c with a given key k, which outputs decrypted \n    plaintext m\n</code></pre>"},{"location":"themes/Private%20Key%20Encryption/#goals-of-private-key-encryption","title":"Goals of Private Key Encryption","text":"<ul> <li>Encrypting and decrypting messages in a safe way</li> <li>CPA-Secure: Secure against Chosen Plaintext Attacks</li> <li>EAV-Secure: EAV means \"Secure Against Evesdropping\" (which is included in Chosen Plaintext Attacks)</li> <li>PPT algorithms (Probabilistic Polynomial Time algorithms)</li> <li>Indistinguishability</li> </ul>"},{"location":"themes/Private%20Key%20Encryption/#constructing-private-key-encryption-scheme","title":"Constructing Private-Key Encryption Scheme","text":"<p>The idea of stream ciphers is to leverage a Pseudorandom Number Generator (PRNG) and generate a OneTimePad using a key. This pad is then XORed onto the plaintext. This gives a ciphertext. For decryption again take the key and the Pseudorandom Number Generator (PRNG) and create the one-time pad. XORing the pad with the ciphertext will result in the plaintext. The key must be generated using the Gen(n) primitive of the respective private-key encryption scheme.</p> <p>Here a simple example (the lengths are chosen for the example and are not secure):</p> <pre><code>k = Gen(10)     : 0110010010\n\nplaintext m     : 1010\n\nPRNG(k, len(m)) : 0100\n\nencrypt         : m XOR PRNG = 1010 XOR 0100 = 1110\nciphertext c    : 1110\n\nPRNG(k, len(c)) : 0100\n\ndecrypt         : c XOR PRNG = 1110 XOR 0100 = 1010 = m\n</code></pre> <p></p>"},{"location":"themes/Private%20Key%20Encryption/#algorithms-building-blocks","title":"Algorithms / Building blocks","text":""},{"location":"themes/Private%20Key%20Encryption/#genn-k","title":"Gen(n) = k","text":"<p>The key must be generated effectively at random using correct techniques (leverage a TRNG). It is used as seed to the PRNG.</p>"},{"location":"themes/Private%20Key%20Encryption/#enck-m-c","title":"Enc(k, m) = c","text":"<p>The encryption primitive initializes a PRNG using the generated key <code>k</code> as seed. Then it consumes a <code>len(m)</code> bit-string of the PRNG to XOR the string with the plaintext <code>m</code>, which results in ciphertext <code>c</code>.</p>"},{"location":"themes/Private%20Key%20Encryption/#deck-c-m","title":"Dec(k, c) = m","text":"<p>The decryption primitve initializes a PRNG using the generated key <code>k</code> as seed. Then it consumes a <code>len(c)</code> bit-string of the PRNG to XOR the string with the ciphertext <code>c</code>, which results in plaintext <code>m</code></p> <p>links: AC1 TOC - Private Key Encryption - Index</p>"},{"location":"themes/Pseudorandom%20Number%20Generator%20%28PRNG%29/","title":"Pseudorandom Number Generator (PRNG)","text":"<p>links: AC1 TOC - Randomness - Index</p> <p>A PRNG is a deterministic function which produces a bit-string of length \\(l\\) which \"looks like\" random. This means that there isn't a pattern to be found that could predict the next bit. While RNG must guarantee randomness and be effectively random, a PRNG is allowed to create \\(l\\)-bit-strings which are almost random. This means that a distinguisher \\(D\\) is unable to distinguish the output of the PRNG from the true RNG with negligible deviation from the optimal probability. A PRNG is deterministic which means, that the output of a PRNG can be reproduced if you know the seed (the initialization value of the PRNG). The optimal probability is \\(1 \\over {k_{states}}\\) , where \\(k_{states}\\) is the number of possible states a sign in the generated output-string can have (e.g. in a bit-string a sign can have to states: \\(1\\) and \\(0\\), which results in \\(\\mathbb{P}(s_i = 1) \\approx \\mathbb{P}(s_i = 0) \\approx {1 \\over 2}\\) for each sign \\(s_i \\in s\\), \\(s\\) a bit-string).</p>"},{"location":"themes/Pseudorandom%20Number%20Generator%20%28PRNG%29/#distinguisher","title":"Distinguisher","text":"<p>To understand PRNG it is important to understand the concept of the distinguisher (as described by Lindell &amp; Katz, p. 61). A distinguisher is a statistical test which shall return 1, given the output string of a PRNG, with the same probability as if the input to \\(D\\) was a uniformly distributed string of same length.</p>"},{"location":"themes/Pseudorandom%20Number%20Generator%20%28PRNG%29/#requirements","title":"Requirements","text":"<p>For a PRNG to be secure, it requires a few assumptions to be met:</p> <ul> <li>\\(l(n) &gt; n\\) . This means that for any security parameter \\(n\\), the length of the output must be at least as long as the security parameter (otherwise it would mean a security downgrade, because this would lead to shorter pads resulting in a lower security parameter.</li> <li>The probability for a bit \\(s_i, i \\in 1,.., l(n)\\)  in bit-string \\(s\\) to be 1 or 0 must be equal \\(1 \\over 2\\) with some negligible deviation \\(negl(n)\\) which is dependent from the security parameter \\(n\\)</li> </ul> \\[\\mathbb{P}(s_i = 1) \\approx \\mathbb{P}(s_i = 0) \\approx  {1 \\over 2} + negl(n)\\] <ul> <li>If using a PRNG for security purposes, the seed of the PRNG must be kept secret, otherwise it's easy to recreate the random bit-strings.</li> </ul>"},{"location":"themes/Pseudorandom%20Number%20Generator%20%28PRNG%29/#construct-prg-pseudo-random-generator-from-prf-pseudo-random-function","title":"Construct PRG (Pseudo Random Generator) from PRF (Pseudo Random Function)","text":"<p>Let's assume \\(F\\) is a pseudorandom function that takes a secret key \\(k\\) and an input \\(x\\), and produces a pseudorandom output \\(y\\). So \\(F(k, x) = y\\).</p> <ol> <li>Choose an initial seed \\(s_0\\) as the secret key for the PRF. The seed \\(s_0\\) must be chosen randomly and kept secret.</li> <li>For generating the n-th pseudorandom number, use the PRF \\(F\\) with the seed \\(s_0\\) and \\(n\\) as the inputs. The output of the PRF is the n-th pseudorandom number. So the n-th pseudorandom number is \\(F(s_0, n)\\).</li> <li>Repeat step 2 for generating more pseudorandom numbers. Each new pseudorandom number can be generated by simply incrementing n.</li> </ol> <p>In this construction, the PRF is essentially acting as the PRNG's deterministic algorithm, generating a sequence of pseudorandom numbers based on the initial seed \\(s_0\\).</p>"},{"location":"themes/Pseudorandom%20Number%20Generator%20%28PRNG%29/#other-properties","title":"Other properties","text":"<p>When we talk about PRNGs in cryptography we always talk about CSPRNGs (Cryptographically secure pseudorandom number generator). A CSPRNG must have two properties:</p> <ul> <li>Satisfy next-bit test. That is, given the first \\(k\\) bits of a random sequence, there is no polynomial-time algorithm that can predict the (\\(k+1\\))th bit with probability of success non-negligibly better than 50%</li> <li>Withstand state compromise extensions. In the event that part or all of its state has been revealed (or guessed correctly), it should be impossible to reconstruct the stream of random numbers prior to the revelation. Additionally, if there is an entropy input while running, it should be infeasible to use knowledge of the input's state to predict future conditions of the CSPRNG state.</li> </ul> <p>Linearity of a PRNG</p> <p>If a PRNG is linear, so the next step is predictable. We need multiple rounds therefore in one step to solve this. If you stir Latte Macchiato for one round you could still see where each atom went (maybe not^^). But after some time has passed it will become impossible. </p> <p>Periods in a PRNG</p> <p>A PRNG can end up in a loop at some point or depending on the size start again at the beginning. The shorter this period is the less entropy a PRNG has. Therefore we use a big seed to begin with already. This seed depends on the security level also. A higher seed means also a higher period.</p> <p>If a PRNG is used for a long time without re-seeding, there's a potential risk that the output sequence could start to repeat or that an attacker could start to infer the internal state of the PRNG. To counter this we re-seed the PRNG using true randomness again from the TRNG.</p> <p>links: AC1 TOC - Randomness - Index</p>"},{"location":"themes/Public%20Key%20Encryption/","title":"Public Key Encryption","text":"<p>links: AC2 TOC - Intro Public Key Encryption - Index</p> <p>In the static application of Diffie-Hellman, the values (\\(a\\), \\(A\\)) can be considered as an Alices key pair.</p> <ul> <li>Public Key: \\(A\\) can be published on a website or directory, or sent over an insecure channel.</li> <li>Private Key: \\(a\\) must be kept secret.</li> </ul> <p>The paper by Diffie and Hellman invented the principle of public key encryption based on public/private keys. But they didn't describe an actual scheme.</p> <p>The first scheme was published by R. Rives, A. Shamir and L. Adleman (RSA) in 1977.</p>"},{"location":"themes/Public%20Key%20Encryption/#the-scheme","title":"The scheme","text":"<p>The public-key encryption scheme consists of a message space \\(M\\) and three randomised polynomial-time algorithms.</p> <ul> <li>Key generation: (\\(pk\\), \\(sk\\)) \\(\\leftarrow keyGen()\\) </li> <li>Encryption: \\(c \\leftarrow enc_{pk}(m)\\)</li> <li>Decryption: \\(m := dec_{sk}(c)\\)</li> </ul> <p>such that \\(dec_{sk}(enc_{pk}(m)) = m\\) holds for all messages \\(m \\in M\\), and all key-pairs</p> <ul> <li>\\(K\\) called key space is the set of all pairs generated by \\(keyGen()\\)</li> <li>\\(C\\) called ciphertext space is the set of all ciphertexts generated by \\(enc_{pk}(m)\\)</li> </ul> \\[enc : K_{pk} \\times M \\rightarrow C \\qquad dec: K_{sk} \\times C \\rightarrow M\\]"},{"location":"themes/Public%20Key%20Encryption/#private-communication","title":"Private Communication","text":"<p>The most important application of public-key encryption is private communication over an insecure channel.</p> <ol> <li>Alice generates a key pair (\\(pk\\), \\(sk\\)) and sends \\(pk\\) to Bob (over an authenticated channel)</li> <li>Bob computes the ciphertext \\(c \\leftarrow enc_{pk}(m)\\) and sends \\(c\\) over an insecure channel to Alice</li> <li> <p>Alice computes the plaintext \\(m := dec_{sk}(c)\\)</p> </li> <li> <p>Eve (Eavesdropper) can't learn anything about \\(m\\) (or \\(sk\\))</p> </li> <li>If the \\(pk\\) is transmitted without authentication, this approach is vulnerable to man-in-the-middle attacks (similar to Diffie-Hellman).</li> </ol>"},{"location":"themes/Public%20Key%20Encryption/#hardness-assumptions","title":"Hardness Assumptions","text":"<p>Discrete logarithm assumption (and stronger):</p> <ul> <li>Diffie-Hellman key exchange</li> <li>ElGamal encryption scheme</li> <li>DSA signature scheme</li> <li>Schnorr signature scheme</li> <li>Pedersen commitment scheme</li> </ul> <p>Integer factorisation assumption (and stronger)</p> <ul> <li>RSA encryption/signature scheme</li> <li>Rabin encryption scheme</li> <li>Pailler encryption scheme</li> <li>Goldwasser-Micali encryption scheme</li> <li>Blum-Blum-Shub pseudorandom number generator</li> </ul> <p>links: AC2 TOC - Intro Public Key Encryption - Index</p>"},{"location":"themes/Public%20Key%20Infrastructure/","title":"Public Key Infrastructure","text":"<p>links: AC2 TOC - Centralized public-key infrastructures - Key Revocation - Trust Issues in X.509 - Index</p>"},{"location":"themes/Public%20Key%20Infrastructure/#public-key-infrastructure_1","title":"Public Key Infrastructure","text":"<p>**Core </p> <ul> <li>How can a user verify that a public key actually belongs to the person that claims to own this public key?</li> <li>How does an application find the correct public key of a certificate issuer?</li> </ul> <p>Additional questions</p> <ul> <li>How do we keep private keys safe?</li> <li>How do we distribute information if someone lost control over their private key?</li> </ul> <p>A PKI allows us to recognize which public key belongs to whom which manages certification and establishes trust.</p>"},{"location":"themes/Public%20Key%20Infrastructure/#private-pki","title":"Private PKI","text":"<ul> <li>Created, operated and maintained limited to private organization only</li> <li>Issues certificates for internal purpose only. No trust relationship to external components, except cross-link to other private PKI</li> <li>Free in terms of PKI structure and content of certificates</li> <li>Use-cases: for User-Auth, VPN or Enterprise WPA (RADIUS)</li> </ul>"},{"location":"themes/Public%20Key%20Infrastructure/#public-pki","title":"Public PKI","text":"<ul> <li>Well known, reachable, and trusted on a more global basis</li> <li>Operated and maintained by dedicated companies or by governmental services</li> <li>Per default known by popular Internet applications</li> <li>Example: X.509 Certificates for TLS, ZertES-based user certificates</li> </ul> <p>\\(\\rightarrow\\) There is no global PKI and hopefully there never will be.</p>"},{"location":"themes/Public%20Key%20Infrastructure/#pki-reality","title":"PKI Reality","text":"<p>Any PKI faces authority and trust issues:</p> <ul> <li>Who is authorized to issue a specific certificate?<ul> <li>Which are the CA's that claim authority to assign keys to names?</li> <li>What makes them authoritative in response to these names?</li> </ul> </li> <li>How do they vet subjects?</li> <li>How are keys managed (by CA and subjects)?</li> </ul> <p>Currently a hierarchical trust model (trust in a forest of authorities) is still the \"best\" solution we have.</p>"},{"location":"themes/Public%20Key%20Infrastructure/#pki-components","title":"PKI Components","text":""},{"location":"themes/Public%20Key%20Infrastructure/#end-entity-ee","title":"End Entity (EE)","text":"<p>Denotes end-users, devices (e.g., server, routers), or any other entity that can be identified in the subject field of a public key certificate. End entities typically consume PKI-related services</p>"},{"location":"themes/Public%20Key%20Infrastructure/#certification-authority-ca","title":"Certification Authority (CA)","text":"<p>RCA = Root CA ICA = SubCA (Subordinate CA) = Intermediate CA</p> <p>Issuance of certificates and (usually) CRLs. In practice, often integrates administrative functions of RAs and VAs.</p> <p>CAs are the foundation of the PKI since they are the only components that can issue certificates.</p> <ul> <li>CAs act as trust anchors, and are thus high-security relevant components. Their private keys must be kept in a particularly secure environment.</li> <li>In a hierarchical system, a Root CA signs its own certificate with its private key (self-signed) according to a specific procedure</li> <li>To update its own self-signed key a Root CAs uses a key-rollover procedure to renew Root CA's key pair</li> </ul> <p>Baseline Requirements (BR)</p> <p>In several statements a CA describes the practices employed to support its certification services. For this purpose the IETF published templates in the form of a common RFC (RFC 3647):</p> <ul> <li>Certificate Practice Statement (CPS): a statement of the practices which a certification authority employs in issuing certificates.</li> <li>Certificate Policy (CP): a named set of rules that indicates the applicability of a certificate to a particular community and/or class of application with common security requirements (see Legal aspects) ^baee60</li> </ul> <p>The CAB-Forum extended the requirements of a CA with the release of Baseline Requirements for the Issuance and Management of Publicly-Trusted Certificates</p> <p>Single-Level CA</p> <p>The root CA signs certificates of EE directly. It is difficult to achieve different key policies when using a single-level CA. Those CAs typically issue all-purpose certificates (encryption, digital signature, authentication). Because of those limitations this PKI setup is suitable for private CAs. Normally there will be only one root CA. Otherwise there would need to be some cross-certification between the root CAs. This is normally only done in multi-level CA setups.</p> <p></p> <p>Multi-Level CA</p> <p>This type of PKI uses a tree model with the Root CA at the top and intermediate CAs (SubCAs, Signing CAs, Issuing CAs) at intermediate levels. The root CA typically only signs ICA certificates and is in general turned off and kept in a safe environment. SubCAs sign and issue EE certificates to the end entities. This enables the possibility to force specific key policies by issuing certificates for restricted purposes only (Authentication, Data Encryption, Digital Signatures).</p> <p></p>"},{"location":"themes/Public%20Key%20Infrastructure/#registration-authority-ra","title":"Registration Authority (RA)","text":"<p>Assumes administrative functions from the CA, primarily EE registration. Can assist in related areas (e.g. EE authentication, token distribution, key generation, revocation reporting, archiving of key pairs)</p> <ul> <li>Roughly spoken: a registration location where a user has to be registered personally</li> <li>RAs convert \"real\" identities into \"digital\" identities</li> <li>An RA needs to have experience with unfailing identification of users</li> </ul> <p>Examples</p> <ul> <li>Bank / post office</li> <li>Small meshed network of local agencies</li> <li>Human resources / personal office in a company</li> <li>IT service department</li> </ul>"},{"location":"themes/Public%20Key%20Infrastructure/#validation-authority-va","title":"Validation Authority (VA)","text":"<p>Responsible for providing information on whether certificates are actually valid or not.</p>"},{"location":"themes/Public%20Key%20Infrastructure/#repository","title":"Repository","text":"<p>Generic term used to denote any method for storing certificates and CRLs so that they can be retrieved by EEs.</p>"},{"location":"themes/Public%20Key%20Infrastructure/#idealized-issuance-and-validation-process","title":"Idealized Issuance and Validation Process","text":""},{"location":"themes/Public%20Key%20Infrastructure/#verification-validation","title":"Verification / Validation","text":"<p>RFC 5280 describes the algorithm for validating certificates, certification path and certification policies. This gives an answer to the following questions</p> <ul> <li>Is a certificate signed by a recognized trust anchor (is the certification path rooted in a trusted CA)</li> <li>Can the digital signature on the certificate be properly verified?</li> <li>Is the certificate within its established validity period?</li> <li>Has the certificate not been revoked?</li> <li>Is the certificate being used in a manner that is consistent with the certificate policies, name constraints, key usage, etc.?</li> </ul> <p></p>"},{"location":"themes/Public%20Key%20Infrastructure/#key-generation-by-ca","title":"Key Generation by CA","text":"<p>Reasons for CA Key Backup/Recovery</p> <ul> <li>Recovery of encrypted data after loss of access to private key (forgotten pw, employee left company, hardware malfunction, corrupted disk with keys on it, etc.)</li> <li>processing of encrypted messages for policy enforcement (anti-virus) at the network perimeter. In this example the firewall / anti-virus would need a list of all secret keys to decrypt, check and re-encrypt the messages</li> </ul> <p>Key Escrow</p> <p>Key escrow is a means to rebuild cryptographic keys in case the legitimate entity loses access to the data through a disaster or accident. The key has to stay confidential between the CA and EE. The problem is that governments could abuse this system and force the CA to give up the private keys.</p>"},{"location":"themes/Public%20Key%20Infrastructure/#key-generation-by-ee","title":"Key Generation by EE","text":"<p>In a private PKI a single key pair for multipurpose might make sense but in a public PKI EE normally receive/generate multiple separate keypairs for different applications. Multiple key pairs are also used to support special policies for distinct services.</p> <p>Reasons for multiple key pairs</p> <ul> <li>Different registration processes</li> <li>Restriction to certain policies and roles of EE</li> <li>Location of key generation and storage facility (e.g. must be generated on a secure signature creation device (SSCD))</li> <li>Security aspects (qualified signature \\(\\leftrightarrow\\) authentication) to prevent challenge semantic attack</li> <li>Backup and recovery policies</li> <li>Key history and archiving handling</li> </ul> <p>GPT Example Let's consider an example involving an individual user in a corporate environment. This user, named Alice, might have multiple roles within the organization, each requiring different levels of authentication and access.</p> <p>1. General Employee Access: Alice has a key pair for basic authentication to the company network. This key pair is used to access common company resources like email, internal websites, and shared drives. It's generated on Alice's assigned work computer and stored securely there. It doesn't require any special hardware or backup and recovery policies, and the key pair can be quickly reissued by the IT department if necessary.</p> <p>2. Secure Document Signing: In her role as a manager, Alice sometimes needs to provide a digital signature for official company documents. For this purpose, she has a second key pair that's generated and stored on a Secure Signature Creation Device (SSCD), such as a smart card or hardware security module. This is to ensure a higher level of security and to prevent a semantic attack (where an attacker tricks a user into signing a malicious document). To recover the private key or to reissue this key pair, Alice would have to go through a stringent process involving her manager and the IT department.</p> <p>3. Access to Sensitive Data*: Alice is also part of a project that involves handling sensitive data. To access this data, she uses a third key pair that's tied to specific policies and roles. The registration process for this key pair is more rigorous and might involve in-person verification. The private key is backed up and archived securely by the IT department, and there's a detailed policy for recovering it in case Alice loses access to it.</p>"},{"location":"themes/Public%20Key%20Infrastructure/#procedures-after-key-expiration","title":"Procedures after Key Expiration","text":"<ol> <li>Expired private keys used for encryption need to be accessible even after the expiration or revocation of a certificate \\(\\rightarrow\\) Long-term storage of expired private encryption keys!</li> <li>Digitally signed documents have to be verifiable even after the expiration or revocation of a certificate. All necessary information used for the validation of a signature has to be present for a long term period \\(\\rightarrow\\) Long-term storage of expired public verification keys and certificates</li> </ol>"},{"location":"themes/Public%20Key%20Infrastructure/#onboarding-process","title":"Onboarding Process","text":"<ul> <li>Crucial non-technical process in a PKI world</li> <li>Dependent on the purpose and field of application of a certificate this process may be anything between automatically (simple) and time consuming (complex)</li> <li>In an enterprise environement with a private PKI this is mostly done automatically by an Identity Managemtn System (IdMS)</li> <li>For public PKI's the range is very broad:<ul> <li>Simple e-mail registration</li> <li>Identification by sending a copy of ID</li> <li>Personal appearance up to a rigid vetting of the identity</li> </ul> </li> </ul>"},{"location":"themes/Public%20Key%20Infrastructure/#requesting-a-certificate-from-a-pki","title":"Requesting a certificate from a PKI","text":"<ul> <li>PKCS#10 Certificate Request syntax Standard over TLS or PKCS#7 Cryptography Message Syntax</li> <li>Simple Certificate Enrollment Protocol (SCEP) from Cisco used for certificate auto-enrollment for network devices (Today used by Mobile Device Management (MDM) solutions)</li> <li>Microsoft Auto-Enrollment process for Domain integrated Entities<ul> <li>GPT: This is a feature provided in a Microsoft Active Directory (AD) environment. The Auto-Enrollment process allows for the automated enrollment and renewal of certificates for domain-joined entities (such as user accounts and computer accounts) in an AD domain. This process is driven by Group Policy and uses the underlying Microsoft Certificate Services (a role in Windows Server) to issue the certificates. The types of certificates that can be auto-enrolled, and to whom, are controlled by the certificate templates configured on the Certificate Services server.</li> </ul> </li> <li>Certificate Request Message Format (CRMF)<ul> <li>GPT: Defined in RFC 4211, CRMF is a part of the Certificate Management Protocol (CMP). It's a syntax used to convey a request for a certificate to a Certificate Authority (CA) in certain PKI implementations. CRMF is often used in conjunction with PKCS#10, another standard used for certificate request syntax.</li> </ul> </li> </ul>"},{"location":"themes/Public%20Key%20Infrastructure/#certificate-management-protocol-cmp","title":"Certificate Management Protocol (CMP)","text":"<p>CMP is an internet protocol specified to manage X.509 digital certificates within a PKI</p> <ul> <li>A CMP client is able to communicate with a PKI service to request, revoke, suspend and resume certificate</li> <li>CMP messages are ASN.1/DER encoded and are usually encapsulated in HTTP(S) messages</li> <li>CMP is supported by several libraries: cryptlib, EJBCA, OpenSSL, BouncyCastle, ...</li> </ul>"},{"location":"themes/Public%20Key%20Infrastructure/#automatic-certificate-management-environment-acme","title":"Automatic Certificate Management Environment (ACME)","text":"<p>ACME allows setting up a HTTPS server and automatically obtain a browser-trusted certificate, without any human intervention</p> <ul> <li>Runs a certificate management agent on the web server \\(\\rightarrow\\) Certbot</li> <li>Issues domain validated (DV) certificates for web servers only</li> <li>Certificates have a lifetime of 90 days</li> <li>e.g. letsencrypt.org</li> </ul>"},{"location":"themes/Public%20Key%20Infrastructure/#problems-of-the-trust-list-model","title":"Problems of the trust-list model","text":"<ul> <li>There are hundreds of \"trusted\" root CAs installed in the OS/browser<ul> <li>There are hundreds of browser-accepted root CAs and an unknown number of subordinate ICAs</li> <li>Each of them can break TLS/ X.509 security</li> <li>It does not matter how good your CA is - the only thing that matters is the worst CA of them all</li> </ul> </li> <li>The set of trusted root CAs must be protected against malicious modification</li> <li>The set of trusted root CAs must be updated<ul> <li>automatically (MS, Apple, ...)</li> <li>or on next release (Mozilla, others)</li> </ul> </li> <li>Who decides which CAs are trusted?</li> </ul> <p>\\(\\rightarrow\\) We assume software vendors can establish trustworthy CAs</p> <p>links: AC2 TOC - Centralized public-key infrastructures - Key Revocation - Trust Issues in X.509 - Index</p>"},{"location":"themes/RSA%20Signature%20Scheme/","title":"RSA Signature Scheme","text":"<p>links: AC2 TOC - Digital Signatures - Index</p> <p>See RSA to understand the basics.</p> <p>Let \\(pk=(n,e)\\) and \\(sk=(n,d)\\) be ordinary RSA keys and \\(M=S=\\mathbb{Z}_n^*\\)</p> <p></p> <p>Again as in the encrypt-decrypt cycle in RSA, the signature and verify cycle relies on the inverse feature of the two keys leveraged. Signing is done by applying a modular exponentiation to the message using the senders private key \\((d,n)\\). The verification is done by applying the modular exponentiation to the signature received using the senders public key \\((e,n)\\). The result of the modular exponentiation must be equal to the received signature (which indicates a valid signature).</p>"},{"location":"themes/RSA%20Signature%20Scheme/#security","title":"Security","text":"<p>Textbook RSA should never be implemented like that  as it's not EUF-CMA secure:</p> <ul> <li>Textbook RSA is deterministic (same message always gives the same result)</li> <li>Textbook RSA is multiplicative (The attacker can choose \\(m_1\\) and \\(m_2\\), get signatures on them, and then construct a valid signature on the message \\(m_1m_2\\), even though they never got a signature on that message)</li> </ul> <p>Sign the hash not the message!</p>"},{"location":"themes/RSA%20Signature%20Scheme/#hash-and-sign","title":"Hash-and-Sign","text":"<p>Sign \\(h = hash(m)\\) instead of \\(m \\in \\{0, 1\\}^\u2217\\), use a collision-resistant hash function.</p>"},{"location":"themes/RSA%20Signature%20Scheme/#rsa-sha","title":"RSA-SHA","text":"<p>\\(hash: \\{0, 1\\}^\u2217 \\rightarrow \\{0, 1\\}^{256}\\) for SHA-256</p> <ul> <li>Standardised in PKCS#1 v1.5 (includes padding)</li> <li>No proof for EUF-CMA security</li> </ul>"},{"location":"themes/RSA%20Signature%20Scheme/#rsa-fdh-rsa-pss","title":"RSA-FDH (RSA-PSS)","text":"<p>Standardised in PKCS#1 v2.1 as RSA-PSS (probabilistic signature scheme)</p> <p>EUF-CMA secure under RSA assumption (provided that \\(hash(\u00b7)\\) has the properties of a random oracle)</p> <p>See more details here: FDH</p> <p>links: AC2 TOC - Digital Signatures - Index</p>"},{"location":"themes/RSA/","title":"RSA","text":"<p>links: AC2 TOC - RSA and ElGamal Encryption - Index</p>"},{"location":"themes/RSA/#rsa-basic-idea","title":"RSA Basic Idea","text":"<ul> <li>Security is based on the hardness of the FACTORING problem</li> </ul> <p>GPT</p> <ul> <li>In the RSA cryptosystem, <code>e</code> and <code>d</code> are chosen such that they are co-prime to \\(\\phi(n)\\). They are exponents used for encryption and decryption, respectively, and are not required to be co-prime to \\(n\\). Their being co-prime to \\(\\phi(n)\\) ensures they are multiplicative inverses of each other modulo \\(\\phi(n)\\), which is a requirement for RSA to function correctly (\\(e * d \\equiv 1 (mod \\; \\phi(n))\\)).</li> </ul> <p></p> <ul> <li> <p>The message \\(m\\) in RSA encryption and decryption is an element of \\(\\mathbb{Z}_n\\), the set of all integers modulo \\(n\\). It is not required to be an element of \\(\\mathbb{Z}_n^*\\) (the set of integers co-prime to \\(n\\)), because the RSA processes involve exponentiation modulo \\(n\\) (not multiplication), and these operations don't require \\(m\\) to have a multiplicative inverse modulo \\(n\\).</p> </li> <li> <p>However, in practice, it can be beneficial for security reasons to ensure that \\(m\\) is co-prime to \\(n\\), particularly when \\(m\\) contains sensitive information.</p> </li> </ul>"},{"location":"themes/RSA/#rsa-key-generation","title":"RSA Key Generation","text":"<p>The key generation in RSA starts by picking two different random Primes \\(p\\) and \\(q\\) which shall be equally large (half of the input parameter \\(k\\)). The found \\(p\\) and \\(q\\) are then multiplied to form \\(n\\). First the public key \\(e\\) is calculated by choosing a random relative prime in the group defined by the Euler phi function \\(\\phi(n) = (p-1)(q-1)\\), which counts the number of all elements in the multiplicative group \\(\\mathbb{Z}_{\\phi(n)}^{*}\\) (all elements which generate the group \\(\\mathbb{Z}_{\\phi(n)}\\) and therefore are relative prime). Given the public key \\(e\\), now the private key \\(d\\) is calculated by calculating the multiplicative inverse of \\(e\\) in \\(\\mathbb{Z}_{\\phi(n)}^{*}\\). Then resulting key pair consists of the value \\(n\\) and the respective key \\(e\\) (public) or \\(d\\) (private).</p> <p></p>"},{"location":"themes/RSA/#textbook-rsa","title":"Textbook RSA","text":"<p>Textbook RSA leverages and heavily relies on modular exponentiation as internal driver. Given a message \\(m\\) it calculates the ciphertext \\(c\\) by simply applying modular exponentiation to the message using the public key \\(e\\) of the receiving party. \\(c\\) is calculated within the group \\(\\mathbb{Z}_n^{*}\\). Therefore \\(n\\) (which is part of the public key) is supplied as parameter to the modular exponentiation algorithm. Since the private key \\(d\\) is the multiplicative inverse of \\(e\\) we can easily decrypt the message by applying modular exponentiation to the ciphertext \\(c\\) using the private key \\((n, d)\\) as parameter of the algorithm.</p> <p>Does \\(m\\)  need to be in \\(\\mathbb{Z}_n^*\\)? Probably not: Link</p> <p></p>"},{"location":"themes/RSA/#example","title":"Example","text":""},{"location":"themes/RSA/#conclusion","title":"Conclusion","text":"<p>Textbook RSA is insecure (!):</p> <ul> <li>It's completely deterministic \\(\\rightarrow\\) never a good thing for encryption</li> <li>Not IND-CPA because encrypting the same input with the same public key always results in the same output.</li> <li>Malleable because an attacker who knows \\(c\\) for some plaintext \\(m\\) can create a ciphertext for \\(2m\\) without knowing \\(m\\).</li> <li>see video: en: Youtube</li> </ul>"},{"location":"themes/RSA/#rsa-oaep-feistel-network","title":"RSA-OAEP (Feistel network)","text":"<p>Textbook RSA is insecure because its to easy to brute-force and crack the key using only the process specified in Textbook-RSA due to its deterministic nature. For this reason RSA-OAEP was invented as extension of Textbook-RSA (Standardized in PKCS#1). RSA-OAEP basically just adds a randomized padding to the message leveraging a two-round Feistel network which uses two different hash functions internally. The padded plaintext is encrypted and not the plaintext itself. After decryption, the padding is reversed and the plaintext is revealed.</p> <p></p> <p></p>"},{"location":"themes/RSA/#oaep-padding","title":"OAEP Padding","text":""},{"location":"themes/RSA/#oaep-unpadding","title":"OAEP Unpadding","text":"<ul> <li>Instead of encrypting \\(m\\) (\\(modExp(m)\\)) a randomized \\(m'\\) is calculated which is then encrypted</li> <li>see video: de: Youtube</li> </ul> <p>Additional information about hardness assumption</p> <p>links: AC2 TOC - RSA and ElGamal Encryption - Index</p>"},{"location":"themes/Random%20Number%20Generator%20%28RNG%29/","title":"Random Number Generator","text":"<p>links: AC1 TOC - Randomness - Index</p>"},{"location":"themes/Random%20Number%20Generator%20%28RNG%29/#rng","title":"RNG","text":"<p>A RNG is an algorithm or device designed to generate a sequence of numbers that lacks any pattern or predictability. Each number in the sequence is supposed to be statistically independent of the others.</p>"},{"location":"themes/Random%20Number%20Generator%20%28RNG%29/#trng","title":"TRNG","text":"<p>TRNG stands for True Random Number Generator. Unlike RNGs, which are often pseudorandom, TRNGs generate random numbers from a physical process, not a set algorithm.</p> <p>A TRNG is stateless. That mean we have one weakness. We don't know if the current Entropy output is low or not.</p>"},{"location":"themes/Random%20Number%20Generator%20%28RNG%29/#rng-to-prng","title":"RNG to PRNG","text":"<p>RNGs produce true random bits relatively slowly from analog sources, in a nondeterministic way, and with no guarantee of high entropy. In contrast, a Pseudorandom Number Generator (PRNG) (PNRG) produces random-looking bits into a long stream of reliable pseudorandom bits suitable for crypto applications.</p> <p>links: AC1 TOC - Randomness - Index</p>"},{"location":"themes/Random-Oracle%20Model/","title":"Random-Oracle Model","text":"<p>links: AC1 TOC - Random Oracle &amp; Applications -  Modern Cryptography MOC - Index</p>"},{"location":"themes/Random-Oracle%20Model/#idealized-model","title":"Idealized Model","text":"<p>An approach that has been hugely successful in practice, and which offers a \"middle ground\" between a fully rigorous proof of security on the one hand and no proof whatsoever on the other, is to introduce an idealized model in which to prove the security of cryptographic schemes. A popular example of this approach is the random-oracle model, which treats a cryptographic hash function as a truly random function.</p>"},{"location":"themes/Random-Oracle%20Model/#the-random-oracle-model-global-random-oracle","title":"The Random Oracle Model / Global Random Oracle","text":"<p>The random-oracle model posits the existence of a public, random function \\(H\\) that can be evaluated only by \"querying\" an oracle.</p> <p>The oracle is simply a \"black box\" that takes a bit-string as input and returns a bit-string as output. The internal workings of the box are unknown and inscrutable. Everyone (including the adversary), can interact with the box. The box is consistent/ deterministic, if the box ever outputs \\(y\\) for a particular input \\(x\\), then it always outputs the same answer \\(y\\) when given the same input \\(x\\) again. The box must also be collision resistance.</p> <p>\\(H\\) can either be viewed as being chosen the outputs \"in one shot\" uniformly from the set of all functions or \"on-the-fly\" as needed. In the second case we can view the function as being defined by a table that is initially empty. When the oracle receives a query \\(x\\) it first checks whether \\(x\\) is already in the table and otherwise chose a uniform string \\(y\\), returns it and store it in the table.</p> <p>The hope is that the cryptographic hash function used is \"sufficiently good\" at emulating a random oracle.</p> <p>Random oracle vs. pseudorandom functions</p> <ul> <li>A pseudorandom function is only pseudorandom if the key is secret. In the random oracle model all parties need to be able to compute the function, thus there can be no secret key.</li> <li>In the random oracle model, the random function is used as part of a construction itself</li> </ul> <p>Problems</p> <ul> <li>its not clear what it means for a hash function to be \"sufficient good\" at emulating a random oracle, nor is it clear that this is an achievable goal.</li> <li>\\(H\\) is always fixed and its code is known, so a proof of security in the oracle model is not a rigorous proof that any real-world instantiation of the scheme is secure.</li> <li>there is currently debate within the cryptographic community about how to interpret proofs in the random-oracle model.</li> </ul> <p>links: AC1 TOC - Random Oracle &amp; Applications -  Modern Cryptography MOC - Index</p>"},{"location":"themes/Randomness/","title":"Randomness","text":"<p>links: AC1 TOC - Randomness - Index</p>"},{"location":"themes/Randomness/#definition","title":"Definition","text":"<p>Randomness refers to a phenomenon or process that is without pattern, order or predictability. In simple terms, it denotes a condition where every possible outcome or event has an equal chance of occurrence (uniform distribution).</p>"},{"location":"themes/Randomness/#requirements-of-randomness","title":"Requirements of Randomness","text":"<ol> <li>Unpredictability: A random sequence can't be reasonably predicted.</li> <li>Lack of Pattern: There should be no discernible pattern or order in a random sequence.</li> <li>Balance: In a large enough sample, each possible outcome should occur roughly with the same frequency.</li> <li>Independence: The occurrence of one event should not affect the occurrence of another event.</li> </ol>"},{"location":"themes/Randomness/#sources-of-randomness","title":"Sources of Randomness","text":"<p>Nature / Physics is the source we use for Randomness.</p> <ul> <li>Quantum Mechanics (Radioactive decay, quantum superpositions)</li> <li>Atmospheric Noise (Noise in radio &amp; television signals)</li> <li>Biological Processes</li> <li>Dice and Lottery Draws (If they are fair)</li> <li>Latte Macchiato</li> <li>From Hardware sources (Keyboard timings, mouse movements, audio, temperature etc.)</li> </ul>"},{"location":"themes/Randomness/#askew-events","title":"Askew events","text":"<p>Askew events refer to events that are slightly off from the norm, unpredictable, or irregular.</p> <p>Hardware sources mentioned above are an example of askew events. Another example is CPU Jitter.</p>"},{"location":"themes/Randomness/#cpu-jitter","title":"CPU Jitter","text":"<p>Jitter refers to the small, unpredictable variations in the timing of events, such as the execution of instructions by a CPU. These variations are caused by factors such as system interrupts, background processes, or fluctuations in system clock speed (and temperature). By measuring and analysing these timing variations, a CPU Jitter RNG can generate random numbers that are believed to be statistically random and suitable for cryptographic applications or other scenarios that require high-quality randomness.</p> <p>The concept behind a CPU Jitter RNG is that the precise timing of CPU instructions is difficult to predict due to the dynamic nature of computer systems and the complexity of concurrent processes running on them. By leveraging these timing variations, the RNG can extract random bits and construct random numbers.</p> <p>Sources on Jitter entropy:</p> <ul> <li>Clearification and justification of jittering as entropy source</li> <li>Example implementation</li> </ul> <p>links: AC1 TOC - Randomness - Index</p>"},{"location":"themes/SHAKE%20%26%20cSHAKE/","title":"SHAKE &amp; cSHAKE","text":"<p>links: AC1 TOC - Private Key Encryption - Index</p>"},{"location":"themes/SHAKE%20%26%20cSHAKE/#shake","title":"SHAKE","text":"<ul> <li>SHAKE (Secure Hash Algorithm and KECCAK) is an Extendable-Output Function (or XOF)</li> <li>It is like SHA-3 but with an infinite output</li> <li>can be used as a KDF, a PRNG, a Stream Cipher, ...</li> <li>based on the Keccak permutation function</li> </ul>"},{"location":"themes/SHAKE%20%26%20cSHAKE/#cshake","title":"cSHAKE","text":"<ul> <li>cSHAKE is a customisable version of SHAKE</li> <li>has one new input: a customization string</li> <li>the purpose is to avoid collisions between different usages of the SHAKE function</li> </ul> <p>Examples</p> <ul> <li>In KMAC, the cSHAKE function is called with the customization string \"KMAC\"</li> <li>two examples given by the NIST publication:<ul> <li>cSHAKE128(public_key, 256, \"\", \"key fingerprint\")</li> <li>cSHAKE128(email_contents, 256, \"\", \"email signature\")</li> </ul> </li> </ul> <p>Source: Link</p> <p>links: AC1 TOC - Private Key Encryption - Index</p>"},{"location":"themes/SMTP/","title":"SMTP","text":"<p>links: AC2 TOC - Secure messaging and channels - Index</p>"},{"location":"themes/SMTP/#smtp_1","title":"SMTP","text":"<p>GPT Simple Mail Transfer Protocol (SMTP) is a communication protocol used to send email over the internet. SMTP operates in a client-server model over a reliable transport, typically TCP/IP, ensuring that data is delivered without errors and in the correct sequence.</p> <p>There are two main components in SMTP communication: the content and the envelope.</p> <ol> <li> <p>Content: This is the object to be delivered to the recipient, typically the email message itself. It includes the body of the email and any attachments, as well as the subject line, and the \"From\", \"To\", and \"Cc\" fields. The content is what the recipient sees when they open the email.</p> </li> <li> <p>Envelope: This is the information needed to transmit and deliver the email. It's like the physical envelope of a traditional letter, containing the delivery instructions for the mail servers. The envelope includes the sender's and recipient's email addresses, but these are used by the mail servers for routing and delivery purposes and are separate from the \"From\" and \"To\" fields in the content. The recipient does not see the envelope information when they open the email.  </p> </li> </ol> <p></p> <p>In an SMTP session, the client (the sender's email server) establishes a connection with the server (the recipient's email server) over a reliable transport. The client then sends the envelope information to the server, followed by the content of the email. The server uses the envelope information to route and deliver the email to the recipient's mailbox.</p> <p>SMTP is a simple, text-based protocol, but it's also quite powerful and flexible, allowing for features like forwarding, carbon copies (Cc), and blind carbon copies (Bcc). However, SMTP itself does not include any built-in security features, so it's often used in conjunction with other protocols like TLS or SSL to ensure the confidentiality and integrity of email messages. Everything is 7-bit US ASCII.</p> <p>Example Header</p> <p></p> <p>Delivery path of messages can be traced back due to the Received header information</p> <p></p> <p>links: AC2 TOC - Secure messaging and channels - Index</p>"},{"location":"themes/Schnorr%20Signatures/","title":"Schnorr Signatures","text":"<p>links: AC2 TOC - GNU Taler - AC2 TOC - Digital Signatures - Index</p> <p>Way nicer and simpler than DSA/ECDSA.</p> <p>Hint: For elliptic curves we use additive notation for groups</p> <ul> <li>\\(G\\) : base point of the elliptic curve</li> <li>\\(q\\) : order of the elliptic curve</li> <li>\\(\\mathbb{Z_q}\\) : Set of integers modulo \\(q\\)</li> <li>\\(d\\) : private key (scalar)</li> <li>\\(P\\) : public key (point)</li> <li>\\(m\\) : message</li> </ul>"},{"location":"themes/Schnorr%20Signatures/#key-generation","title":"Key Generation","text":"<ol> <li>Generate private key: \\(d \\leftarrow \\mathbb{Z_q}\\)</li> <li>Calculate public key: \\(P = dG\\)</li> </ol>"},{"location":"themes/Schnorr%20Signatures/#signature-generation","title":"Signature Generation","text":"<p>Sign message \\(m\\)</p> <ol> <li>Generate random nonce: \\(r \\leftarrow \\mathbb{Z_q}\\)</li> <li>Compute point: \\(R = rG\\)</li> <li>Hash nonce (x-coordinate) and message: \\(e = H(Rx\\;||\\;m)\\)</li> <li>Compute \\(s = r - ed \\mod q\\)</li> <li>The signature is: \\((s, e)\\)</li> </ol>"},{"location":"themes/Schnorr%20Signatures/#signature-verification","title":"Signature Verification","text":"<p>Verify a signature \\((s,e)\\) on a message \\(m\\) with the public key \\(P\\)</p> <ol> <li>Compute: \\(R' = sG + eP\\)</li> <li>Compute: \\(e' = H(R'x\\;||\\;m)\\)</li> <li>Signature is valid if \\(e' = e\\)</li> </ol> <p>Schnorr signatures have several appealing properties, including:</p> <ul> <li>Provable Security: Schnorr signatures have a strong security proof in the random oracle model.</li> <li>Efficiency: Schnorr signatures involve relatively efficient computational operations.</li> <li>Non-malleability: It's computationally infeasible to modify a Schnorr signature into a valid signature for a different message or a different signer.</li> <li>Linearity: Schnorr signatures have a linear structure, which allows for multi-signature (group of signers signs a message) and threshold signature schemes.</li> </ul> <p>links: AC2 TOC - GNU Taler - AC2 TOC - Digital Signatures - Index</p>"},{"location":"themes/Secure%20Channels/","title":"Secure Channels","text":"<p>links: AC1 TOC - From Symmetric Encryption to Secure Channels - Index</p>"},{"location":"themes/Secure%20Channels/#what-is-a-secure-channel","title":"What is a secure channel?","text":"<ul> <li>By secure channel we refer to a logical channel running on top of some insecure link (typically the Internet) that provides<ul> <li>Confidentiality  </li> <li>Integrity and authenticity</li> <li>Message freshness</li> </ul> </li> <li>Secure channels are probably one of the most important applications of crypto in the real world.</li> <li>Many well known secure network protocols such as TLS/SSL, VPN, IPSec, WPA etc. but also application specific (e.g., secure VoIP), and proprietary protocols (maybe Skype?) make use of secure channels.</li> <li>It is also possible to get it wrong, e.g. the WEP protocol has a series of security flaws.</li> </ul>"},{"location":"themes/Secure%20Channels/#secure-send-secure-receive","title":"secure-send / secure-receive","text":"<p>pseudo code representing secure-send (encryption):</p> <p></p> <p>pseudo code representing secure-receive (decryption):</p> <p></p> <ul> <li>The freshness property based on counters guarantees the following: If \\(m1, m2, . . . , mn\\) denote the messages send using secure-send(), then secure-receive() can guarantee that the messages \\(m1,m2,...,mn\\) being received are sub sequence of the messages sent.</li> <li>Counters give no timing guarantees, i.e. the adversary Mallory can delay messages at will.</li> <li>Timing guarantees can be achieved using<ul> <li>Time-stamps</li> <li>Challenges</li> </ul> </li> <li>No security protocol can prevent Mallory from discarding messages.</li> <li>MACs provide not just integrity protection but also authenticity, as discussed earlier.</li> <li>Typically, secure-send() and secure-receive() are run by both parties using a secure channel.</li> <li>Each party will have an independent key-pair (enc &amp; MAC).</li> <li>In practice, one introduces the notion of a session (e.g. e-banking). Consists of a session ID in the header, which allows the receiver to look-up session state (keys, counters etc.) when receiving a message.</li> <li>Generally better is the use of authenticated encryption, where the block-cipher mode guarantees confidentiality and integrity.</li> </ul>"},{"location":"themes/Secure%20Channels/#repudiation-vs-non-repudiation","title":"Repudiation vs. non-repudiation","text":"<ul> <li>Digital signatures allow proving that someone said something</li> <li>Alice may be happy to authenticate to Bob, but not to Eve or Mallory!</li> <li>Bob may turn \u201cevil\u201d and use Alice\u2019s statements against her later</li> <li>Signatures may provide too much (authentication and non-repudiation)</li> </ul>"},{"location":"themes/Secure%20Channels/#off-the-record-otr-protocol","title":"Off-the-record (OTR) protocol","text":"<p>Protocol that allows to authenticate and keep repudiation by publishing MAC keys after message is sent.</p> <p>Achieved using two signatures and a DH handshake.</p>"},{"location":"themes/Secure%20Channels/#how-otr-works","title":"How OTR works","text":"<p>see How OTR Works</p> <ol> <li>Each participant has a long-term identity key (A and B) that they use to sign an ephemeral key (a and b), which they exchange and use to\u00a0calculate a shared secret. </li> <li>The shared secret from this key exchange is used to derive a sending and receiving cipher key for each party, as well as a set of MAC keys for each party.</li> <li>Every transmitted message includes a\u00a0MAC, which the message\u2019s recipient can verify.</li> </ol> <p>Since the key used to construct and verify the MAC was derived from the shared secret, and since the shared secret was derived from a key exchange that was in turn signed by the sender\u2019s long-term identity key, the recipient can be sure that the message was really constructed by their peer in the conversation.</p> <p>The message is \u201cdeniable,\u201d however, because the MAC keys are derived from a\u00a0shared\u00a0secret. Unlike PGP signatures, where the sender is the only person capable of producing the signature, the recipient of an OTR message is\u00a0also\u00a0capable of producing a sender\u2019s MAC. This doesn\u2019t compromise the integrity of the conversation for its participants, but does prevent a message\u2019s recipient from revealing the MAC\u2019d message to a third party as proof that it was produced by the sender, since it could have just as easily been constructed by the recipient themselves.</p>"},{"location":"themes/Secure%20Channels/#triple-diffie-hellman-3dh","title":"Triple Diffie-Hellman (3DH)","text":"<p>Replaces the two DSA signatures from OTR and does everything with 3 DH key exchanges.</p> <ul> <li>A: Public Identity (Key) Alice</li> <li>B: Public Identity (Key) Bob</li> <li>a: Ephemeral key Alice</li> <li>b: Ephemeral key Bob</li> </ul> <p></p> <p>But wait how is there authenticity? -- There is not</p> <p>Before or after an X3DH key agreement, the parties may compare their identity public keys A and B through some authenticated channel. For example, they may compare public key fingerprints manually, or by scanning a QR code.\u00a0Methods for doing this are outside the scope of this document.</p> <p>If authentication is not performed, the parties receive no cryptographic guarantee as to who they are communicating with. Signal Documentation</p> <p>Advantages</p> <ul> <li>Reduced Algorithmic Complexity: eliminated DSA, only DH now</li> <li>Increased Forgability: no signatures involved \\(\\rightarrow\\) Now anyone is capable of easily producing a forged message from anyone else, whether they\u2019ve actually had a conversation with them before or not.</li> <li>Reduced Protocol Complexity</li> <li>Maintained Forward Secrecy</li> <li>Smaller Payloads</li> </ul> <p>see Simplifying OTR Deniability</p> <p>Some more details</p> <p>If Alice's private key \\((a, T_a)\\) is compromised in the 3DH protocol, the attacker could not only decrypt messages meant for Alice, but could also impersonate Alice in her communications. This is because Alice's private key is used both to decrypt messages sent to her and to create a digital signature that verifies her identity. If an attacker has access to Alice's private key, they can forge this digital signature and send messages that appear to be from Alice.</p> <p>Compromising Alice's private key would not allow an attacker to decrypt past session keys, because 3DH provides forward secrecy. Forward secrecy is a feature of specific key agreement protocols that ensures that even if the private key is compromised, past session keys will not be compromised. Each session key is generated independently with a unique ephemeral key pair, so even if Alice's long-term private key is compromised, the session keys used for past secure communications would remain secure.</p> <p>links: AC1 TOC - From Symmetric Encryption to Secure Channels - Index</p>"},{"location":"themes/Security/","title":"Security","text":"<p>links: AC1 TOC - Security &amp; Cryptography - Index</p> <p>Dictionary definition:  the state of being free from danger or threat</p> <p>Security is an organisational problem. It's goal is to provide an operational status 'se' (without) 'cura' (fear).</p> <p>Questions to be asked to reach security:</p> <ul> <li>What - Problem, asset, adversary, goals</li> <li>Strength - Value of asset over space and time, power of adversary</li> <li>How long - How long to secure asset, active time of adversary</li> <li>Where - Resting, in transit, local, remote and where is the adversary</li> <li>Trust - Assumptions, borders of problem domain</li> </ul>"},{"location":"themes/Security/#security-dispositives","title":"Security dispositives","text":"<p>Security Assumptions</p> <p>If the assumptions hold true, then the system should remain secure.</p> <ul> <li>Users' private keys are kept secret</li> <li>Factoring and DL are hard problems</li> </ul> <p>Trust assumptions</p> <p>Entities or components that are assumed to be trustworthy.</p> <ul> <li>CA</li> <li>Trusted Hardware/Software</li> <li>Third-Party Trust (Cloud servers, authentication services)</li> <li>Physical Security<ul> <li>A common assumption is that physical access to devices or servers is restricted and that those with physical access are trustworthy.</li> </ul> </li> </ul> <p>Attack Model</p> <p>It includes details about what kind of resources an attacker might have (like computational power), what their potential goals are (like stealing data), and what strategies they might use (like social engineering or malware).</p> <p>links: AC1 TOC - Security &amp; Cryptography - Index</p>"},{"location":"themes/Shamir%20Secret%20Sharing/","title":"Shamir Secret Sharing","text":"<p>links: AC1 TOC - Secret sharing - Index</p> <p>Shamir's Secret Sharing (SSS) is an efficient secret sharing algorithm for distributing private information (the \"secret\") among a group such that the secret cannot be revealed unless a quorum of the group acts together to pool its knowledge.</p>"},{"location":"themes/Shamir%20Secret%20Sharing/#problems","title":"Problems","text":"<p>There are 3 main problems that SSS wants to address.  Below are the 3 problems with a suggested solution:</p>"},{"location":"themes/Shamir%20Secret%20Sharing/#availability","title":"Availability","text":"<p>If you give one person a secret key, it may get lost</p> <p>\\(\\rightarrow\\) So give it to more than one Person</p>"},{"location":"themes/Shamir%20Secret%20Sharing/#confidentiality","title":"Confidentiality","text":"<p>If you give many entities a secret, it may get disclosed</p> <p>\\(\\rightarrow\\) So give them only a key share!</p>"},{"location":"themes/Shamir%20Secret%20Sharing/#scalability","title":"Scalability","text":"<p>If you want k out of n entities to coordinate to recover a secret, there are </p> \\[\\binom{n}{k} = \\frac{n!}{k!(n-k)!}\\] <p>combinations to consider</p> <p>\\(\\rightarrow\\) Use Polynominals!</p>"},{"location":"themes/Shamir%20Secret%20Sharing/#polynominals","title":"Polynominals","text":"<p>A polynominal of degree \\(k\\) is fully determined by \\(k + 1\\) data points </p> \\[(x_0,y_0), ...,(x_j,y_j),...,(x_k,y_k)\\] <p>when given that \\(x_i \\neq x_j\\) for \\(i \\neq j \\land i,j \\in 0,..,k\\). (Each \\(x\\) must be unique)</p> <p>Example: So we could distribute 30 points to 30 people and 10 are enough to recover a polynominal of degree 9.</p>"},{"location":"themes/Shamir%20Secret%20Sharing/#lagrange-interpolation","title":"Lagrange Interpolation","text":"<p>The interpolation polynominal in the Lagrange form is:</p> \\[L(x)= \\sum_{j=0}^k y_j l_j(x)\\] <p>Another representation (which I understand better): \\(\\(P(x) = \\sum_{j = 0}^{n} f_j(x_j) \\cdot l_j(x)\\)\\)</p> <p>where \\(l_j\\) is defined as follows (called Lagranges Interpolation formula):</p> \\[l_j(x)= \\prod_{0\\le m \\le k,\\ m \\neq j} \\frac{x-x_m}{x_j-x_m}=\\frac{x-x_0}{x_j-x_0} \\cdots \\frac{x-x_{j-1}}{x_j-x_{j-1}} \\frac{x-x_{j+1}}{x_j-x_{j+1}} \\cdots \\frac{x-x_{k}}{x_j-x_{k}}, 0 \\le j \\le k\\] <p>With lagranges interpolation we can find one polynomial which conquers every point defined by a set of tuples \\(S := \\{i \\in 0,..,n: (x_i, f_i)\\}\\) (where \\(f_i\\) is some polynomial itself). It's only possible if every \\(x \\in S\\) is unique within the set.</p>"},{"location":"themes/Shamir%20Secret%20Sharing/#case-study","title":"Case Study","text":"<p>Say we have following polynomials: $$ f_0(x) = 0, f_1(x) = x^2, f_2(x) = x^3$$  Say we are given following set based on the polynomials above: $$S := { (1, f_0(1) = 1), (2, f_1(2) = 4), (3, f_2(3) = 9) } $$</p> <p>We now can create one resulting polynomial by applying the Lagranges Interpolation formula (\\(n = \\vert S \\vert = 3\\)): \\(\\(P(x) = 1 \\cdot l_1(x) + 4 \\cdot l_2(x) + 9 \\cdot l_3(x)\\)\\)</p> <p>We could also substitute \\(l_1, l_2, l_3\\) with the respective terms of the Lagrange Interpolation formula and we would see that we have a deterministic polynomial. If the resulting polynomial is our key we could share the different polynomial among people and if we needed to recover the key we would just apply the formula of Lagrange and our key could be recovered.</p> <p>Source: de: Wikipedia</p>"},{"location":"themes/Shamir%20Secret%20Sharing/#practical-considerations","title":"Practical Considerations","text":"<p>Our secrets will typically be Integers. Calculations with floating points could get messy</p> <p>\\(\\rightarrow\\) Use finite field arithmetic, not \\(\\mathbb{R}\\)</p>"},{"location":"themes/Shamir%20Secret%20Sharing/#real-world-scalability","title":"Real world scalability","text":"<p>Other values:</p> <ul> <li>\\(\\binom{10}{5} = 252\\)</li> <li>\\(\\binom{20}{10} = 184756\\)</li> <li>\\(\\binom{30}{15} = 155117520\\)</li> <li>\\(\\binom{100}{50}\\approx 10^{29}\\)</li> </ul> <p>How many people do you have to share your secrets with?</p> <p>How many people realistically participate in recovery?</p> <p>links: AC1 TOC - Secret sharing - Index</p>"},{"location":"themes/Shannon%20Cipher/","title":"Shannon Cipher","text":"<p>links: AC1 TOC - Security &amp; Cryptography - Index</p> <ul> <li>Key space</li> <li>Message space</li> <li>Cipher space</li> <li>Encryption function</li> <li>Decryption function</li> <li>Uniform</li> <li>Probability</li> </ul> <p>Shanon Cipher: \\(\u03b5 = {(K, M, C)(E: K \u00d7 M \u2192 C, D: K \u00d7 C \u2192 M)}\\)</p> <p>Encrypt &amp; Decrypt in detail:</p> <p></p> <p>If the Shanon Cipher is defined like in the image above it provides perfect secrecy. The Shanon Cipher does not imply that directly, it depends on how \\(E\\) and \\(D\\) are defined.</p> <p>Decorrelation </p> <ul> <li>Ciphertext is drawn with a uniform probability over the ciphertext space for every key / message input.</li> <li>The probability that two different messages using two different keys result in the same ciphertext is equally likely to any other outcome.</li> </ul> <p>Confusion</p> <ul> <li>Intended to make the relationship between the key and ciphertext as complex as possible.</li> <li>The same message with a different key should result in a strictly different ciphertext.</li> <li>(Confusion can be achieved by applying substitutions)</li> </ul> <p>Diffusion</p> <ul> <li>Refers to rearranging or spreading out the bits in the message so that any redundancy in the message is spread out over the ciphertext. </li> <li>A different message with the same key should result in a strictly different ciphertext.</li> <li>(Diffusion can be achieved by applying permutations)</li> </ul> <p>Recorrelation</p> <ul> <li>Refers to the decryption of the message.</li> </ul> <p>links: AC1 TOC - Security &amp; Cryptography - Index</p>"},{"location":"themes/Shannons%20Theorem/","title":"Shannon's Theorem","text":"<p>links: AC1 TOC - Security &amp; Cryptography - Modern Cryptography MOC - Index</p> <p>Shannon provided a characterization of perfectly secret encryption schemes.</p> <p>We have an encryption scheme with \\(|M| = |K| = |C|\\), the scheme is perfectly secret iff:</p> <ol> <li>Every key \\(k \\in K\\) is chosen with equal probability \\(1/|K|\\) by \\(Gen\\)</li> <li>For every \\(m \\in M\\) and every \\(c \\in C\\), there is a unique key \\(k \\in K\\) such that \\(Enc_k(m)\\) outputs \\(c\\)</li> </ol> <p>Given that \\(M, K\\) and \\(C\\) represent spaces (Message-, key- and ciphertextspace) and not concrete expressions/terms (as also stated in Shannon Cipher).</p> <p>links: AC1 TOC - Security &amp; Cryptography - Modern Cryptography MOC - Index</p>"},{"location":"themes/Social%20Engineering/","title":"Social Engineering","text":"<p>links: AC1 TOC - Intro - Index</p> <p>Based on slides from Joint Threat Research and Intelligence Group (JTRIG)</p> <p>Keywords</p> <p>\u201cdiscredit\u201d, promote \u201cdistrust\u201d, \u201cdissuade\u201d, \u201cdeceive\u201d, \u201cdisrupt\u201d, \u201cdelay\u201d, \u201cdeny\u201d, \u201cdenigrate/degrade\u201d, and \u201cdeter\u201d</p>"},{"location":"themes/Social%20Engineering/#principles","title":"Principles","text":"<ul> <li>Distraction - Let your guard down</li> <li>Herd - Everybody is doing it so its safe?</li> <li>Dishonesty - Hard to seek help as everything bad is used against you</li> <li>Deception - Things/people are not what they seem</li> <li>Need and Greed - Take advantage of your needs and desires</li> <li>Time - Pressure</li> <li>Social Compliance principle / Authority - Following leaders</li> <li>Reciprocity - You want to give back if you got something</li> <li>Consistency - Backing out of deals is hard once they are made</li> <li>Flattery - Easier to say yes if you like someone</li> </ul> <p>JTRIG Tools</p> <ul> <li>BIRDSTRIKE Twitter monitoring and profile collection.</li> <li>SPRING BISHOP Find private photographs of targets on Facebook.</li> <li>...</li> </ul> <p>JTRIG Capabilities</p> <ul> <li>GESTATOR amplification of a given message, normally video, on popular multimedia websites.</li> <li>SWAMP DONKEY silently locate files and encrypt them on a target\u2019s machine.</li> <li>UNDERPASS Change outcome of online polls</li> <li>...</li> </ul> <p>links: AC1 TOC - Intro - Index</p>"},{"location":"themes/Steganography/","title":"Steganography","text":"<p>links: AC1 TOC - Security &amp; Cryptography - Index</p> <p>'stegano' (covered) 'graphy' (writing)</p> <p>Steganography is the practice of hiding information or messages within other non-secret data, such as images, audio files, video files, or text documents, in a way that the existence of the hidden information remains undetectable to an observer. The goal of steganography is to conceal the fact that communication is taking place, as opposed to cryptography, which focuses on making the content of a message unreadable.</p> <p>In steganography, the secret information is embedded within the carrier data by making subtile modifications that are visually or audibly imperceptible to the human senses. The carrier file, also known as the cover file, can be an image, audio file, or any other digital file format that provides enough redundancy or complexity to allow the hidden information to be concealed within it.</p>"},{"location":"themes/Steganography/#uses-in-the-security-context","title":"Uses in the security context","text":"<ul> <li>Confidential communications - Try to hide the fact that there is communication taking place.</li> <li>Watermarking</li> <li>Malware concealment</li> <li>Data exfiltration - Hide data to be stolen in innocent looking files</li> </ul> <p>links: AC1 TOC - Security &amp; Cryptography - Index</p>"},{"location":"themes/Stream%20Cipher/","title":"Stream Cipher","text":"<p>links: Modern Cryptography MOC - Index</p> <p>The output bits of a stream cipher are produced gradually and on demand, so that an application can request exactly as many pseudorandom bits as its needs.</p>"},{"location":"themes/Stream%20Cipher/#stream-cipher-with-pseudorandom-generator","title":"Stream cipher with pseudorandom generator","text":"<p>A secure stream cipher without an IV is just a pseudorandom generator with a more flexible interface. - \\(s\\): seed/key - \\(l\\): length</p> <p>\\(G^l(s) := GetBits_1(Init(s), 1^l)\\)</p>"},{"location":"themes/Stream%20Cipher/#stream-cipher-with-pseudorandom-function","title":"Stream cipher with pseudorandom function","text":"<p>Using different values for the \\(IV\\) should produce output streams that appear independently uniform. Practical stream ciphers typically do not support arbitrary values of \\(n\\) (which determines the length of the seed and the IV), but instead work only for some fixed values of \\(n\\).</p> <p>\\(F_s^l(IV) := GetBits_1(Init(s, IV), 1^l)\\)</p> <p>Example Output of a stream cipher</p> <p>\\(F_s(IV \\parallel \\langle 0 \\rangle),F_s(IV \\parallel \\langle 1 \\rangle), ...\\)</p>"},{"location":"themes/Stream%20Cipher/#modes-of-operation","title":"Modes of Operation","text":""},{"location":"themes/Stream%20Cipher/#synchronized-mode","title":"Synchronized mode","text":"<p>Stateful encryption where the sender and receiver are required to maintain state between the encryption/decryption of different messages. Does not need to use an IV.</p>"},{"location":"themes/Stream%20Cipher/#unsynchronized-mode","title":"Unsynchronized mode","text":"<p>When a stream cipher does take an IV, it can be used to construct a stateless encryption scheme. The main advantage here is that the encryption scheme directly handles arbitrary-length messages.</p> <p>links: Modern Cryptography MOC - Index</p>"},{"location":"themes/Summary%20Blockchain/","title":"Summary Blockchain","text":"<p>links: AC1 TOC - Blockchain - Index</p> <p>Source: de: YouTube</p>"},{"location":"themes/Summary%20Blockchain/#goal","title":"Goal","text":"<ul> <li>ability to conduct transactions between two parties who do not know or trust each other</li> <li>no third party!</li> </ul> <p>Properties</p> <ul> <li>Blockchain is an accounting system (ledger), not a currency</li> <li>Proof of Work: as an invitation to tender, get bitcoins for work<ul> <li>all 4 years, the profit is halved</li> </ul> </li> <li>inflation: there is an absolut limit of bitcoins, the hard cap, wich is 21 Million Coins (90% has already been scooped)</li> <li>deflation: no one can help, money supply shrinks (lost wallets, typos)</li> <li>a new block per 10 Min</li> <li>bitcoin's protection against corruption is the price of electricity</li> <li>Protection against replay attack: destroy old coins, create two new ones (for each party of the transaction)</li> <li>system is closed (change in Dollar, other currencies)</li> <li>30min to accepted transaction</li> <li>if you have 50% of the mining-power, you can control the blockchain</li> </ul>"},{"location":"themes/Summary%20Blockchain/#improvements","title":"\"Improvements\"","text":"<ul> <li>Proof of Stake: not random, the winner (larger stake) collects fees, increases stake (Oligarchy)</li> <li>Proof of Authority: only governments can write</li> <li>Smart Contracts: not only data, also code in blockchain</li> <li>Stablecoin: Tether</li> </ul> <p>links: AC1 TOC - Blockchain - Index</p>"},{"location":"themes/TLS/","title":"TLS","text":"<p>links: AC2 TOC - Secure messaging and channels - Index</p>"},{"location":"themes/TLS/#what-is-tls","title":"What is TLS?","text":"<p>Demo: See this page fetch itself, byte by byte, over TLS</p> <p>Transport Layer Security (TLS) is a cryptographic protocol designed to provide secure communication over a computer network. This protocol uses asymmetric cryptography to authenticate the communication parties, symmetric encryption to maintain privacy of the transmitted data, and message authentication codes for message integrity. Before TLS there was Secure Socket Layer (SSL). TLS is a successor protocol of SSL.</p> <p></p>"},{"location":"themes/TLS/#why-does-tls-use-records-instead-of-streams","title":"Why does TLS use records instead of streams?","text":"<p>There is a MAC at the end of every record which allows the receiver to check integrity right when the record arrives. With stream ciphers, if the MAC is at the end he might need to wait for the whole message to arrive before integrity can be checked. Most applications process/display data incrementally anyway.</p> <p>To avoid re-order or replay attacks, a sequence number is put into the MAC (see Secure Communication Sessions)</p> <p>To avoid that an attacker could truncate / cut off the TCP stream (attacker sending TCP FIN packet to sender) without the receiver noticing, special record types are used to indicate and end of a stream.</p>"},{"location":"themes/TLS/#what-are-problems-of-tls","title":"What are problems of TLS?","text":"<ul> <li>TLS protocol is way too complex  </li> <li>Many implementations in use</li> <li>Vulnerabilities in protocol design and implementations (lots of attacks in the past, e.g. BEAST, CRIME, ...)</li> <li>There are different SSL/TLS modes which built \"authenticated encryption\" by combining auth and enc. Many attacks could have been avoided if a primitive that implements both in one was used (AES-GCM or ChaCha20-Poly1305)</li> <li>Anything using ECB, CBC, CFB, OFB, CTR is likely broken (only when used on its own \\(\\rightarrow\\) CTR is used in AES-GCM)</li> <li>Even AES-GCM could lead to problems if a nonce is actually reused (bad implementation / misuse)</li> </ul> <p>Security Requirements</p> <ul> <li>TLS has a lot of requirements to be used securely<ul> <li>Implementation has to be secure</li> <li>Secure cipher suite has to be used and agreed upon with other party</li> <li>use X.509 certificates</li> <li>Tell client you support TLS: Strict-Transport-Security header (forces HTTPS)</li> <li>Secure certificate chains against bad CA<ul> <li>HTTP Public Key Pinning (HPKP)</li> <li>Certificate Patrol</li> <li>Certificate Transparency (CT)</li> </ul> </li> </ul> </li> <li>see Recommendations for strong cipher configuration</li> </ul>"},{"location":"themes/TLS/#what-is-keeping-tls-from-becoming-better","title":"What is keeping TLS from becoming better?","text":"<p>Deprecation blocks connections because older clients might only support older primitives. What percentage of clients / servers is it OK to block? Many middleboxes (firewalls, NATs, load balancers, deep packet inspection) require insecure versions too. Using primitives they don't support might break connectivity. On the other hand if old versions are supported, downgrade attacks are possible where the attacker forces the other party to use a less secure primitive.</p> <p>Example of why TLS is complex</p> <ol> <li>We have a version negotiation mechanism</li> <li>Servers have broken TLS implementations on version negotiation</li> <li>Browsers implement workaround (\u201cprotocol dance\u201d)</li> <li>Workaround introduces security issue (downgrade)</li> <li>Workaround for security issue introduced by workaround gets standardized.</li> </ol>"},{"location":"themes/TLS/#tls-13","title":"TLS 1.3","text":"<p>TLS 1.3 is trying to break away from the attack-patch-attack-patch design cycle of previous versions. The research community is more involved to make sure the primitives are secure. It's better but there are still lots of extensions and lots of modes and the client still begins negotiation with ClientHello.</p> <ul> <li>TLS 1.3 Full Handshake: This is the process that a client and server go through when they're communicating for the first time, or when they can't use an existing session for some reason.</li> </ul> <p></p> <ul> <li>TLS 1.3 Abbreviated Handshake: When a client and server have already established a connection in the past, the PSK can be reused &amp; the certificate is not send to save traffic.</li> </ul> <p></p> <ul> <li>TLS 1.3 0-RTT Handshake: The 0-RTT handshake allows the client to send data to the server in the very first message of the handshake, without waiting for the server to respond. This data is encrypted with keys derived from a PSK from a previous session. This reduces the latency of the handshake even further, but it has additional security considerations because the data could potentially be replayed by an attacker. As a result, 0-RTT should be used carefully and only in situations where replay attacks can be effectively mitigated.</li> </ul> <p></p> <p>Size</p> <ul> <li>Client Hello (256 byte for EC)</li> <li>Server response 1 (unencrypted) (155 byte)</li> <li>Server response 2 (encrypted) (2480 byte)</li> <li>Client Finish (50 byte)</li> </ul>"},{"location":"themes/TLS/#problems","title":"Problems","text":"<p>TLS 1.3 deprecated lots of insecure ciphers but still has downgrade attack problem. X.509 certificates are still used.</p> <p>links: AC2 TOC - Secure messaging and channels - Index</p>"},{"location":"themes/Threshold%20Signatures/","title":"Threshold Signatures","text":"<p>links: AC1 TOC - Secret sharing - Index</p> <p>We assume the following:</p> <p>Everything is Broken!</p> <p>Alice wants to create a cryptographic signature but:</p> <ul> <li>No single piece of hardware is trusted</li> <li>No single service provider is trusted</li> </ul> <p>But there is hope: Using \\(t\\) independent signature service providers might be ok!</p> <p>If we need \\(t\\) providers we should sign up with \\(n\\) providers initially so we can still create signatures if only \\(t/n\\) are available.</p>"},{"location":"themes/Threshold%20Signatures/#frost","title":"FROST","text":"<p>Flexible Round-Optimized Schnorr Threshold (FROST) is a \\(t\\)-out-of-\\(n\\) threshold signature scheme.</p> <ul> <li>Threshold signature schemes exist to facilitate shared ownership of a private key. Using a set of participants such that a threshold number of the set must cooperate to issue a signature. </li> <li>\\(t\\) of this set of \\(n\\) participants must work collaboratively to create the digital signature.</li> </ul>"},{"location":"themes/Threshold%20Signatures/#frosix","title":"FROSIX","text":"<p>Free Software implementation of the threshold signature scheme using FROST.</p> <ul> <li>RESTful API to interact between signer and signing services</li> <li>Configurable authentication methods to authorize creation of signature</li> <li>To avoid single point of failure the client should still use multiple devices</li> <li>Command-Line tool to interact with FROSIX service providers</li> </ul> <p>links: AC1 TOC - Secret sharing - Index</p>"},{"location":"themes/Trust%20Agility/","title":"Trust Agility","text":"<p>links: AC2 TOC - Centralized public-key infrastructures - Public Key Infrastructure - Index</p> <p>What is fundamentally wrong with the current CA model?</p> <ul> <li>Trust of a CA is forever (also trust in Registrars, TLD's, ...)</li> <li>Trust is centralized</li> <li>Information is distributed</li> <li>not \"own\" trust</li> </ul> <p>What is the idea of \"trust agility\", and is it reasonable?</p> <ul> <li>User decides which CA should verify a website (not being forced to trust a pre-set list of CAs)</li> <li>A trust decision can easily revisited at any time</li> </ul> <p>Understand the notion of \"perspectives\". Evaluate strengths and weaknesses of the perspective model.</p> <ul> <li>The Perspectives model is a system designed to enhance the security of certificate validation by using a network of \"Notary\" servers. When a client connects to a server, it can ask the Notaries what certificate they see for that server. If the client sees the same certificate as the Notaries, it can have higher confidence that the certificate is valid, even if the certificate is not signed by a trusted CA.</li> <li>Advantages:<ul> <li>can detect attacks to users or from specific network locations</li> <li>allows for trust agility (as trust decisions can be based on the Notary rather than a fixed list of CAs)</li> </ul> </li> <li>Disadvantages:<ul> <li>maintaining a network of Notaries</li> <li>works only if an attacker cannot control or influence what certificate the Notaries sees</li> <li>only works for the initial connection</li> <li>privacy-concerns (use Notary proxy with TLS)</li> <li>latency</li> <li>trust of Notaries (money/ no business model)</li> </ul> </li> </ul> <p>links: AC2 TOC - Centralized public-key infrastructures - Public Key Infrastructure - Index</p>"},{"location":"themes/Trust%20Issues%20in%20X.509/","title":"Trust Issues in X.509","text":"<p>links: AC2 TOC - Centralized public-key infrastructures - Public Key Infrastructure - Index</p>"},{"location":"themes/Trust%20Issues%20in%20X.509/#certificate-validation-issue-examples","title":"Certificate validation issue examples","text":"<ul> <li>BERserk was a catastrophic failure in the certificate validation of the NSS library (used by Firefox / Chrome)</li> <li>Most TLS libraries had a chain validation issue at some point</li> </ul>"},{"location":"themes/Trust%20Issues%20in%20X.509/#x509-ca-challenges","title":"X.509 CA challenges","text":"<p>Questions to consider</p> <ul> <li>Everyone has to trust a CA<ul> <li>Which one?</li> <li>What is it trusted to do?</li> </ul> </li> <li>Certificate bindings must be correct<ul> <li>Which John Smith is this?</li> <li>Who authorizes attributes in a certificate?</li> <li>How long are these values valid for?</li> <li>What process is used to verify the key holder?</li> </ul> </li> </ul> <p>Are CAs trustworthy?</p> <ul> <li>Any public CA can issue certificates for any domain name without obtaining permissions</li> <li>Who are these organizations, which we allow to issue certificates with little supervision?</li> <li>Most public CAs follow political and economic interests</li> <li>Root CAs can sign certificates of intermediate CAs with no constraints<ul> <li>19 root CAs signed around 15'430 intermediate CAs</li> <li>Only 94 intermediate CAs were owned by the signing CA organisations</li> </ul> </li> </ul> <p>List of CA issues</p> <p>Legal aspects</p> <p>What is a CA liable for?</p> <ul> <li>Certificate policies (CP) define rights, duties and obligations of each party in a PKI</li> <li>These documents usually have a legal effect</li> <li>The CP should be publicly exposed by CAs on their website and include:<ul> <li>Registration procedures</li> <li>Revocation procedures</li> <li>Liability issues</li> </ul> </li> </ul>"},{"location":"themes/Trust%20Issues%20in%20X.509/#domain-validation-via-e-mail","title":"Domain Validation via E-Mail","text":"<ul> <li>CA sends mail to defined aliases (admin, administrator, webmaster, hostmaster, postmaster, see Baseline Requirements)</li> <li>If you (EE) offer E-Mail you must make sure that nobody can register such an address</li> <li>One could argue if this is a sane system or not but it is documented in Baseline Requirements</li> <li>live.fi / xs4all.nl issues were caused by this validation method</li> </ul>"},{"location":"themes/Trust%20Issues%20in%20X.509/#certificate-revocation","title":"Certificate Revocation","text":"<ul> <li>Sometimes it is necessary to immediately block usage of a certificate before its expiration date</li> <li>A revocation request allows an EE / issuing CA to revoke a still valid certificate</li> <li>The CA must publish the revocation subsequently on a specific infrastructure</li> <li>Two possible options<ul> <li>Black-lists via Certificate Revocation List (CRL)</li> <li>White-lists via Online Certificate status Protocol (OCSP)</li> </ul> </li> </ul> <p>In practice</p> <ul> <li>Browsers use insecure soft-fail mode<ul> <li>GPT: This means that if a browser couldn't retrieve the CRL or get an OCSP response, it would consider the certificate as valid and continue the connection. This was primarily designed to prioritize usability over security. The idea was to prevent users from being unable to access websites due to intermittent network issues or problems with the CA's servers.</li> </ul> </li> <li>Chrome and Firefox distribute their own blocklists, but they don't scale</li> <li>OCSP stapling could help, but needs a mechanism to indicate its use (muststaple draft)</li> </ul> <p></p>"},{"location":"themes/Trust%20Issues%20in%20X.509/#certificate-revocation-lists-crl","title":"Certificate revocation lists (CRL)","text":"<p>CA must maintain and publish a list of all revoked (but not expired) certificates.</p> <p>Revocation reasons</p> <ul> <li>Users private key was compromised</li> <li>Content of certificate has changed</li> </ul> <p></p>"},{"location":"themes/Trust%20Issues%20in%20X.509/#online-certificate-status-protocol-ocsp","title":"Online Certificate Status Protocol (OCSP)","text":"<p>Clients</p> <p>Check certificate status online by a OCSP Responder. Client can ask for status of multiple certificates per query.</p> <p>Responder</p> <p>Replies with a signed message using a certificate with extension: extendedKeyUsage = OCSPSigning. Both messages are sent over port 80.</p> <p>Information about certificate in response</p> <ul> <li>good</li> <li>revoked</li> <li>unknown (e.g. certificate outdated)</li> <li>The signed responses can be stored / cached by the client</li> </ul> <p>Problems</p> <ul> <li>Performance and resource issues<ul> <li>OCSP may provide significant cost to a CA<ul> <li>High traffic website may generate huge volume of OCSP requests</li> <li>OCSP slows down browsing, since it requires the client to contact a third party (the CA) to confirm the validity of each certificate that it encounters</li> </ul> </li> </ul> </li> <li>Privacy<ul> <li>OCSP checking potentially leaks user privacy information to third party online OCSP service</li> </ul> </li> <li>User (in)decision<ul> <li>If OCSP response fails, user often is challenged by incomprehensible options</li> </ul> </li> </ul>"},{"location":"themes/Trust%20Issues%20in%20X.509/#ocsp-stapling-in-tls","title":"OCSP Stapling in TLS","text":"<p>OCSP stapling in TLS mitigates these problems:</p> <ul> <li>The certificate holder queries the OCSP server itself at regular intervals to obtain a signed time-stamped OCSP response</li> <li>When browser of the client attempt to connect to the site, the response is included (\"stapled\") within the TLS handshake (ServerHello extension)</li> <li>The TLS client must explicitly request OCSP information as part of the ClientHello message</li> </ul>"},{"location":"themes/Trust%20Issues%20in%20X.509/#man-in-the-middle-proxies","title":"Man in the middle proxies","text":"<ul> <li>Superfish: Created a TLS man in the middle proxy, private key was static and part of the software (Komodia)</li> <li>Privdog: Just disabled TLS verification completely (Privdog is founded by the CEO of Comodo)</li> <li>Several Antiviruses do the same. Not fully broken, but all this decreases the security of TLS.</li> <li>This is only an indirect problem of CAs and TLS. It should not be possible to undermine / bypass the security.</li> </ul> <p>links: AC2 TOC - Centralized public-key infrastructures - Public Key Infrastructure - Index</p>"},{"location":"themes/Trust%20Model/","title":"Trust Model","text":"<p>links: AC2 TOC DPKI - Index</p>"},{"location":"themes/Trust%20Model/#trust-on-first-use-tofu","title":"Trust on First Use (TOFU)","text":"<ul> <li>client creates a trust relationship with a not-yet-trusted and unknown endpoint</li> <li>the public key of the endpoint is not verified, but subsequent connections to the same peer require that the information &amp; key remain the same</li> <li>Used in SSH and in HTTP Public Key Pinning (HPKP)</li> </ul>"},{"location":"themes/Trust%20Model/#the-web-of-trust","title":"The Web of Trust","text":"<ul> <li>Alice has certified many of her contacts and flagged some as trusted</li> <li>Bob has been certified by many of his contacts</li> <li>Alice has not yet certified Bob, but wants to securely communicate with him</li> <li>Web of Trust: find paths in the certification graph</li> </ul>"},{"location":"themes/Trust%20Model/#certificate-trust-models","title":"Certificate Trust Models","text":"<ul> <li>Direct Trust<ul> <li>one trust in a relationship between \"public key\" and \"identity\"</li> <li>verified by itself (directly/personally)</li> <li>\\(\\rightarrow\\) zero-solution: key management is complex, legal validity/liability not possible</li> </ul> </li> <li>Web of Trust<ul> <li>one accepts \"public keys\", where the identity binding is validated by others</li> <li>accept other entities as trustworthy authorities</li> <li>\\(\\rightarrow\\) Flexible solution: usable in bigger scope (e.g. community), online key server, legal validity/liability not possible</li> </ul> </li> <li>Hierarchical Trust<ul> <li>one accepts \"public keys\", where the identity binding is validated by trustworthy authority</li> <li>\\(\\rightarrow\\) Strict solution: only validated keys by authority, national or global scope, key management complex, legal validity/liability possible</li> </ul> </li> </ul> <p>links: AC2 TOC DPKI - Index</p>"},{"location":"themes/WEP%20Insecurity/","title":"WEP Insecurity","text":"<p>links: AC2 TOC - Secure messaging and channels - Index</p> <p>Read the Article \"Intercepting Mobile Communications: The Insecurity of 802.11\" (WEP-mobicom.pdf)</p> <ul> <li>Keystream reuse: Capture ciphertexts with the same IV and key \\(\\rightarrow\\) if we know some of the one plaintext, we can easily compute the other plaintext</li> <li>Decryption Dictionaries: the size of the dictionary depends of the size of the IV, not the key length \\(\\rightarrow\\) only 24bit!</li> <li>Key Management: use 4 keys \\(\\rightarrow\\) most installations use a single key for all connections</li> <li>Message Modification: messages can be modified without fear of detection \\(\\rightarrow\\) is also possible for unknown messages (XOR message &amp; CRC)</li> <li>Message Injection: Knowledge of plaintext &amp; ciphertext reveals the keystream \\(\\rightarrow\\) with one keystream, we can send any packet with the same IV (which is allowed)</li> </ul> <p></p> <p>links: AC2 TOC - Secure messaging and channels - Index</p>"},{"location":"themes/X.509%20CA%20Alternatives/","title":"X.509 CA Alternatives","text":"<p>links: AC2 TOC - Centralized public-key infrastructures - Index</p>"},{"location":"themes/X.509%20CA%20Alternatives/#how-to-identify-black-sheeps","title":"How to identify black sheeps?","text":""},{"location":"themes/X.509%20CA%20Alternatives/#alternative-1-dnssec-dane","title":"Alternative 1: DNSSEC / DANE","text":""},{"location":"themes/X.509%20CA%20Alternatives/#dane-dns-based-authentication-of-named-entities","title":"DANE (DNS-based Authentication of Named Entities)","text":"<p>DANE does not provide any security today and it is very uncertain if it ever will.</p> <p>Wikipedia: TLS/SSL encryption is currently based on certificates issued by certificate authorities (CAs). Within the last few years, a number of CA providers suffered serious security breaches, allowing the issuance of certificates for well-known domains to those who don't own those domains. Trusting a large number of CAs might be a problem because any breached CA could issue a certificate for any domain name. DANE enables the administrator of a domain name to certify the keys used in that domain's TLS clients or servers by storing them in the Domain Name System (DNS). DANE needs the DNS records to be signed with DNSSEC for its security model to work.</p> <p>Additionally DANE allows a domain owner to specify which CA is allowed to issue certificates for a particular resource, which solves the problem of any CA being able to issue certificates for any domain.</p> <p>DANE solves similar problems as:</p> <ul> <li>Certificate Transparency: Ensuring that rogue CAs cannot issue certificates without the permission of the domain holder without being detected</li> <li>DNS Certification Authority Authorization: Limiting which CAs can issue certificates for a given domain However, unlike DANE, those technologies have wide support from browsers.</li> </ul>"},{"location":"themes/X.509%20CA%20Alternatives/#dnssec","title":"DNSSEC","text":"<p>DNSSEC provides cryptographic authentication of data, authenticated denial of existence, and data integrity, but not availability or confidentiality.</p> <p>For DNSSEC to work and provide security you need:</p> <ul> <li>a signed root</li> <li>a signed top level domain</li> <li>a domain broker that supports DNSSEC</li> <li>a DNS operator that supports DNSSEC</li> <li>a client that verifies DNSSEC</li> </ul> <p>DNSSEC propagandists claim that a big percentage of TLDs are signed and that there are already a big amount of signed domains. This is completely irrelevant though as long as nobody is checking the signatures. Even if checking is enabled on the client and the signatures are valid today, that may not be true after a key rollover. This is the same issue as with TLS. How many users are you willing to burn by enabling this feature?</p> <p>\\(\\rightarrow\\) Client deployment of DNSSEC is very close to zero</p> <p>DNSSEC signature verification happens in the DNS resolver but most clients don't have a DNS resolver which means the client would need to trust his DNS resolver (bad). Options would be that operating systems ship with DNS resolvers or applications ship with their own DNS resolver but that seems unlikely. It is not clear how to solve these issues.</p> <p>Since DANE is building on top of DNSSEC functionality it can't work until DNSSEC is widely deployed.</p>"},{"location":"themes/X.509%20CA%20Alternatives/#alternative-2-http-publickey-pinning-hpkp","title":"Alternative 2: HTTP PublicKey Pinning (HPKP)","text":"<p>Wikipedia: HTTP Public Key Pinning (HPKP) is an obsolete Internet security mechanism delivered via an HTTP header which allows HTTPS websites to resist impersonation by attackers using misused or otherwise fraudulent digital certificates. A server uses it to deliver to the client (e.g. web browser) a set of hashes of public keys that must appear in the certificate chain of future connections to the same domain name.</p> <p>For example, attackers might compromise a certificate authority, and then mis-issue certificates for a web origin. To combat this risk, the HTTPS web server serves a list of \u201cpinned\u201d public key hashes valid for a given time; on subsequent connections, during that validity time, clients expect the server to use one or more of those public keys in its certificate chain. If it does not, an error message is shown, which cannot be (easily) bypassed by the user.</p> <p>The technique does not pin certificates, but public key hashes. This means that one can use the key pair to get a certificate from any certificate authority, when one has access to the private key. Also the user can pin public keys of root or intermediate certificates (created by certificate authorities), restricting site to certificates issued by the said certificate authority.</p> <p>*Due to HPKP mechanism complexity and possibility of accidental misuse, in 2017 browsers deprecated and removed HPKP support in favor of Certificate Transparency.</p> <ul> <li>Always needs at least two keys because you need to be able to change your certificates in the future</li> <li>Implements a \"Trust on First Use\" TOFU protection</li> <li>Only usable for Web (HTTP)</li> <li>There is a proposal called TACK to do something similar on the TLS layer</li> <li>HPKP improves confidentiality but can be dangerous to availability<ul> <li>If you loose your keys you may lock out your site visitors</li> <li>Needs careful planning of key management</li> </ul> </li> </ul>"},{"location":"themes/X.509%20CA%20Alternatives/#alternative-3-certi-ficate-transparency","title":"Alternative 3: Certi\fficate Transparency","text":"<ul> <li>Public log with all certificates</li> <li>Certificate can contain log proof confirming that it has been added to a log</li> <li>When a browser sees a certificate that is not in the log it can raise alarm</li> <li>Certificate Transparency runs in soft-fail mode, it can't prevent misuse</li> <li>But it makes it hard to use malicious certificates without being noticed</li> </ul>"},{"location":"themes/X.509%20CA%20Alternatives/#alternative-4-certification-authority-authorization-caa","title":"Alternative 4: Certification Authority Authorization (CAA)","text":"<ul> <li>CAA tells the client which CA is allowed for a domain</li> <li>Relies on DNS(SEC) security</li> <li>The configured CA must also still be trustworthy</li> </ul>"},{"location":"themes/X.509%20CA%20Alternatives/#alternative-5-http-strict-transport-security-hsts","title":"Alternative 5: HTTP Strict Transport Security (HSTS)","text":"<ul> <li>HSTS tells the browser to mark a page as HTTPS only for a defined timeframe</li> <li>Further prevents stripping attacks</li> <li>You can even pre-load your webpage as HTTPS only into Chrome and Firefox</li> </ul> <p>Attacks through NTP</p> <ul> <li>HSTS protects a page for a defined timeframe</li> <li>System time is considered trustworthy, but it is not</li> <li>Delorean-Attack circumvents HSTS with NTP</li> <li>NTP provides no security (solutions: tlsdate, openntpd)</li> </ul> <p>links: AC2 TOC - Centralized public-key infrastructures - Index</p>"},{"location":"themes/X.509%20Certificates/","title":"X.509 Certificates","text":"<p>links: AC2 TOC - X.509 - Index</p>"},{"location":"themes/X.509%20Certificates/#content-of-a-x509-certificate","title":"Content of a X.509 certificate","text":"<ul> <li>X.509 version (Integer)</li> <li>CA serial number (Integer)</li> <li>A digital signature algorithm identifier (OID)</li> <li>The identity of the signer / issuer (Distinguished Name)</li> <li>Validity period (DateTime Not Before, Not After)</li> <li>The identity of the subject (common name, org. unit, org., state, country \\(\\rightarrow\\) OID)</li> <li>The public key of the subject (Bit String)</li> <li>Optional: URL to revocation center (OCSP!)</li> <li>Auxiliary information (identity address, alternative names \\(\\rightarrow\\) SAN)</li> <li>The digital signature</li> </ul> <p>Size</p> <p>A typical X.509 certificate size can range from a few hundred bytes to a few kilobytes.</p> <p>Maybe between 2 and 8 kilobytes.</p> <ul> <li>Public key (32-512 byte)</li> <li>Signature (32-64 byte)</li> <li>Timestamps, subject, issuer, protocol basics (many characters)</li> <li>ASN.1 and DER (structure, encoding)</li> </ul> <p>Be aware that we have multiple X.509 certificates in a chain.</p> <p></p>"},{"location":"themes/X.509%20Certificates/#x509-in-asn1","title":"X.509 in ASN.1","text":"<pre><code>Certificate ::= SEQUENCE {\n    tbsCertificate TBSCertificate,\n    signatureAlgorithm AlgorithmIdentifier,\n    signatureValue BIT STRING }\n</code></pre>"},{"location":"themes/X.509%20Certificates/#version","title":"Version","text":"<p><code>Version ::= INTEGER {v1(0), v2(1), v3(2)}</code></p> <p>Mostly v3 in use today.</p>"},{"location":"themes/X.509%20Certificates/#serial-number","title":"Serial Number","text":"<p><code>CertificateSerialNumber ::= INTEGER</code></p> <p>The unique identifier for this certificate relative to the certificate issuer. This serial number is essential when revoking a certificate.</p>"},{"location":"themes/X.509%20Certificates/#signature-algorithm","title":"Signature Algorithm","text":"<pre><code>AlgorithmIdentifier ::= SEQUENCE {\n  algorithm OBJECT IDENTIFIER,\n  parameters ANY DEFINED BY algorithm OPTIONAL}\n</code></pre> <p>Specifies the algorithm and any needed parameters (like the elliptic curve to be used in ECDSA). This is specified twice in \u201cStandard Information\u201d and in \u201cSignature\u201d. Both MUST be identical.</p>"},{"location":"themes/X.509%20Certificates/#issuer","title":"Issuer","text":"<p>Holds the Distinguished Name (DN) in X.500 notation of the CA that issued the certificate</p>"},{"location":"themes/X.509%20Certificates/#validity","title":"Validity","text":"<pre><code>Validity ::= SEQUENCE {\n  notBefore Time,\n  notAfter Time  }\n</code></pre> <p>Valid unless otherwise revoked. In UTC time.</p>"},{"location":"themes/X.509%20Certificates/#subject-name","title":"Subject Name","text":"<p>The same DN is not allowed to be given to different entities.</p>"},{"location":"themes/X.509%20Certificates/#general-subject-public-key-info","title":"General Subject Public Key Info","text":"<pre><code>SubjectPublicKeyInfo ::= SEQUENCE {\n  algorithm AlgorithmIdentifier,\n  subjectPublicKey BIT STRING }\n\nAlgorithmIdentifier ::= SEQUENCE {\n  algorithm OBJECT IDENTIFIER,\n  parameters ANY DEFINED BY algorithm OPTIONAL }\n\n// For RSA\n\nAlgorithmIdentifier ::= SEQUENCE {\n  algorithm 1.2.840.113549.1.1.1 -- RSA\n  parameters NULL }\n\nSubjectPublicKey ::= SEQUENCE {\n  modulus INTEGER, -- n\n  publicExponent INTEGER -- e }\n\n// For DSA\n\nAlgorithmIdentifier ::= SEQUENCE {\n  algorithm 1.2.840.10040.4.1 -- DSA\n  parameters DSS-Params }\n\nDSS-Params ::= SEQUENCE {\n  p INTEGER, (prime modulus)\n  q INTEGER, (prime divisor of p-1)\n  g INTEGER  (generator) }\n\nSubjectPublicKey ::= BIT STRING {\n  publicExponent INTEGER }\n\n// For ECC\n\nAlgorithmIdentifier ::= SEQUENCE {\n  algorithm 1.2.840.10045.2.1 -- EC Public Key\n  parameters 1.3.132.0.10 -- 256-bit Koblitz: secp256k1 }SubjectPublicKey ::= BITSTRING {\n  ECPoint OCTET STRING }\n</code></pre>"},{"location":"themes/X.509%20Certificates/#x509-extensions","title":"X.509 Extensions","text":"<p>An extension can be marked as CRITICAL (usually extension \u201ckeyUsage\u201d only). In this case an application must be able to process and handle this extension, if not it must reject the whole certificate!</p>"},{"location":"themes/X.509%20Certificates/#x509v3-subjectaltnames-san","title":"X.509v3 subjectAltNames (SAN)","text":"<p>Indicates alternative name forms associated with the owner of the certificate. If the subject DN (Standard Information) is null, one or more alternative name forms must be present, and this extension must be marked CRITICAL.</p> <p>Email addresses must be subjectAltNames and should not be used for the subject distinguished name (DN)!</p>"},{"location":"themes/X.509%20Certificates/#basicconstraints","title":"basicConstraints","text":"<p>Indicates if the subject may act as a CA. If so, a certification path length constraint may be specified. If the path length is not present then there is no limit!</p> <p>To identify a CA Root Certificate (for signing certificates): the basicConstraints field should always be present, and the CA attribute in the basicConstraints field must be set to a value of TRUE and must be marked CRITICAL.</p>"},{"location":"themes/X.509%20Certificates/#keyusage","title":"keyUsage","text":"<p>Bit string used to identify (or restrict) the functions or services that can be supported by using the public key in this certificate.</p> <p>Leaf:</p> <ul> <li>digitalSignature: Bit 0</li> <li>nonRepudiation: Bit 1</li> <li>keyEncipherment: Bit 2</li> <li>dataEncipherment: Bit 3</li> <li>keyAgreement: Bit 4</li> </ul> <p>CA:</p> <ul> <li>certificateSign: Bit 5</li> <li>crlSign: Bit 6 (Sign revoke certificate)</li> </ul>"},{"location":"themes/X.509%20Certificates/#extended-key-usage","title":"Extended Key Usage","text":"<p>Sequence of one or more Object Identifiers (OID) that identify specific usage of the certificate. OIDs associated with this extension can be:</p> <ul> <li>serverAuth \u2013 TLS Web Server Authentication </li> <li>clientAuth \u2013 TLS Web Client Authentication </li> <li>codeSigning</li> <li>emailProtection </li> <li>timeStamping</li> <li>ocspSigning</li> </ul>"},{"location":"themes/X.509%20Certificates/#policy-information-extensions","title":"Policy Information Extensions","text":"<ul> <li>Authority Key Identifier<ul> <li>Identifies the public key that corresponds to the private key that has signed the certificate. This MUST be included in all certificates (non-critical), unless it is a self-signed certificate.</li> </ul> </li> <li>Subject Key ID<ul> <li>Identifies certificates that contain a particular public key. This MUST be included in all CA certificates (non-critical).</li> </ul> </li> <li>CRL Distribution Point<ul> <li>Indicates the location of the CRL partition where revocation information associated with this certificate resides.</li> </ul> </li> <li>Certificate Policies<ul> <li>The certificate policies extension contains a sequence of one or more policy information terms, each of which consists of an OID.</li> </ul> </li> <li>Private-key usage period<ul> <li>Indicates the period of time to use the private key corresponding to the public key. For example, with digital signature keys, the usage period for the signing private key can be shorter than that for the signature verifying public key.</li> </ul> </li> </ul>"},{"location":"themes/X.509%20Certificates/#authority-information-access","title":"Authority Information Access","text":"<p>A private extension present in end-entity and CA certificates, indicates how information or services offered by the issuer of the certificate can be obtained. Two access method OIDs have been defined:</p> <ul> <li>CA Issuers: This information can be used to help build certification paths or other information of services of the issuing CA</li> <li>OCSP Validation Service: This access method is for on-line validation services based on OCSP</li> </ul>"},{"location":"themes/X.509%20Certificates/#subject-information-access","title":"Subject Information Access","text":"<p>A private extension present in end-entity and CA certificates, indicates how information and services offered by the subject in the certificate can be obtained. One access method OID has been defined for CAs and one for end entities:</p> <ul> <li>CA Repository: This CA Repository access method identifies the location of the repository where the CA publishes certificate and CRL information</li> <li>Time stamping: The Time-Stamping access method indicates that the subject identified in the certificate offers a time stamping service</li> </ul> <p>links: AC2 TOC - X.509 - Index</p>"},{"location":"themes/_media/slides/ITSec/","title":"IT-Sec Exercise 2","text":""},{"location":"themes/_media/slides/ITSec/#mario-hadorn-oliver-aemmer","title":"Mario Hadorn Oliver Aemmer","text":"<ol> <li> <pre><code>import java.io.*;  \nimport java.util.Scanner;  \n\npublic class main {  \n\n    public static String shift (String string_to_shift, int shift_amount) {  \n\n        string_to_shift = string_to_shift.toLowerCase();  \n        char[] string_chars = string_to_shift.toCharArray();  \n\n        String shifted_string = \"\";  \n\n        for (int c : string_chars) {  \n            if(c + shift_amount &gt; 122 ){  \n                c = 96 + (c + shift_amount) % 122;  \n            } else {  \n                c += shift_amount;  \n            }  \n            shifted_string += Character.toString(c);  \n        }  \n\n        return shifted_string;  \n    }  \n\n    public static void main(String args[]) throws IOException{  \n\n        Scanner sc = new Scanner(System.in);  \n\n        System.out.println(\"Shift amount: \");  \n        int shift_amount = Integer.parseInt(sc.nextLine());  \n        System.out.println(\"String to shift: \");  \n        String string_to_shift = sc.nextLine();  \n\n        String shifted_string = shift(string_to_shift, shift_amount);  \n\n        System.out.println(shifted_string);  \n\n    }  \n}\n</code></pre> </li> <li> <p>ARENA and RIVER both encrypt to EVIRE</p> </li> <li> <ol> <li>127\u2019882\u2019883 years</li> <li>Because of frequency analysis</li> </ol> </li> <li>10110 00101 11001 01001 00111</li> </ol>"}]}